// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pokerth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NetGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetGameInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetGameInfo_NetGameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetGameInfo_RaiseIntervalMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetGameInfo_EndRaiseMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnounceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnounceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnnounceMessage_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnnounceMessage_Version_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AnnounceMessage_ServerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InitMessage_LoginType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AuthServerChallengeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthServerChallengeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthClientResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthClientResponseMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthServerVerificationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthServerVerificationMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitAckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarHeaderMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarHeaderMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarDataMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarDataMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AvatarEndMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvatarEndMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnknownAvatarMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnknownAvatarMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerListMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerListMessage_PlayerListNotification_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameListNewMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameListNewMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameListUpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameListUpdateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameListPlayerJoinedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameListPlayerJoinedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameListPlayerLeftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameListPlayerLeftMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameListAdminChangedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameListAdminChangedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoReplyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage_PlayerInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoReplyMessage_PlayerInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionRequestMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscriptionRequestMessage_SubscriptionAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JoinExistingGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinExistingGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinNewGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinNewGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejoinExistingGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejoinExistingGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGameAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGameAckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinGameFailedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinGameFailedMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinGameFailedMessage_JoinGameFailureReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerJoinedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerJoinedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePlayerLeftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePlayerLeftMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GamePlayerLeftMessage_GamePlayerLeftReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameAdminChangedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAdminChangedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemovedFromGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemovedFromGameMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RemovedFromGameMessage_RemovedFromGameReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KickPlayerRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPlayerRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveGameRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveGameRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitePlayerToGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitePlayerToGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteNotifyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteNotifyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RejectGameInvitationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectGameInvitationMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectGameInvitationMessage_RejectGameInvReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RejectInvNotifyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectInvNotifyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartEventMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartEventMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StartEventMessage_StartEventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StartEventAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartEventAckMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartInitialMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartInitialMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartRejoinMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartRejoinMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartRejoinMessage_RejoinPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartRejoinMessage_RejoinPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandStartMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandStartMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandStartMessage_PlainCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandStartMessage_PlainCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayersTurnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayersTurnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyActionRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyActionRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* YourActionRejectedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YourActionRejectedMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* YourActionRejectedMessage_RejectionReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PlayersActionDoneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayersActionDoneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealFlopCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealFlopCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealTurnCardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealTurnCardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DealRiverCardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DealRiverCardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllInShowCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllInShowCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllInShowCardsMessage_PlayerAllIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllInShowCardsMessage_PlayerAllIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndOfHandShowCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndOfHandShowCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndOfHandHideCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndOfHandHideCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowMyCardsRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowMyCardsRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AfterHandShowCardsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AfterHandShowCardsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndOfGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndOfGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerIdChangedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerIdChangedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskKickPlayerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskKickPlayerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskKickDeniedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskKickDeniedMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AskKickDeniedMessage_KickDeniedReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StartKickPetitionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartKickPetitionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteKickRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteKickRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteKickReplyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteKickReplyMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VoteKickReplyMessage_VoteKickReplyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* KickPetitionUpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickPetitionUpdateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndKickPetitionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndKickPetitionMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EndKickPetitionMessage_PetitionEndReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StatisticsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticsMessage_StatisticsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticsMessage_StatisticsData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatisticsMessage_StatisticsData_StatisticsType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatMessage_ChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChatRejectMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRejectMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DialogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DialogMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeoutWarningMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeoutWarningMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeoutWarningMessage_TimeoutReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResetTimeoutMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetTimeoutMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAvatarMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAvatarMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAvatarAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAvatarAckMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportAvatarAckMessage_ReportAvatarResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReportGameMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGameMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportGameAckMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportGameAckMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportGameAckMessage_ReportGameResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ErrorMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorMessage_ErrorReason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PokerTHMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PokerTHMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PokerTHMessage_PokerTHMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetGameMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetPlayerAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetPlayerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerInfoRights_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetAvatarType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pokerth_2eproto() {
  protobuf_AddDesc_pokerth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pokerth.proto");
  GOOGLE_CHECK(file != NULL);
  NetGameInfo_descriptor_ = file->message_type(0);
  static const int NetGameInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, gamename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, netgametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, maxnumplayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, raiseintervalmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, raiseeveryhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, raiseeveryminutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, endraisemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, endraisesmallblindvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, proposedguispeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, delaybetweenhands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, playeractiontimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, firstsmallblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, startmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, manualblinds_),
  };
  NetGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetGameInfo_descriptor_,
      NetGameInfo::default_instance_,
      NetGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetGameInfo));
  NetGameInfo_NetGameType_descriptor_ = NetGameInfo_descriptor_->enum_type(0);
  NetGameInfo_RaiseIntervalMode_descriptor_ = NetGameInfo_descriptor_->enum_type(1);
  NetGameInfo_EndRaiseMode_descriptor_ = NetGameInfo_descriptor_->enum_type(2);
  PlayerResult_descriptor_ = file->message_type(1);
  static const int PlayerResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, resultcard1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, resultcard2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, besthandposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, moneywon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, playermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, cardsvalue_),
  };
  PlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerResult_descriptor_,
      PlayerResult::default_instance_,
      PlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerResult));
  AnnounceMessage_descriptor_ = file->message_type(2);
  static const int AnnounceMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, latestgameversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, latestbetarevision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, numplayersonserver_),
  };
  AnnounceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnounceMessage_descriptor_,
      AnnounceMessage::default_instance_,
      AnnounceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnounceMessage));
  AnnounceMessage_Version_descriptor_ = AnnounceMessage_descriptor_->nested_type(0);
  static const int AnnounceMessage_Version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage_Version, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage_Version, minor_),
  };
  AnnounceMessage_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnnounceMessage_Version_descriptor_,
      AnnounceMessage_Version::default_instance_,
      AnnounceMessage_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnnounceMessage_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnnounceMessage_Version));
  AnnounceMessage_ServerType_descriptor_ = AnnounceMessage_descriptor_->enum_type(0);
  InitMessage_descriptor_ = file->message_type(3);
  static const int InitMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, requestedversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, mylastsessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, authserverpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, clientuserdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, avatarhash_),
  };
  InitMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitMessage_descriptor_,
      InitMessage::default_instance_,
      InitMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitMessage));
  InitMessage_LoginType_descriptor_ = InitMessage_descriptor_->enum_type(0);
  AuthServerChallengeMessage_descriptor_ = file->message_type(4);
  static const int AuthServerChallengeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerChallengeMessage, serverchallenge_),
  };
  AuthServerChallengeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthServerChallengeMessage_descriptor_,
      AuthServerChallengeMessage::default_instance_,
      AuthServerChallengeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerChallengeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerChallengeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthServerChallengeMessage));
  AuthClientResponseMessage_descriptor_ = file->message_type(5);
  static const int AuthClientResponseMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthClientResponseMessage, clientresponse_),
  };
  AuthClientResponseMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthClientResponseMessage_descriptor_,
      AuthClientResponseMessage::default_instance_,
      AuthClientResponseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthClientResponseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthClientResponseMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthClientResponseMessage));
  AuthServerVerificationMessage_descriptor_ = file->message_type(6);
  static const int AuthServerVerificationMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerVerificationMessage, serververification_),
  };
  AuthServerVerificationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthServerVerificationMessage_descriptor_,
      AuthServerVerificationMessage::default_instance_,
      AuthServerVerificationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerVerificationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthServerVerificationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthServerVerificationMessage));
  InitAckMessage_descriptor_ = file->message_type(7);
  static const int InitAckMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, yoursessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, yourplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, youravatarhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, rejoingameid_),
  };
  InitAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitAckMessage_descriptor_,
      InitAckMessage::default_instance_,
      InitAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitAckMessage));
  AvatarRequestMessage_descriptor_ = file->message_type(8);
  static const int AvatarRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRequestMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRequestMessage, avatarhash_),
  };
  AvatarRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarRequestMessage_descriptor_,
      AvatarRequestMessage::default_instance_,
      AvatarRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarRequestMessage));
  AvatarHeaderMessage_descriptor_ = file->message_type(9);
  static const int AvatarHeaderMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarHeaderMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarHeaderMessage, avatartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarHeaderMessage, avatarsize_),
  };
  AvatarHeaderMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarHeaderMessage_descriptor_,
      AvatarHeaderMessage::default_instance_,
      AvatarHeaderMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarHeaderMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarHeaderMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarHeaderMessage));
  AvatarDataMessage_descriptor_ = file->message_type(10);
  static const int AvatarDataMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataMessage, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataMessage, avatarblock_),
  };
  AvatarDataMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarDataMessage_descriptor_,
      AvatarDataMessage::default_instance_,
      AvatarDataMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarDataMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarDataMessage));
  AvatarEndMessage_descriptor_ = file->message_type(11);
  static const int AvatarEndMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEndMessage, requestid_),
  };
  AvatarEndMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AvatarEndMessage_descriptor_,
      AvatarEndMessage::default_instance_,
      AvatarEndMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEndMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvatarEndMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AvatarEndMessage));
  UnknownAvatarMessage_descriptor_ = file->message_type(12);
  static const int UnknownAvatarMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownAvatarMessage, requestid_),
  };
  UnknownAvatarMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnknownAvatarMessage_descriptor_,
      UnknownAvatarMessage::default_instance_,
      UnknownAvatarMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownAvatarMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownAvatarMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnknownAvatarMessage));
  PlayerListMessage_descriptor_ = file->message_type(13);
  static const int PlayerListMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListMessage, playerlistnotification_),
  };
  PlayerListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerListMessage_descriptor_,
      PlayerListMessage::default_instance_,
      PlayerListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerListMessage));
  PlayerListMessage_PlayerListNotification_descriptor_ = PlayerListMessage_descriptor_->enum_type(0);
  GameListNewMessage_descriptor_ = file->message_type(14);
  static const int GameListNewMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, isprivate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, playerids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, adminplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, gameinfo_),
  };
  GameListNewMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameListNewMessage_descriptor_,
      GameListNewMessage::default_instance_,
      GameListNewMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListNewMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameListNewMessage));
  GameListUpdateMessage_descriptor_ = file->message_type(15);
  static const int GameListUpdateMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListUpdateMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListUpdateMessage, gamemode_),
  };
  GameListUpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameListUpdateMessage_descriptor_,
      GameListUpdateMessage::default_instance_,
      GameListUpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListUpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListUpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameListUpdateMessage));
  GameListPlayerJoinedMessage_descriptor_ = file->message_type(16);
  static const int GameListPlayerJoinedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerJoinedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerJoinedMessage, playerid_),
  };
  GameListPlayerJoinedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameListPlayerJoinedMessage_descriptor_,
      GameListPlayerJoinedMessage::default_instance_,
      GameListPlayerJoinedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerJoinedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerJoinedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameListPlayerJoinedMessage));
  GameListPlayerLeftMessage_descriptor_ = file->message_type(17);
  static const int GameListPlayerLeftMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerLeftMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerLeftMessage, playerid_),
  };
  GameListPlayerLeftMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameListPlayerLeftMessage_descriptor_,
      GameListPlayerLeftMessage::default_instance_,
      GameListPlayerLeftMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerLeftMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListPlayerLeftMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameListPlayerLeftMessage));
  GameListAdminChangedMessage_descriptor_ = file->message_type(18);
  static const int GameListAdminChangedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListAdminChangedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListAdminChangedMessage, newadminplayerid_),
  };
  GameListAdminChangedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameListAdminChangedMessage_descriptor_,
      GameListAdminChangedMessage::default_instance_,
      GameListAdminChangedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListAdminChangedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameListAdminChangedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameListAdminChangedMessage));
  PlayerInfoRequestMessage_descriptor_ = file->message_type(19);
  static const int PlayerInfoRequestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequestMessage, playerid_),
  };
  PlayerInfoRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoRequestMessage_descriptor_,
      PlayerInfoRequestMessage::default_instance_,
      PlayerInfoRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoRequestMessage));
  PlayerInfoReplyMessage_descriptor_ = file->message_type(20);
  static const int PlayerInfoReplyMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage, playerinfodata_),
  };
  PlayerInfoReplyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoReplyMessage_descriptor_,
      PlayerInfoReplyMessage::default_instance_,
      PlayerInfoReplyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoReplyMessage));
  PlayerInfoReplyMessage_PlayerInfoData_descriptor_ = PlayerInfoReplyMessage_descriptor_->nested_type(0);
  static const int PlayerInfoReplyMessage_PlayerInfoData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, ishuman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, playerrights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, avatardata_),
  };
  PlayerInfoReplyMessage_PlayerInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoReplyMessage_PlayerInfoData_descriptor_,
      PlayerInfoReplyMessage_PlayerInfoData::default_instance_,
      PlayerInfoReplyMessage_PlayerInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoReplyMessage_PlayerInfoData));
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_ = PlayerInfoReplyMessage_PlayerInfoData_descriptor_->nested_type(0);
  static const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData_AvatarData, avatartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData_AvatarData, avatarhash_),
  };
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_,
      PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_,
      PlayerInfoReplyMessage_PlayerInfoData_AvatarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReplyMessage_PlayerInfoData_AvatarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfoReplyMessage_PlayerInfoData_AvatarData));
  SubscriptionRequestMessage_descriptor_ = file->message_type(21);
  static const int SubscriptionRequestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequestMessage, subscriptionaction_),
  };
  SubscriptionRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionRequestMessage_descriptor_,
      SubscriptionRequestMessage::default_instance_,
      SubscriptionRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionRequestMessage));
  SubscriptionRequestMessage_SubscriptionAction_descriptor_ = SubscriptionRequestMessage_descriptor_->enum_type(0);
  JoinExistingGameMessage_descriptor_ = file->message_type(22);
  static const int JoinExistingGameMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinExistingGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinExistingGameMessage, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinExistingGameMessage, autoleave_),
  };
  JoinExistingGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinExistingGameMessage_descriptor_,
      JoinExistingGameMessage::default_instance_,
      JoinExistingGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinExistingGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinExistingGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinExistingGameMessage));
  JoinNewGameMessage_descriptor_ = file->message_type(23);
  static const int JoinNewGameMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNewGameMessage, gameinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNewGameMessage, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNewGameMessage, autoleave_),
  };
  JoinNewGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinNewGameMessage_descriptor_,
      JoinNewGameMessage::default_instance_,
      JoinNewGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNewGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinNewGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinNewGameMessage));
  RejoinExistingGameMessage_descriptor_ = file->message_type(24);
  static const int RejoinExistingGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejoinExistingGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejoinExistingGameMessage, autoleave_),
  };
  RejoinExistingGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejoinExistingGameMessage_descriptor_,
      RejoinExistingGameMessage::default_instance_,
      RejoinExistingGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejoinExistingGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejoinExistingGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejoinExistingGameMessage));
  JoinGameAckMessage_descriptor_ = file->message_type(25);
  static const int JoinGameAckMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameAckMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameAckMessage, areyougameadmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameAckMessage, gameinfo_),
  };
  JoinGameAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGameAckMessage_descriptor_,
      JoinGameAckMessage::default_instance_,
      JoinGameAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGameAckMessage));
  JoinGameFailedMessage_descriptor_ = file->message_type(26);
  static const int JoinGameFailedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameFailedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameFailedMessage, joingamefailurereason_),
  };
  JoinGameFailedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinGameFailedMessage_descriptor_,
      JoinGameFailedMessage::default_instance_,
      JoinGameFailedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameFailedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGameFailedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinGameFailedMessage));
  JoinGameFailedMessage_JoinGameFailureReason_descriptor_ = JoinGameFailedMessage_descriptor_->enum_type(0);
  GamePlayerJoinedMessage_descriptor_ = file->message_type(27);
  static const int GamePlayerJoinedMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerJoinedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerJoinedMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerJoinedMessage, isgameadmin_),
  };
  GamePlayerJoinedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerJoinedMessage_descriptor_,
      GamePlayerJoinedMessage::default_instance_,
      GamePlayerJoinedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerJoinedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerJoinedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerJoinedMessage));
  GamePlayerLeftMessage_descriptor_ = file->message_type(28);
  static const int GamePlayerLeftMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerLeftMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerLeftMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerLeftMessage, gameplayerleftreason_),
  };
  GamePlayerLeftMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePlayerLeftMessage_descriptor_,
      GamePlayerLeftMessage::default_instance_,
      GamePlayerLeftMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerLeftMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePlayerLeftMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePlayerLeftMessage));
  GamePlayerLeftMessage_GamePlayerLeftReason_descriptor_ = GamePlayerLeftMessage_descriptor_->enum_type(0);
  GameAdminChangedMessage_descriptor_ = file->message_type(29);
  static const int GameAdminChangedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAdminChangedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAdminChangedMessage, newadminplayerid_),
  };
  GameAdminChangedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAdminChangedMessage_descriptor_,
      GameAdminChangedMessage::default_instance_,
      GameAdminChangedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAdminChangedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAdminChangedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAdminChangedMessage));
  RemovedFromGameMessage_descriptor_ = file->message_type(30);
  static const int RemovedFromGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovedFromGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovedFromGameMessage, removedfromgamereason_),
  };
  RemovedFromGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemovedFromGameMessage_descriptor_,
      RemovedFromGameMessage::default_instance_,
      RemovedFromGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovedFromGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovedFromGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemovedFromGameMessage));
  RemovedFromGameMessage_RemovedFromGameReason_descriptor_ = RemovedFromGameMessage_descriptor_->enum_type(0);
  KickPlayerRequestMessage_descriptor_ = file->message_type(31);
  static const int KickPlayerRequestMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequestMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequestMessage, playerid_),
  };
  KickPlayerRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPlayerRequestMessage_descriptor_,
      KickPlayerRequestMessage::default_instance_,
      KickPlayerRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPlayerRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPlayerRequestMessage));
  LeaveGameRequestMessage_descriptor_ = file->message_type(32);
  static const int LeaveGameRequestMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGameRequestMessage, gameid_),
  };
  LeaveGameRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveGameRequestMessage_descriptor_,
      LeaveGameRequestMessage::default_instance_,
      LeaveGameRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGameRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveGameRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveGameRequestMessage));
  InvitePlayerToGameMessage_descriptor_ = file->message_type(33);
  static const int InvitePlayerToGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerToGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerToGameMessage, playerid_),
  };
  InvitePlayerToGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitePlayerToGameMessage_descriptor_,
      InvitePlayerToGameMessage::default_instance_,
      InvitePlayerToGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerToGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePlayerToGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitePlayerToGameMessage));
  InviteNotifyMessage_descriptor_ = file->message_type(34);
  static const int InviteNotifyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteNotifyMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteNotifyMessage, playeridwho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteNotifyMessage, playeridbywhom_),
  };
  InviteNotifyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteNotifyMessage_descriptor_,
      InviteNotifyMessage::default_instance_,
      InviteNotifyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteNotifyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteNotifyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteNotifyMessage));
  RejectGameInvitationMessage_descriptor_ = file->message_type(35);
  static const int RejectGameInvitationMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectGameInvitationMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectGameInvitationMessage, myrejectreason_),
  };
  RejectGameInvitationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectGameInvitationMessage_descriptor_,
      RejectGameInvitationMessage::default_instance_,
      RejectGameInvitationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectGameInvitationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectGameInvitationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectGameInvitationMessage));
  RejectGameInvitationMessage_RejectGameInvReason_descriptor_ = RejectGameInvitationMessage_descriptor_->enum_type(0);
  RejectInvNotifyMessage_descriptor_ = file->message_type(36);
  static const int RejectInvNotifyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectInvNotifyMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectInvNotifyMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectInvNotifyMessage, playerrejectreason_),
  };
  RejectInvNotifyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectInvNotifyMessage_descriptor_,
      RejectInvNotifyMessage::default_instance_,
      RejectInvNotifyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectInvNotifyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectInvNotifyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectInvNotifyMessage));
  StartEventMessage_descriptor_ = file->message_type(37);
  static const int StartEventMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventMessage, starteventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventMessage, fillwithcomputerplayers_),
  };
  StartEventMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartEventMessage_descriptor_,
      StartEventMessage::default_instance_,
      StartEventMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartEventMessage));
  StartEventMessage_StartEventType_descriptor_ = StartEventMessage_descriptor_->enum_type(0);
  StartEventAckMessage_descriptor_ = file->message_type(38);
  static const int StartEventAckMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventAckMessage, gameid_),
  };
  StartEventAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartEventAckMessage_descriptor_,
      StartEventAckMessage::default_instance_,
      StartEventAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartEventAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartEventAckMessage));
  GameStartInitialMessage_descriptor_ = file->message_type(39);
  static const int GameStartInitialMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartInitialMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartInitialMessage, startdealerplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartInitialMessage, playerseats_),
  };
  GameStartInitialMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartInitialMessage_descriptor_,
      GameStartInitialMessage::default_instance_,
      GameStartInitialMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartInitialMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartInitialMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartInitialMessage));
  GameStartRejoinMessage_descriptor_ = file->message_type(40);
  static const int GameStartRejoinMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, startdealerplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, handnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, rejoinplayerdata_),
  };
  GameStartRejoinMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartRejoinMessage_descriptor_,
      GameStartRejoinMessage::default_instance_,
      GameStartRejoinMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartRejoinMessage));
  GameStartRejoinMessage_RejoinPlayerData_descriptor_ = GameStartRejoinMessage_descriptor_->nested_type(0);
  static const int GameStartRejoinMessage_RejoinPlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, playermoney_),
  };
  GameStartRejoinMessage_RejoinPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartRejoinMessage_RejoinPlayerData_descriptor_,
      GameStartRejoinMessage_RejoinPlayerData::default_instance_,
      GameStartRejoinMessage_RejoinPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartRejoinMessage_RejoinPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartRejoinMessage_RejoinPlayerData));
  HandStartMessage_descriptor_ = file->message_type(41);
  static const int HandStartMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, plaincards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, encryptedcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, smallblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, seatstates_),
  };
  HandStartMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandStartMessage_descriptor_,
      HandStartMessage::default_instance_,
      HandStartMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandStartMessage));
  HandStartMessage_PlainCards_descriptor_ = HandStartMessage_descriptor_->nested_type(0);
  static const int HandStartMessage_PlainCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage_PlainCards, plaincard1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage_PlainCards, plaincard2_),
  };
  HandStartMessage_PlainCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandStartMessage_PlainCards_descriptor_,
      HandStartMessage_PlainCards::default_instance_,
      HandStartMessage_PlainCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage_PlainCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStartMessage_PlainCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandStartMessage_PlainCards));
  PlayersTurnMessage_descriptor_ = file->message_type(42);
  static const int PlayersTurnMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersTurnMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersTurnMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersTurnMessage, gamestate_),
  };
  PlayersTurnMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayersTurnMessage_descriptor_,
      PlayersTurnMessage::default_instance_,
      PlayersTurnMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersTurnMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersTurnMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayersTurnMessage));
  MyActionRequestMessage_descriptor_ = file->message_type(43);
  static const int MyActionRequestMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, handnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, myaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, myrelativebet_),
  };
  MyActionRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyActionRequestMessage_descriptor_,
      MyActionRequestMessage::default_instance_,
      MyActionRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyActionRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyActionRequestMessage));
  YourActionRejectedMessage_descriptor_ = file->message_type(44);
  static const int YourActionRejectedMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, youraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, yourrelativebet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, rejectionreason_),
  };
  YourActionRejectedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YourActionRejectedMessage_descriptor_,
      YourActionRejectedMessage::default_instance_,
      YourActionRejectedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YourActionRejectedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YourActionRejectedMessage));
  YourActionRejectedMessage_RejectionReason_descriptor_ = YourActionRejectedMessage_descriptor_->enum_type(0);
  PlayersActionDoneMessage_descriptor_ = file->message_type(45);
  static const int PlayersActionDoneMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, gamestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, playeraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, totalplayerbet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, playermoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, highestset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, minimumraise_),
  };
  PlayersActionDoneMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayersActionDoneMessage_descriptor_,
      PlayersActionDoneMessage::default_instance_,
      PlayersActionDoneMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayersActionDoneMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayersActionDoneMessage));
  DealFlopCardsMessage_descriptor_ = file->message_type(46);
  static const int DealFlopCardsMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, flopcard1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, flopcard2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, flopcard3_),
  };
  DealFlopCardsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealFlopCardsMessage_descriptor_,
      DealFlopCardsMessage::default_instance_,
      DealFlopCardsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealFlopCardsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealFlopCardsMessage));
  DealTurnCardMessage_descriptor_ = file->message_type(47);
  static const int DealTurnCardMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealTurnCardMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealTurnCardMessage, turncard_),
  };
  DealTurnCardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealTurnCardMessage_descriptor_,
      DealTurnCardMessage::default_instance_,
      DealTurnCardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealTurnCardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealTurnCardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealTurnCardMessage));
  DealRiverCardMessage_descriptor_ = file->message_type(48);
  static const int DealRiverCardMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealRiverCardMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealRiverCardMessage, rivercard_),
  };
  DealRiverCardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DealRiverCardMessage_descriptor_,
      DealRiverCardMessage::default_instance_,
      DealRiverCardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealRiverCardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DealRiverCardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DealRiverCardMessage));
  AllInShowCardsMessage_descriptor_ = file->message_type(49);
  static const int AllInShowCardsMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage, playersallin_),
  };
  AllInShowCardsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllInShowCardsMessage_descriptor_,
      AllInShowCardsMessage::default_instance_,
      AllInShowCardsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllInShowCardsMessage));
  AllInShowCardsMessage_PlayerAllIn_descriptor_ = AllInShowCardsMessage_descriptor_->nested_type(0);
  static const int AllInShowCardsMessage_PlayerAllIn_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, allincard1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, allincard2_),
  };
  AllInShowCardsMessage_PlayerAllIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllInShowCardsMessage_PlayerAllIn_descriptor_,
      AllInShowCardsMessage_PlayerAllIn::default_instance_,
      AllInShowCardsMessage_PlayerAllIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInShowCardsMessage_PlayerAllIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllInShowCardsMessage_PlayerAllIn));
  EndOfHandShowCardsMessage_descriptor_ = file->message_type(50);
  static const int EndOfHandShowCardsMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandShowCardsMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandShowCardsMessage, playerresults_),
  };
  EndOfHandShowCardsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndOfHandShowCardsMessage_descriptor_,
      EndOfHandShowCardsMessage::default_instance_,
      EndOfHandShowCardsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandShowCardsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandShowCardsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndOfHandShowCardsMessage));
  EndOfHandHideCardsMessage_descriptor_ = file->message_type(51);
  static const int EndOfHandHideCardsMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, moneywon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, playermoney_),
  };
  EndOfHandHideCardsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndOfHandHideCardsMessage_descriptor_,
      EndOfHandHideCardsMessage::default_instance_,
      EndOfHandHideCardsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfHandHideCardsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndOfHandHideCardsMessage));
  ShowMyCardsRequestMessage_descriptor_ = file->message_type(52);
  static const int ShowMyCardsRequestMessage_offsets_[1] = {
  };
  ShowMyCardsRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowMyCardsRequestMessage_descriptor_,
      ShowMyCardsRequestMessage::default_instance_,
      ShowMyCardsRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowMyCardsRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowMyCardsRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowMyCardsRequestMessage));
  AfterHandShowCardsMessage_descriptor_ = file->message_type(53);
  static const int AfterHandShowCardsMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfterHandShowCardsMessage, playerresult_),
  };
  AfterHandShowCardsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AfterHandShowCardsMessage_descriptor_,
      AfterHandShowCardsMessage::default_instance_,
      AfterHandShowCardsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfterHandShowCardsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AfterHandShowCardsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AfterHandShowCardsMessage));
  EndOfGameMessage_descriptor_ = file->message_type(54);
  static const int EndOfGameMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfGameMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfGameMessage, winnerplayerid_),
  };
  EndOfGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndOfGameMessage_descriptor_,
      EndOfGameMessage::default_instance_,
      EndOfGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOfGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndOfGameMessage));
  PlayerIdChangedMessage_descriptor_ = file->message_type(55);
  static const int PlayerIdChangedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIdChangedMessage, oldplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIdChangedMessage, newplayerid_),
  };
  PlayerIdChangedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerIdChangedMessage_descriptor_,
      PlayerIdChangedMessage::default_instance_,
      PlayerIdChangedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIdChangedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIdChangedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerIdChangedMessage));
  AskKickPlayerMessage_descriptor_ = file->message_type(56);
  static const int AskKickPlayerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickPlayerMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickPlayerMessage, playerid_),
  };
  AskKickPlayerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskKickPlayerMessage_descriptor_,
      AskKickPlayerMessage::default_instance_,
      AskKickPlayerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickPlayerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickPlayerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskKickPlayerMessage));
  AskKickDeniedMessage_descriptor_ = file->message_type(57);
  static const int AskKickDeniedMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickDeniedMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickDeniedMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickDeniedMessage, kickdeniedreason_),
  };
  AskKickDeniedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskKickDeniedMessage_descriptor_,
      AskKickDeniedMessage::default_instance_,
      AskKickDeniedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickDeniedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskKickDeniedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskKickDeniedMessage));
  AskKickDeniedMessage_KickDeniedReason_descriptor_ = AskKickDeniedMessage_descriptor_->enum_type(0);
  StartKickPetitionMessage_descriptor_ = file->message_type(58);
  static const int StartKickPetitionMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, petitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, proposingplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, kickplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, kicktimeoutsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, numvotesneededtokick_),
  };
  StartKickPetitionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartKickPetitionMessage_descriptor_,
      StartKickPetitionMessage::default_instance_,
      StartKickPetitionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartKickPetitionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartKickPetitionMessage));
  VoteKickRequestMessage_descriptor_ = file->message_type(59);
  static const int VoteKickRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickRequestMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickRequestMessage, petitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickRequestMessage, votekick_),
  };
  VoteKickRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteKickRequestMessage_descriptor_,
      VoteKickRequestMessage::default_instance_,
      VoteKickRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteKickRequestMessage));
  VoteKickReplyMessage_descriptor_ = file->message_type(60);
  static const int VoteKickReplyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickReplyMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickReplyMessage, petitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickReplyMessage, votekickreplytype_),
  };
  VoteKickReplyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VoteKickReplyMessage_descriptor_,
      VoteKickReplyMessage::default_instance_,
      VoteKickReplyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickReplyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteKickReplyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VoteKickReplyMessage));
  VoteKickReplyMessage_VoteKickReplyType_descriptor_ = VoteKickReplyMessage_descriptor_->enum_type(0);
  KickPetitionUpdateMessage_descriptor_ = file->message_type(61);
  static const int KickPetitionUpdateMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, petitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, numvotesagainstkicking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, numvotesinfavourofkicking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, numvotesneededtokick_),
  };
  KickPetitionUpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickPetitionUpdateMessage_descriptor_,
      KickPetitionUpdateMessage::default_instance_,
      KickPetitionUpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickPetitionUpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickPetitionUpdateMessage));
  EndKickPetitionMessage_descriptor_ = file->message_type(62);
  static const int EndKickPetitionMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, petitionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, numvotesagainstkicking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, numvotesinfavourofkicking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, resultplayerkicked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, petitionendreason_),
  };
  EndKickPetitionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndKickPetitionMessage_descriptor_,
      EndKickPetitionMessage::default_instance_,
      EndKickPetitionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndKickPetitionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndKickPetitionMessage));
  EndKickPetitionMessage_PetitionEndReason_descriptor_ = EndKickPetitionMessage_descriptor_->enum_type(0);
  StatisticsMessage_descriptor_ = file->message_type(63);
  static const int StatisticsMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage, statisticsdata_),
  };
  StatisticsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticsMessage_descriptor_,
      StatisticsMessage::default_instance_,
      StatisticsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticsMessage));
  StatisticsMessage_StatisticsData_descriptor_ = StatisticsMessage_descriptor_->nested_type(0);
  static const int StatisticsMessage_StatisticsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage_StatisticsData, statisticstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage_StatisticsData, statisticsvalue_),
  };
  StatisticsMessage_StatisticsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticsMessage_StatisticsData_descriptor_,
      StatisticsMessage_StatisticsData::default_instance_,
      StatisticsMessage_StatisticsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage_StatisticsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsMessage_StatisticsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticsMessage_StatisticsData));
  StatisticsMessage_StatisticsData_StatisticsType_descriptor_ = StatisticsMessage_StatisticsData_descriptor_->enum_type(0);
  ChatRequestMessage_descriptor_ = file->message_type(64);
  static const int ChatRequestMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRequestMessage, targetgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRequestMessage, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRequestMessage, chattext_),
  };
  ChatRequestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRequestMessage_descriptor_,
      ChatRequestMessage::default_instance_,
      ChatRequestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRequestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRequestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRequestMessage));
  ChatMessage_descriptor_ = file->message_type(65);
  static const int ChatMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chattext_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  ChatMessage_ChatType_descriptor_ = ChatMessage_descriptor_->enum_type(0);
  ChatRejectMessage_descriptor_ = file->message_type(66);
  static const int ChatRejectMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRejectMessage, chattext_),
  };
  ChatRejectMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRejectMessage_descriptor_,
      ChatRejectMessage::default_instance_,
      ChatRejectMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRejectMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRejectMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRejectMessage));
  DialogMessage_descriptor_ = file->message_type(67);
  static const int DialogMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogMessage, notificationtext_),
  };
  DialogMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DialogMessage_descriptor_,
      DialogMessage::default_instance_,
      DialogMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DialogMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DialogMessage));
  TimeoutWarningMessage_descriptor_ = file->message_type(68);
  static const int TimeoutWarningMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutWarningMessage, timeoutreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutWarningMessage, remainingseconds_),
  };
  TimeoutWarningMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeoutWarningMessage_descriptor_,
      TimeoutWarningMessage::default_instance_,
      TimeoutWarningMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutWarningMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeoutWarningMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeoutWarningMessage));
  TimeoutWarningMessage_TimeoutReason_descriptor_ = TimeoutWarningMessage_descriptor_->enum_type(0);
  ResetTimeoutMessage_descriptor_ = file->message_type(69);
  static const int ResetTimeoutMessage_offsets_[1] = {
  };
  ResetTimeoutMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetTimeoutMessage_descriptor_,
      ResetTimeoutMessage::default_instance_,
      ResetTimeoutMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTimeoutMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTimeoutMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetTimeoutMessage));
  ReportAvatarMessage_descriptor_ = file->message_type(70);
  static const int ReportAvatarMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarMessage, reportedplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarMessage, reportedavatarhash_),
  };
  ReportAvatarMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAvatarMessage_descriptor_,
      ReportAvatarMessage::default_instance_,
      ReportAvatarMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAvatarMessage));
  ReportAvatarAckMessage_descriptor_ = file->message_type(71);
  static const int ReportAvatarAckMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarAckMessage, reportedplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarAckMessage, reportavatarresult_),
  };
  ReportAvatarAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAvatarAckMessage_descriptor_,
      ReportAvatarAckMessage::default_instance_,
      ReportAvatarAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvatarAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAvatarAckMessage));
  ReportAvatarAckMessage_ReportAvatarResult_descriptor_ = ReportAvatarAckMessage_descriptor_->enum_type(0);
  ReportGameMessage_descriptor_ = file->message_type(72);
  static const int ReportGameMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameMessage, reportedgameid_),
  };
  ReportGameMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGameMessage_descriptor_,
      ReportGameMessage::default_instance_,
      ReportGameMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGameMessage));
  ReportGameAckMessage_descriptor_ = file->message_type(73);
  static const int ReportGameAckMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameAckMessage, reportedgameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameAckMessage, reportgameresult_),
  };
  ReportGameAckMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportGameAckMessage_descriptor_,
      ReportGameAckMessage::default_instance_,
      ReportGameAckMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameAckMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportGameAckMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportGameAckMessage));
  ReportGameAckMessage_ReportGameResult_descriptor_ = ReportGameAckMessage_descriptor_->enum_type(0);
  ErrorMessage_descriptor_ = file->message_type(74);
  static const int ErrorMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, errorreason_),
  };
  ErrorMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorMessage_descriptor_,
      ErrorMessage::default_instance_,
      ErrorMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorMessage));
  ErrorMessage_ErrorReason_descriptor_ = ErrorMessage_descriptor_->enum_type(0);
  PokerTHMessage_descriptor_ = file->message_type(75);
  static const int PokerTHMessage_offsets_[74] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, announcemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, initmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, authserverchallengemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, authclientresponsemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, authserververificationmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, initackmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, avatarrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, avatarheadermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, avatardatamessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, avatarendmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, unknownavatarmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playerlistmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamelistnewmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamelistupdatemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamelistplayerjoinedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamelistplayerleftmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamelistadminchangedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playerinforequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playerinforeplymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, subscriptionrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, joinexistinggamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, joinnewgamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, rejoinexistinggamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, joingameackmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, joingamefailedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gameplayerjoinedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gameplayerleftmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gameadminchangedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, removedfromgamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, kickplayerrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, leavegamerequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, inviteplayertogamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, invitenotifymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, rejectgameinvitationmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, rejectinvnotifymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, starteventmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, starteventackmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamestartinitialmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, gamestartrejoinmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, handstartmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playersturnmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, myactionrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, youractionrejectedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playersactiondonemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, dealflopcardsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, dealturncardmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, dealrivercardmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, allinshowcardsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, endofhandshowcardsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, endofhandhidecardsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, showmycardsrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, afterhandshowcardsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, endofgamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, playeridchangedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, askkickplayermessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, askkickdeniedmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, startkickpetitionmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, votekickrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, votekickreplymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, kickpetitionupdatemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, endkickpetitionmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, statisticsmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, chatrequestmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, chatmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, chatrejectmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, dialogmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, timeoutwarningmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, resettimeoutmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, reportavatarmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, reportavatarackmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, reportgamemessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, reportgameackmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, errormessage_),
  };
  PokerTHMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PokerTHMessage_descriptor_,
      PokerTHMessage::default_instance_,
      PokerTHMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PokerTHMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PokerTHMessage));
  PokerTHMessage_PokerTHMessageType_descriptor_ = PokerTHMessage_descriptor_->enum_type(0);
  NetGameMode_descriptor_ = file->enum_type(0);
  NetGameState_descriptor_ = file->enum_type(1);
  NetPlayerAction_descriptor_ = file->enum_type(2);
  NetPlayerState_descriptor_ = file->enum_type(3);
  PlayerInfoRights_descriptor_ = file->enum_type(4);
  NetAvatarType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pokerth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetGameInfo_descriptor_, &NetGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerResult_descriptor_, &PlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnounceMessage_descriptor_, &AnnounceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnnounceMessage_Version_descriptor_, &AnnounceMessage_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitMessage_descriptor_, &InitMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthServerChallengeMessage_descriptor_, &AuthServerChallengeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthClientResponseMessage_descriptor_, &AuthClientResponseMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthServerVerificationMessage_descriptor_, &AuthServerVerificationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitAckMessage_descriptor_, &InitAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarRequestMessage_descriptor_, &AvatarRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarHeaderMessage_descriptor_, &AvatarHeaderMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarDataMessage_descriptor_, &AvatarDataMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AvatarEndMessage_descriptor_, &AvatarEndMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnknownAvatarMessage_descriptor_, &UnknownAvatarMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerListMessage_descriptor_, &PlayerListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameListNewMessage_descriptor_, &GameListNewMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameListUpdateMessage_descriptor_, &GameListUpdateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameListPlayerJoinedMessage_descriptor_, &GameListPlayerJoinedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameListPlayerLeftMessage_descriptor_, &GameListPlayerLeftMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameListAdminChangedMessage_descriptor_, &GameListAdminChangedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoRequestMessage_descriptor_, &PlayerInfoRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoReplyMessage_descriptor_, &PlayerInfoReplyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoReplyMessage_PlayerInfoData_descriptor_, &PlayerInfoReplyMessage_PlayerInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_, &PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionRequestMessage_descriptor_, &SubscriptionRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinExistingGameMessage_descriptor_, &JoinExistingGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinNewGameMessage_descriptor_, &JoinNewGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejoinExistingGameMessage_descriptor_, &RejoinExistingGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGameAckMessage_descriptor_, &JoinGameAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinGameFailedMessage_descriptor_, &JoinGameFailedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerJoinedMessage_descriptor_, &GamePlayerJoinedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePlayerLeftMessage_descriptor_, &GamePlayerLeftMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAdminChangedMessage_descriptor_, &GameAdminChangedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemovedFromGameMessage_descriptor_, &RemovedFromGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPlayerRequestMessage_descriptor_, &KickPlayerRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveGameRequestMessage_descriptor_, &LeaveGameRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitePlayerToGameMessage_descriptor_, &InvitePlayerToGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteNotifyMessage_descriptor_, &InviteNotifyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectGameInvitationMessage_descriptor_, &RejectGameInvitationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectInvNotifyMessage_descriptor_, &RejectInvNotifyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartEventMessage_descriptor_, &StartEventMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartEventAckMessage_descriptor_, &StartEventAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartInitialMessage_descriptor_, &GameStartInitialMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartRejoinMessage_descriptor_, &GameStartRejoinMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartRejoinMessage_RejoinPlayerData_descriptor_, &GameStartRejoinMessage_RejoinPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandStartMessage_descriptor_, &HandStartMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandStartMessage_PlainCards_descriptor_, &HandStartMessage_PlainCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayersTurnMessage_descriptor_, &PlayersTurnMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyActionRequestMessage_descriptor_, &MyActionRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YourActionRejectedMessage_descriptor_, &YourActionRejectedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayersActionDoneMessage_descriptor_, &PlayersActionDoneMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealFlopCardsMessage_descriptor_, &DealFlopCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealTurnCardMessage_descriptor_, &DealTurnCardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DealRiverCardMessage_descriptor_, &DealRiverCardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllInShowCardsMessage_descriptor_, &AllInShowCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllInShowCardsMessage_PlayerAllIn_descriptor_, &AllInShowCardsMessage_PlayerAllIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndOfHandShowCardsMessage_descriptor_, &EndOfHandShowCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndOfHandHideCardsMessage_descriptor_, &EndOfHandHideCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowMyCardsRequestMessage_descriptor_, &ShowMyCardsRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AfterHandShowCardsMessage_descriptor_, &AfterHandShowCardsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndOfGameMessage_descriptor_, &EndOfGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerIdChangedMessage_descriptor_, &PlayerIdChangedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskKickPlayerMessage_descriptor_, &AskKickPlayerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskKickDeniedMessage_descriptor_, &AskKickDeniedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartKickPetitionMessage_descriptor_, &StartKickPetitionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteKickRequestMessage_descriptor_, &VoteKickRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VoteKickReplyMessage_descriptor_, &VoteKickReplyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickPetitionUpdateMessage_descriptor_, &KickPetitionUpdateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndKickPetitionMessage_descriptor_, &EndKickPetitionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticsMessage_descriptor_, &StatisticsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticsMessage_StatisticsData_descriptor_, &StatisticsMessage_StatisticsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRequestMessage_descriptor_, &ChatRequestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRejectMessage_descriptor_, &ChatRejectMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DialogMessage_descriptor_, &DialogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeoutWarningMessage_descriptor_, &TimeoutWarningMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetTimeoutMessage_descriptor_, &ResetTimeoutMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAvatarMessage_descriptor_, &ReportAvatarMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAvatarAckMessage_descriptor_, &ReportAvatarAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGameMessage_descriptor_, &ReportGameMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportGameAckMessage_descriptor_, &ReportGameAckMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorMessage_descriptor_, &ErrorMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PokerTHMessage_descriptor_, &PokerTHMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pokerth_2eproto() {
  delete NetGameInfo::default_instance_;
  delete NetGameInfo_reflection_;
  delete PlayerResult::default_instance_;
  delete PlayerResult_reflection_;
  delete AnnounceMessage::default_instance_;
  delete AnnounceMessage_reflection_;
  delete AnnounceMessage_Version::default_instance_;
  delete AnnounceMessage_Version_reflection_;
  delete InitMessage::default_instance_;
  delete InitMessage_reflection_;
  delete AuthServerChallengeMessage::default_instance_;
  delete AuthServerChallengeMessage_reflection_;
  delete AuthClientResponseMessage::default_instance_;
  delete AuthClientResponseMessage_reflection_;
  delete AuthServerVerificationMessage::default_instance_;
  delete AuthServerVerificationMessage_reflection_;
  delete InitAckMessage::default_instance_;
  delete InitAckMessage_reflection_;
  delete AvatarRequestMessage::default_instance_;
  delete AvatarRequestMessage_reflection_;
  delete AvatarHeaderMessage::default_instance_;
  delete AvatarHeaderMessage_reflection_;
  delete AvatarDataMessage::default_instance_;
  delete AvatarDataMessage_reflection_;
  delete AvatarEndMessage::default_instance_;
  delete AvatarEndMessage_reflection_;
  delete UnknownAvatarMessage::default_instance_;
  delete UnknownAvatarMessage_reflection_;
  delete PlayerListMessage::default_instance_;
  delete PlayerListMessage_reflection_;
  delete GameListNewMessage::default_instance_;
  delete GameListNewMessage_reflection_;
  delete GameListUpdateMessage::default_instance_;
  delete GameListUpdateMessage_reflection_;
  delete GameListPlayerJoinedMessage::default_instance_;
  delete GameListPlayerJoinedMessage_reflection_;
  delete GameListPlayerLeftMessage::default_instance_;
  delete GameListPlayerLeftMessage_reflection_;
  delete GameListAdminChangedMessage::default_instance_;
  delete GameListAdminChangedMessage_reflection_;
  delete PlayerInfoRequestMessage::default_instance_;
  delete PlayerInfoRequestMessage_reflection_;
  delete PlayerInfoReplyMessage::default_instance_;
  delete PlayerInfoReplyMessage_reflection_;
  delete PlayerInfoReplyMessage_PlayerInfoData::default_instance_;
  delete PlayerInfoReplyMessage_PlayerInfoData_reflection_;
  delete PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_;
  delete PlayerInfoReplyMessage_PlayerInfoData_AvatarData_reflection_;
  delete SubscriptionRequestMessage::default_instance_;
  delete SubscriptionRequestMessage_reflection_;
  delete JoinExistingGameMessage::default_instance_;
  delete JoinExistingGameMessage_reflection_;
  delete JoinNewGameMessage::default_instance_;
  delete JoinNewGameMessage_reflection_;
  delete RejoinExistingGameMessage::default_instance_;
  delete RejoinExistingGameMessage_reflection_;
  delete JoinGameAckMessage::default_instance_;
  delete JoinGameAckMessage_reflection_;
  delete JoinGameFailedMessage::default_instance_;
  delete JoinGameFailedMessage_reflection_;
  delete GamePlayerJoinedMessage::default_instance_;
  delete GamePlayerJoinedMessage_reflection_;
  delete GamePlayerLeftMessage::default_instance_;
  delete GamePlayerLeftMessage_reflection_;
  delete GameAdminChangedMessage::default_instance_;
  delete GameAdminChangedMessage_reflection_;
  delete RemovedFromGameMessage::default_instance_;
  delete RemovedFromGameMessage_reflection_;
  delete KickPlayerRequestMessage::default_instance_;
  delete KickPlayerRequestMessage_reflection_;
  delete LeaveGameRequestMessage::default_instance_;
  delete LeaveGameRequestMessage_reflection_;
  delete InvitePlayerToGameMessage::default_instance_;
  delete InvitePlayerToGameMessage_reflection_;
  delete InviteNotifyMessage::default_instance_;
  delete InviteNotifyMessage_reflection_;
  delete RejectGameInvitationMessage::default_instance_;
  delete RejectGameInvitationMessage_reflection_;
  delete RejectInvNotifyMessage::default_instance_;
  delete RejectInvNotifyMessage_reflection_;
  delete StartEventMessage::default_instance_;
  delete StartEventMessage_reflection_;
  delete StartEventAckMessage::default_instance_;
  delete StartEventAckMessage_reflection_;
  delete GameStartInitialMessage::default_instance_;
  delete GameStartInitialMessage_reflection_;
  delete GameStartRejoinMessage::default_instance_;
  delete GameStartRejoinMessage_reflection_;
  delete GameStartRejoinMessage_RejoinPlayerData::default_instance_;
  delete GameStartRejoinMessage_RejoinPlayerData_reflection_;
  delete HandStartMessage::default_instance_;
  delete HandStartMessage_reflection_;
  delete HandStartMessage_PlainCards::default_instance_;
  delete HandStartMessage_PlainCards_reflection_;
  delete PlayersTurnMessage::default_instance_;
  delete PlayersTurnMessage_reflection_;
  delete MyActionRequestMessage::default_instance_;
  delete MyActionRequestMessage_reflection_;
  delete YourActionRejectedMessage::default_instance_;
  delete YourActionRejectedMessage_reflection_;
  delete PlayersActionDoneMessage::default_instance_;
  delete PlayersActionDoneMessage_reflection_;
  delete DealFlopCardsMessage::default_instance_;
  delete DealFlopCardsMessage_reflection_;
  delete DealTurnCardMessage::default_instance_;
  delete DealTurnCardMessage_reflection_;
  delete DealRiverCardMessage::default_instance_;
  delete DealRiverCardMessage_reflection_;
  delete AllInShowCardsMessage::default_instance_;
  delete AllInShowCardsMessage_reflection_;
  delete AllInShowCardsMessage_PlayerAllIn::default_instance_;
  delete AllInShowCardsMessage_PlayerAllIn_reflection_;
  delete EndOfHandShowCardsMessage::default_instance_;
  delete EndOfHandShowCardsMessage_reflection_;
  delete EndOfHandHideCardsMessage::default_instance_;
  delete EndOfHandHideCardsMessage_reflection_;
  delete ShowMyCardsRequestMessage::default_instance_;
  delete ShowMyCardsRequestMessage_reflection_;
  delete AfterHandShowCardsMessage::default_instance_;
  delete AfterHandShowCardsMessage_reflection_;
  delete EndOfGameMessage::default_instance_;
  delete EndOfGameMessage_reflection_;
  delete PlayerIdChangedMessage::default_instance_;
  delete PlayerIdChangedMessage_reflection_;
  delete AskKickPlayerMessage::default_instance_;
  delete AskKickPlayerMessage_reflection_;
  delete AskKickDeniedMessage::default_instance_;
  delete AskKickDeniedMessage_reflection_;
  delete StartKickPetitionMessage::default_instance_;
  delete StartKickPetitionMessage_reflection_;
  delete VoteKickRequestMessage::default_instance_;
  delete VoteKickRequestMessage_reflection_;
  delete VoteKickReplyMessage::default_instance_;
  delete VoteKickReplyMessage_reflection_;
  delete KickPetitionUpdateMessage::default_instance_;
  delete KickPetitionUpdateMessage_reflection_;
  delete EndKickPetitionMessage::default_instance_;
  delete EndKickPetitionMessage_reflection_;
  delete StatisticsMessage::default_instance_;
  delete StatisticsMessage_reflection_;
  delete StatisticsMessage_StatisticsData::default_instance_;
  delete StatisticsMessage_StatisticsData_reflection_;
  delete ChatRequestMessage::default_instance_;
  delete ChatRequestMessage_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete ChatRejectMessage::default_instance_;
  delete ChatRejectMessage_reflection_;
  delete DialogMessage::default_instance_;
  delete DialogMessage_reflection_;
  delete TimeoutWarningMessage::default_instance_;
  delete TimeoutWarningMessage_reflection_;
  delete ResetTimeoutMessage::default_instance_;
  delete ResetTimeoutMessage_reflection_;
  delete ReportAvatarMessage::default_instance_;
  delete ReportAvatarMessage_reflection_;
  delete ReportAvatarAckMessage::default_instance_;
  delete ReportAvatarAckMessage_reflection_;
  delete ReportGameMessage::default_instance_;
  delete ReportGameMessage_reflection_;
  delete ReportGameAckMessage::default_instance_;
  delete ReportGameAckMessage_reflection_;
  delete ErrorMessage::default_instance_;
  delete ErrorMessage_reflection_;
  delete PokerTHMessage::default_instance_;
  delete PokerTHMessage_reflection_;
}

void protobuf_AddDesc_pokerth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpokerth.proto\"\242\005\n\013NetGameInfo\022\020\n\010gameN"
    "ame\030\001 \002(\t\022-\n\013netGameType\030\002 \002(\0162\030.NetGame"
    "Info.NetGameType\022\025\n\rmaxNumPlayers\030\003 \002(\r\022"
    "9\n\021raiseIntervalMode\030\004 \002(\0162\036.NetGameInfo"
    ".RaiseIntervalMode\022\027\n\017raiseEveryHands\030\005 "
    "\001(\r\022\031\n\021raiseEveryMinutes\030\006 \001(\r\022/\n\014endRai"
    "seMode\030\007 \002(\0162\031.NetGameInfo.EndRaiseMode\022"
    "\037\n\027endRaiseSmallBlindValue\030\010 \001(\r\022\030\n\020prop"
    "osedGuiSpeed\030\t \002(\r\022\031\n\021delayBetweenHands\030"
    "\n \002(\r\022\033\n\023playerActionTimeout\030\013 \002(\r\022\027\n\017fi"
    "rstSmallBlind\030\014 \002(\r\022\022\n\nstartMoney\030\r \002(\r\022"
    "\030\n\014manualBlinds\030\016 \003(\rB\002\020\001\"Z\n\013NetGameType"
    "\022\016\n\nnormalGame\020\001\022\026\n\022registeredOnlyGame\020\002"
    "\022\022\n\016inviteOnlyGame\020\003\022\017\n\013rankingGame\020\004\";\n"
    "\021RaiseIntervalMode\022\022\n\016raiseOnHandNum\020\001\022\022"
    "\n\016raiseOnMinutes\020\002\"H\n\014EndRaiseMode\022\020\n\014do"
    "ubleBlinds\020\001\022\023\n\017raiseByEndValue\020\002\022\021\n\rkee"
    "pLastBlind\020\003\"\243\001\n\014PlayerResult\022\020\n\010playerI"
    "d\030\001 \002(\r\022\023\n\013resultCard1\030\002 \002(\r\022\023\n\013resultCa"
    "rd2\030\003 \002(\r\022\034\n\020bestHandPosition\030\004 \003(\rB\002\020\001\022"
    "\020\n\010moneyWon\030\005 \002(\r\022\023\n\013playerMoney\030\006 \002(\r\022\022"
    "\n\ncardsValue\030\007 \001(\r\"\346\002\n\017AnnounceMessage\0221"
    "\n\017protocolVersion\030\001 \002(\0132\030.AnnounceMessag"
    "e.Version\0223\n\021latestGameVersion\030\002 \002(\0132\030.A"
    "nnounceMessage.Version\022\032\n\022latestBetaRevi"
    "sion\030\003 \002(\r\022/\n\nserverType\030\004 \002(\0162\033.Announc"
    "eMessage.ServerType\022\032\n\022numPlayersOnServe"
    "r\030\005 \002(\r\032\'\n\007Version\022\r\n\005major\030\001 \002(\r\022\r\n\005min"
    "or\030\002 \002(\r\"Y\n\nServerType\022\021\n\rserverTypeLAN\020"
    "\000\022\034\n\030serverTypeInternetNoAuth\020\001\022\032\n\026serve"
    "rTypeInternetAuth\020\002\"\273\002\n\013InitMessage\0222\n\020r"
    "equestedVersion\030\001 \002(\0132\030.AnnounceMessage."
    "Version\022\017\n\007buildId\030\002 \002(\r\022\027\n\017myLastSessio"
    "nId\030\003 \001(\014\022\032\n\022authServerPassword\030\004 \001(\t\022%\n"
    "\005login\030\005 \002(\0162\026.InitMessage.LoginType\022\020\n\010"
    "nickName\030\006 \001(\t\022\026\n\016clientUserData\030\007 \001(\014\022\022"
    "\n\navatarHash\030\010 \001(\014\"M\n\tLoginType\022\016\n\nguest"
    "Login\020\000\022\026\n\022authenticatedLogin\020\001\022\030\n\024unaut"
    "henticatedLogin\020\002\"5\n\032AuthServerChallenge"
    "Message\022\027\n\017serverChallenge\030\001 \002(\014\"3\n\031Auth"
    "ClientResponseMessage\022\026\n\016clientResponse\030"
    "\001 \002(\014\";\n\035AuthServerVerificationMessage\022\032"
    "\n\022serverVerification\030\001 \002(\014\"k\n\016InitAckMes"
    "sage\022\025\n\ryourSessionId\030\001 \002(\014\022\024\n\014yourPlaye"
    "rId\030\002 \002(\r\022\026\n\016yourAvatarHash\030\003 \001(\014\022\024\n\014rej"
    "oinGameId\030\004 \001(\r\"=\n\024AvatarRequestMessage\022"
    "\021\n\trequestId\030\001 \002(\r\022\022\n\navatarHash\030\002 \002(\014\"`"
    "\n\023AvatarHeaderMessage\022\021\n\trequestId\030\001 \002(\r"
    "\022\"\n\navatarType\030\002 \002(\0162\016.NetAvatarType\022\022\n\n"
    "avatarSize\030\003 \002(\r\";\n\021AvatarDataMessage\022\021\n"
    "\trequestId\030\001 \002(\r\022\023\n\013avatarBlock\030\002 \002(\014\"%\n"
    "\020AvatarEndMessage\022\021\n\trequestId\030\001 \002(\r\")\n\024"
    "UnknownAvatarMessage\022\021\n\trequestId\030\001 \002(\r\""
    "\261\001\n\021PlayerListMessage\022\020\n\010playerId\030\001 \002(\r\022"
    "I\n\026playerListNotification\030\002 \002(\0162).Player"
    "ListMessage.PlayerListNotification\"\?\n\026Pl"
    "ayerListNotification\022\021\n\rplayerListNew\020\000\022"
    "\022\n\016playerListLeft\020\001\"\245\001\n\022GameListNewMessa"
    "ge\022\016\n\006gameId\030\001 \002(\r\022\036\n\010gameMode\030\002 \002(\0162\014.N"
    "etGameMode\022\021\n\tisPrivate\030\003 \002(\010\022\025\n\tplayerI"
    "ds\030\004 \003(\rB\002\020\001\022\025\n\radminPlayerId\030\005 \002(\r\022\036\n\010g"
    "ameInfo\030\006 \002(\0132\014.NetGameInfo\"G\n\025GameListU"
    "pdateMessage\022\016\n\006gameId\030\001 \002(\r\022\036\n\010gameMode"
    "\030\002 \002(\0162\014.NetGameMode\"\?\n\033GameListPlayerJo"
    "inedMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030"
    "\002 \002(\r\"=\n\031GameListPlayerLeftMessage\022\016\n\006ga"
    "meId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\"G\n\033GameList"
    "AdminChangedMessage\022\016\n\006gameId\030\001 \002(\r\022\030\n\020n"
    "ewAdminPlayerId\030\002 \002(\r\",\n\030PlayerInfoReque"
    "stMessage\022\020\n\010playerId\030\001 \002(\r\"\355\002\n\026PlayerIn"
    "foReplyMessage\022\020\n\010playerId\030\001 \002(\r\022>\n\016play"
    "erInfoData\030\002 \001(\0132&.PlayerInfoReplyMessag"
    "e.PlayerInfoData\032\200\002\n\016PlayerInfoData\022\022\n\np"
    "layerName\030\001 \002(\t\022\017\n\007isHuman\030\002 \002(\010\022\'\n\014play"
    "erRights\030\003 \002(\0162\021.PlayerInfoRights\022\023\n\013cou"
    "ntryCode\030\004 \001(\t\022E\n\navatarData\030\005 \001(\01321.Pla"
    "yerInfoReplyMessage.PlayerInfoData.Avata"
    "rData\032D\n\nAvatarData\022\"\n\navatarType\030\001 \002(\0162"
    "\016.NetAvatarType\022\022\n\navatarHash\030\002 \002(\014\"\260\001\n\032"
    "SubscriptionRequestMessage\022J\n\022subscripti"
    "onAction\030\001 \002(\0162..SubscriptionRequestMess"
    "age.SubscriptionAction\"F\n\022SubscriptionAc"
    "tion\022\027\n\023unsubscribeGameList\020\001\022\027\n\023resubsc"
    "ribeGameList\020\002\"N\n\027JoinExistingGameMessag"
    "e\022\016\n\006gameId\030\001 \002(\r\022\020\n\010password\030\002 \001(\t\022\021\n\ta"
    "utoLeave\030\003 \001(\010\"Y\n\022JoinNewGameMessage\022\036\n\010"
    "gameInfo\030\001 \002(\0132\014.NetGameInfo\022\020\n\010password"
    "\030\002 \001(\t\022\021\n\tautoLeave\030\003 \001(\010\">\n\031RejoinExist"
    "ingGameMessage\022\016\n\006gameId\030\001 \002(\r\022\021\n\tautoLe"
    "ave\030\002 \001(\010\"]\n\022JoinGameAckMessage\022\016\n\006gameI"
    "d\030\001 \002(\r\022\027\n\017areYouGameAdmin\030\002 \002(\010\022\036\n\010game"
    "Info\030\003 \002(\0132\014.NetGameInfo\"\337\002\n\025JoinGameFai"
    "ledMessage\022\016\n\006gameId\030\001 \002(\r\022K\n\025joinGameFa"
    "ilureReason\030\002 \002(\0162,.JoinGameFailedMessag"
    "e.JoinGameFailureReason\"\350\001\n\025JoinGameFail"
    "ureReason\022\017\n\013invalidGame\020\001\022\016\n\ngameIsFull"
    "\020\002\022\021\n\rgameIsRunning\020\003\022\023\n\017invalidPassword"
    "\020\004\022\025\n\021notAllowedAsGuest\020\005\022\016\n\nnotInvited\020"
    "\006\022\021\n\rgameNameInUse\020\007\022\017\n\013badGameName\020\010\022\023\n"
    "\017invalidSettings\020\t\022\024\n\020ipAddressBlocked\020\n"
    "\022\020\n\014rejoinFailed\020\013\"P\n\027GamePlayerJoinedMe"
    "ssage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022"
    "\023\n\013isGameAdmin\030\003 \002(\010\"\316\001\n\025GamePlayerLeftM"
    "essage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r"
    "\022I\n\024gamePlayerLeftReason\030\003 \002(\0162+.GamePla"
    "yerLeftMessage.GamePlayerLeftReason\"H\n\024G"
    "amePlayerLeftReason\022\021\n\rleftOnRequest\020\000\022\016"
    "\n\nleftKicked\020\001\022\r\n\tleftError\020\002\"C\n\027GameAdm"
    "inChangedMessage\022\016\n\006gameId\030\001 \002(\r\022\030\n\020newA"
    "dminPlayerId\030\002 \002(\r\"\206\002\n\026RemovedFromGameMe"
    "ssage\022\016\n\006gameId\030\001 \002(\r\022L\n\025removedFromGame"
    "Reason\030\002 \002(\0162-.RemovedFromGameMessage.Re"
    "movedFromGameReason\"\215\001\n\025RemovedFromGameR"
    "eason\022\024\n\020removedOnRequest\020\000\022\022\n\016kickedFro"
    "mGame\020\001\022\016\n\ngameIsFull\020\002\022\021\n\rgameIsRunning"
    "\020\003\022\017\n\013gameTimeout\020\004\022\026\n\022removedStartFaile"
    "d\020\005\"<\n\030KickPlayerRequestMessage\022\016\n\006gameI"
    "d\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\")\n\027LeaveGameRe"
    "questMessage\022\016\n\006gameId\030\001 \002(\r\"=\n\031InvitePl"
    "ayerToGameMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010pla"
    "yerId\030\002 \002(\r\"R\n\023InviteNotifyMessage\022\016\n\006ga"
    "meId\030\001 \002(\r\022\023\n\013playerIdWho\030\002 \002(\r\022\026\n\016playe"
    "rIdByWhom\030\003 \002(\r\"\270\001\n\033RejectGameInvitation"
    "Message\022\016\n\006gameId\030\001 \002(\r\022H\n\016myRejectReaso"
    "n\030\002 \002(\01620.RejectGameInvitationMessage.Re"
    "jectGameInvReason\"\?\n\023RejectGameInvReason"
    "\022\022\n\016rejectReasonNo\020\000\022\024\n\020rejectReasonBusy"
    "\020\001\"\210\001\n\026RejectInvNotifyMessage\022\016\n\006gameId\030"
    "\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022L\n\022playerRejectR"
    "eason\030\003 \002(\01620.RejectGameInvitationMessag"
    "e.RejectGameInvReason\"\262\001\n\021StartEventMess"
    "age\022\016\n\006gameId\030\001 \002(\r\0229\n\016startEventType\030\002 "
    "\002(\0162!.StartEventMessage.StartEventType\022\037"
    "\n\027fillWithComputerPlayers\030\003 \001(\010\"1\n\016Start"
    "EventType\022\016\n\nstartEvent\020\000\022\017\n\013rejoinEvent"
    "\020\001\"&\n\024StartEventAckMessage\022\016\n\006gameId\030\001 \002"
    "(\r\"_\n\027GameStartInitialMessage\022\016\n\006gameId\030"
    "\001 \002(\r\022\033\n\023startDealerPlayerId\030\002 \002(\r\022\027\n\013pl"
    "ayerSeats\030\003 \003(\rB\002\020\001\"\325\001\n\026GameStartRejoinM"
    "essage\022\016\n\006gameId\030\001 \002(\r\022\033\n\023startDealerPla"
    "yerId\030\002 \002(\r\022\017\n\007handNum\030\003 \002(\r\022B\n\020rejoinPl"
    "ayerData\030\004 \003(\0132(.GameStartRejoinMessage."
    "RejoinPlayerData\0329\n\020RejoinPlayerData\022\020\n\010"
    "playerId\030\001 \002(\r\022\023\n\013playerMoney\030\002 \002(\r\"\333\001\n\020"
    "HandStartMessage\022\016\n\006gameId\030\001 \002(\r\0220\n\nplai"
    "nCards\030\002 \001(\0132\034.HandStartMessage.PlainCar"
    "ds\022\026\n\016encryptedCards\030\003 \001(\014\022\022\n\nsmallBlind"
    "\030\004 \002(\r\022#\n\nseatStates\030\005 \003(\0162\017.NetPlayerSt"
    "ate\0324\n\nPlainCards\022\022\n\nplainCard1\030\001 \002(\r\022\022\n"
    "\nplainCard2\030\002 \002(\r\"X\n\022PlayersTurnMessage\022"
    "\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022 \n\tgam"
    "eState\030\003 \002(\0162\r.NetGameState\"\226\001\n\026MyAction"
    "RequestMessage\022\016\n\006gameId\030\001 \002(\r\022\017\n\007handNu"
    "m\030\002 \002(\r\022 \n\tgameState\030\003 \002(\0162\r.NetGameStat"
    "e\022\"\n\010myAction\030\004 \002(\0162\020.NetPlayerAction\022\025\n"
    "\rmyRelativeBet\030\005 \002(\r\"\271\002\n\031YourActionRejec"
    "tedMessage\022\016\n\006gameId\030\001 \002(\r\022 \n\tgameState\030"
    "\002 \002(\0162\r.NetGameState\022$\n\nyourAction\030\003 \002(\016"
    "2\020.NetPlayerAction\022\027\n\017yourRelativeBet\030\004 "
    "\002(\r\022C\n\017rejectionReason\030\005 \002(\0162*.YourActio"
    "nRejectedMessage.RejectionReason\"f\n\017Reje"
    "ctionReason\022\034\n\030rejectedInvalidGameState\020"
    "\001\022\027\n\023rejectedNotYourTurn\020\002\022\034\n\030rejectedAc"
    "tionNotAllowed\020\003\"\335\001\n\030PlayersActionDoneMe"
    "ssage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022"
    " \n\tgameState\030\003 \002(\0162\r.NetGameState\022&\n\014pla"
    "yerAction\030\004 \002(\0162\020.NetPlayerAction\022\026\n\016tot"
    "alPlayerBet\030\005 \002(\r\022\023\n\013playerMoney\030\006 \002(\r\022\022"
    "\n\nhighestSet\030\007 \002(\r\022\024\n\014minimumRaise\030\010 \002(\r"
    "\"_\n\024DealFlopCardsMessage\022\016\n\006gameId\030\001 \002(\r"
    "\022\021\n\tflopCard1\030\002 \002(\r\022\021\n\tflopCard2\030\003 \002(\r\022\021"
    "\n\tflopCard3\030\004 \002(\r\"7\n\023DealTurnCardMessage"
    "\022\016\n\006gameId\030\001 \002(\r\022\020\n\010turnCard\030\002 \002(\r\"9\n\024De"
    "alRiverCardMessage\022\016\n\006gameId\030\001 \002(\r\022\021\n\tri"
    "verCard\030\002 \002(\r\"\252\001\n\025AllInShowCardsMessage\022"
    "\016\n\006gameId\030\001 \002(\r\0228\n\014playersAllIn\030\002 \003(\0132\"."
    "AllInShowCardsMessage.PlayerAllIn\032G\n\013Pla"
    "yerAllIn\022\020\n\010playerId\030\001 \002(\r\022\022\n\nallInCard1"
    "\030\002 \002(\r\022\022\n\nallInCard2\030\003 \002(\r\"Q\n\031EndOfHandS"
    "howCardsMessage\022\016\n\006gameId\030\001 \002(\r\022$\n\rplaye"
    "rResults\030\002 \003(\0132\r.PlayerResult\"d\n\031EndOfHa"
    "ndHideCardsMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010pl"
    "ayerId\030\002 \002(\r\022\020\n\010moneyWon\030\003 \002(\r\022\023\n\013player"
    "Money\030\004 \002(\r\"\033\n\031ShowMyCardsRequestMessage"
    "\"@\n\031AfterHandShowCardsMessage\022#\n\014playerR"
    "esult\030\001 \002(\0132\r.PlayerResult\":\n\020EndOfGameM"
    "essage\022\016\n\006gameId\030\001 \002(\r\022\026\n\016winnerPlayerId"
    "\030\002 \002(\r\"B\n\026PlayerIdChangedMessage\022\023\n\013oldP"
    "layerId\030\001 \002(\r\022\023\n\013newPlayerId\030\002 \002(\r\"8\n\024As"
    "kKickPlayerMessage\022\016\n\006gameId\030\001 \002(\r\022\020\n\010pl"
    "ayerId\030\002 \002(\r\"\247\002\n\024AskKickDeniedMessage\022\016\n"
    "\006gameId\030\001 \002(\r\022\020\n\010playerId\030\002 \002(\r\022@\n\020kickD"
    "eniedReason\030\003 \002(\0162&.AskKickDeniedMessage"
    ".KickDeniedReason\"\252\001\n\020KickDeniedReason\022\036"
    "\n\032kickDeniedInvalidGameState\020\000\022\031\n\025kickDe"
    "niedNotPossible\020\001\022\033\n\027kickDeniedTryAgainL"
    "ater\020\002\022\037\n\033kickDeniedAlreadyInProgress\020\003\022"
    "\035\n\031kickDeniedInvalidPlayerId\020\004\"\245\001\n\030Start"
    "KickPetitionMessage\022\016\n\006gameId\030\001 \002(\r\022\022\n\np"
    "etitionId\030\002 \002(\r\022\031\n\021proposingPlayerId\030\003 \002"
    "(\r\022\024\n\014kickPlayerId\030\004 \002(\r\022\026\n\016kickTimeoutS"
    "ec\030\005 \002(\r\022\034\n\024numVotesNeededToKick\030\006 \002(\r\"N"
    "\n\026VoteKickRequestMessage\022\016\n\006gameId\030\001 \002(\r"
    "\022\022\n\npetitionId\030\002 \002(\r\022\020\n\010voteKick\030\003 \002(\010\"\337"
    "\001\n\024VoteKickReplyMessage\022\016\n\006gameId\030\001 \002(\r\022"
    "\022\n\npetitionId\030\002 \002(\r\022B\n\021voteKickReplyType"
    "\030\003 \002(\0162\'.VoteKickReplyMessage.VoteKickRe"
    "plyType\"_\n\021VoteKickReplyType\022\017\n\013voteKick"
    "Ack\020\000\022\031\n\025voteKickDeniedInvalid\020\001\022\036\n\032vote"
    "KickDeniedAlreadyVoted\020\002\"\240\001\n\031KickPetitio"
    "nUpdateMessage\022\016\n\006gameId\030\001 \002(\r\022\022\n\npetiti"
    "onId\030\002 \002(\r\022\036\n\026numVotesAgainstKicking\030\003 \002"
    "(\r\022!\n\031numVotesInFavourOfKicking\030\004 \002(\r\022\034\n"
    "\024numVotesNeededToKick\030\005 \002(\r\"\344\002\n\026EndKickP"
    "etitionMessage\022\016\n\006gameId\030\001 \002(\r\022\022\n\npetiti"
    "onId\030\002 \002(\r\022\036\n\026numVotesAgainstKicking\030\003 \002"
    "(\r\022!\n\031numVotesInFavourOfKicking\030\004 \002(\r\022\032\n"
    "\022resultPlayerKicked\030\005 \002(\r\022D\n\021petitionEnd"
    "Reason\030\006 \002(\0162).EndKickPetitionMessage.Pe"
    "titionEndReason\"\200\001\n\021PetitionEndReason\022\032\n"
    "\026petitionEndEnoughVotes\020\000\022\034\n\030petitionEnd"
    "TooFewPlayers\020\001\022\031\n\025petitionEndPlayerLeft"
    "\020\002\022\026\n\022petitionEndTimeout\020\003\"\357\001\n\021Statistic"
    "sMessage\0229\n\016statisticsData\030\001 \003(\0132!.Stati"
    "sticsMessage.StatisticsData\032\236\001\n\016Statisti"
    "csData\022H\n\016statisticsType\030\001 \002(\01620.Statist"
    "icsMessage.StatisticsData.StatisticsType"
    "\022\027\n\017statisticsValue\030\002 \002(\r\")\n\016StatisticsT"
    "ype\022\027\n\023statNumberOfPlayers\020\001\"T\n\022ChatRequ"
    "estMessage\022\024\n\014targetGameId\030\001 \001(\r\022\026\n\016targ"
    "etPlayerId\030\002 \001(\r\022\020\n\010chatText\030\003 \002(\t\"\330\001\n\013C"
    "hatMessage\022\016\n\006gameId\030\001 \001(\r\022\020\n\010playerId\030\002"
    " \001(\r\022\'\n\010chatType\030\003 \002(\0162\025.ChatMessage.Cha"
    "tType\022\020\n\010chatText\030\004 \002(\t\"l\n\010ChatType\022\021\n\rc"
    "hatTypeLobby\020\000\022\020\n\014chatTypeGame\020\001\022\017\n\013chat"
    "TypeBot\020\002\022\025\n\021chatTypeBroadcast\020\003\022\023\n\017chat"
    "TypePrivate\020\004\"%\n\021ChatRejectMessage\022\020\n\010ch"
    "atText\030\001 \002(\t\")\n\rDialogMessage\022\030\n\020notific"
    "ationText\030\001 \002(\t\"\321\001\n\025TimeoutWarningMessag"
    "e\022;\n\rtimeoutReason\030\001 \002(\0162$.TimeoutWarnin"
    "gMessage.TimeoutReason\022\030\n\020remainingSecon"
    "ds\030\002 \002(\r\"a\n\rTimeoutReason\022\031\n\025timeoutNoDa"
    "taReceived\020\000\022\027\n\023timeoutInactiveGame\020\001\022\034\n"
    "\030timeoutKickAfterAutofold\020\002\"\025\n\023ResetTime"
    "outMessage\"K\n\023ReportAvatarMessage\022\030\n\020rep"
    "ortedPlayerId\030\001 \002(\r\022\032\n\022reportedAvatarHas"
    "h\030\002 \002(\014\"\336\001\n\026ReportAvatarAckMessage\022\030\n\020re"
    "portedPlayerId\030\001 \002(\r\022F\n\022reportAvatarResu"
    "lt\030\002 \002(\0162*.ReportAvatarAckMessage.Report"
    "AvatarResult\"b\n\022ReportAvatarResult\022\030\n\024av"
    "atarReportAccepted\020\000\022\031\n\025avatarReportDupl"
    "icate\020\001\022\027\n\023avatarReportInvalid\020\002\"+\n\021Repo"
    "rtGameMessage\022\026\n\016reportedGameId\030\001 \002(\r\"\314\001"
    "\n\024ReportGameAckMessage\022\026\n\016reportedGameId"
    "\030\001 \002(\r\022@\n\020reportGameResult\030\002 \002(\0162&.Repor"
    "tGameAckMessage.ReportGameResult\"Z\n\020Repo"
    "rtGameResult\022\026\n\022gameReportAccepted\020\000\022\027\n\023"
    "gameReportDuplicate\020\001\022\025\n\021gameReportInval"
    "id\020\002\"\220\003\n\014ErrorMessage\022.\n\013errorReason\030\001 \002"
    "(\0162\031.ErrorMessage.ErrorReason\"\317\002\n\013ErrorR"
    "eason\022\014\n\010reserved\020\000\022\033\n\027initVersionNotSup"
    "ported\020\001\022\022\n\016initServerFull\020\002\022\023\n\017initAuth"
    "Failure\020\003\022\027\n\023initPlayerNameInUse\020\004\022\031\n\025in"
    "itInvalidPlayerName\020\005\022\031\n\025initServerMaint"
    "enance\020\006\022\017\n\013initBlocked\020\007\022\022\n\016avatarTooLa"
    "rge\020\010\022\021\n\rinvalidPacket\020\t\022\020\n\014invalidState"
    "\020\n\022\024\n\020kickedFromServer\020\013\022\024\n\020bannedFromSe"
    "rver\020\014\022\023\n\017blockedByServer\020\r\022\022\n\016sessionTi"
    "meout\020\016\"\3771\n\016PokerTHMessage\0227\n\013messageTyp"
    "e\030\001 \002(\0162\".PokerTHMessage.PokerTHMessageT"
    "ype\022)\n\017announceMessage\030\002 \001(\0132\020.AnnounceM"
    "essage\022!\n\013initMessage\030\003 \001(\0132\014.InitMessag"
    "e\022\?\n\032authServerChallengeMessage\030\004 \001(\0132\033."
    "AuthServerChallengeMessage\022=\n\031authClient"
    "ResponseMessage\030\005 \001(\0132\032.AuthClientRespon"
    "seMessage\022E\n\035authServerVerificationMessa"
    "ge\030\006 \001(\0132\036.AuthServerVerificationMessage"
    "\022\'\n\016initAckMessage\030\007 \001(\0132\017.InitAckMessag"
    "e\0223\n\024avatarRequestMessage\030\010 \001(\0132\025.Avatar"
    "RequestMessage\0221\n\023avatarHeaderMessage\030\t "
    "\001(\0132\024.AvatarHeaderMessage\022-\n\021avatarDataM"
    "essage\030\n \001(\0132\022.AvatarDataMessage\022+\n\020avat"
    "arEndMessage\030\013 \001(\0132\021.AvatarEndMessage\0223\n"
    "\024unknownAvatarMessage\030\014 \001(\0132\025.UnknownAva"
    "tarMessage\022-\n\021playerListMessage\030\r \001(\0132\022."
    "PlayerListMessage\022/\n\022gameListNewMessage\030"
    "\016 \001(\0132\023.GameListNewMessage\0225\n\025gameListUp"
    "dateMessage\030\017 \001(\0132\026.GameListUpdateMessag"
    "e\022A\n\033gameListPlayerJoinedMessage\030\020 \001(\0132\034"
    ".GameListPlayerJoinedMessage\022=\n\031gameList"
    "PlayerLeftMessage\030\021 \001(\0132\032.GameListPlayer"
    "LeftMessage\022A\n\033gameListAdminChangedMessa"
    "ge\030\022 \001(\0132\034.GameListAdminChangedMessage\022;"
    "\n\030playerInfoRequestMessage\030\023 \001(\0132\031.Playe"
    "rInfoRequestMessage\0227\n\026playerInfoReplyMe"
    "ssage\030\024 \001(\0132\027.PlayerInfoReplyMessage\022\?\n\032"
    "subscriptionRequestMessage\030\025 \001(\0132\033.Subsc"
    "riptionRequestMessage\0229\n\027joinExistingGam"
    "eMessage\030\026 \001(\0132\030.JoinExistingGameMessage"
    "\022/\n\022joinNewGameMessage\030\027 \001(\0132\023.JoinNewGa"
    "meMessage\022=\n\031rejoinExistingGameMessage\030\030"
    " \001(\0132\032.RejoinExistingGameMessage\022/\n\022join"
    "GameAckMessage\030\031 \001(\0132\023.JoinGameAckMessag"
    "e\0225\n\025joinGameFailedMessage\030\032 \001(\0132\026.JoinG"
    "ameFailedMessage\0229\n\027gamePlayerJoinedMess"
    "age\030\033 \001(\0132\030.GamePlayerJoinedMessage\0225\n\025g"
    "amePlayerLeftMessage\030\034 \001(\0132\026.GamePlayerL"
    "eftMessage\0229\n\027gameAdminChangedMessage\030\035 "
    "\001(\0132\030.GameAdminChangedMessage\0227\n\026removed"
    "FromGameMessage\030\036 \001(\0132\027.RemovedFromGameM"
    "essage\022;\n\030kickPlayerRequestMessage\030\037 \001(\013"
    "2\031.KickPlayerRequestMessage\0229\n\027leaveGame"
    "RequestMessage\030  \001(\0132\030.LeaveGameRequestM"
    "essage\022=\n\031invitePlayerToGameMessage\030! \001("
    "\0132\032.InvitePlayerToGameMessage\0221\n\023inviteN"
    "otifyMessage\030\" \001(\0132\024.InviteNotifyMessage"
    "\022A\n\033rejectGameInvitationMessage\030# \001(\0132\034."
    "RejectGameInvitationMessage\0227\n\026rejectInv"
    "NotifyMessage\030$ \001(\0132\027.RejectInvNotifyMes"
    "sage\022-\n\021startEventMessage\030% \001(\0132\022.StartE"
    "ventMessage\0223\n\024startEventAckMessage\030& \001("
    "\0132\025.StartEventAckMessage\0229\n\027gameStartIni"
    "tialMessage\030\' \001(\0132\030.GameStartInitialMess"
    "age\0227\n\026gameStartRejoinMessage\030( \001(\0132\027.Ga"
    "meStartRejoinMessage\022+\n\020handStartMessage"
    "\030) \001(\0132\021.HandStartMessage\022/\n\022playersTurn"
    "Message\030* \001(\0132\023.PlayersTurnMessage\0227\n\026my"
    "ActionRequestMessage\030+ \001(\0132\027.MyActionReq"
    "uestMessage\022=\n\031yourActionRejectedMessage"
    "\030, \001(\0132\032.YourActionRejectedMessage\022;\n\030pl"
    "ayersActionDoneMessage\030- \001(\0132\031.PlayersAc"
    "tionDoneMessage\0223\n\024dealFlopCardsMessage\030"
    ". \001(\0132\025.DealFlopCardsMessage\0221\n\023dealTurn"
    "CardMessage\030/ \001(\0132\024.DealTurnCardMessage\022"
    "3\n\024dealRiverCardMessage\0300 \001(\0132\025.DealRive"
    "rCardMessage\0225\n\025allInShowCardsMessage\0301 "
    "\001(\0132\026.AllInShowCardsMessage\022=\n\031endOfHand"
    "ShowCardsMessage\0302 \001(\0132\032.EndOfHandShowCa"
    "rdsMessage\022=\n\031endOfHandHideCardsMessage\030"
    "3 \001(\0132\032.EndOfHandHideCardsMessage\022=\n\031sho"
    "wMyCardsRequestMessage\0304 \001(\0132\032.ShowMyCar"
    "dsRequestMessage\022=\n\031afterHandShowCardsMe"
    "ssage\0305 \001(\0132\032.AfterHandShowCardsMessage\022"
    "+\n\020endOfGameMessage\0306 \001(\0132\021.EndOfGameMes"
    "sage\0227\n\026playerIdChangedMessage\0307 \001(\0132\027.P"
    "layerIdChangedMessage\0223\n\024askKickPlayerMe"
    "ssage\0308 \001(\0132\025.AskKickPlayerMessage\0223\n\024as"
    "kKickDeniedMessage\0309 \001(\0132\025.AskKickDenied"
    "Message\022;\n\030startKickPetitionMessage\030: \001("
    "\0132\031.StartKickPetitionMessage\0227\n\026voteKick"
    "RequestMessage\030; \001(\0132\027.VoteKickRequestMe"
    "ssage\0223\n\024voteKickReplyMessage\030< \001(\0132\025.Vo"
    "teKickReplyMessage\022=\n\031kickPetitionUpdate"
    "Message\030= \001(\0132\032.KickPetitionUpdateMessag"
    "e\0227\n\026endKickPetitionMessage\030> \001(\0132\027.EndK"
    "ickPetitionMessage\022-\n\021statisticsMessage\030"
    "\? \001(\0132\022.StatisticsMessage\022/\n\022chatRequest"
    "Message\030@ \001(\0132\023.ChatRequestMessage\022!\n\013ch"
    "atMessage\030A \001(\0132\014.ChatMessage\022-\n\021chatRej"
    "ectMessage\030B \001(\0132\022.ChatRejectMessage\022%\n\r"
    "dialogMessage\030C \001(\0132\016.DialogMessage\0225\n\025t"
    "imeoutWarningMessage\030D \001(\0132\026.TimeoutWarn"
    "ingMessage\0221\n\023resetTimeoutMessage\030E \001(\0132"
    "\024.ResetTimeoutMessage\0221\n\023reportAvatarMes"
    "sage\030F \001(\0132\024.ReportAvatarMessage\0227\n\026repo"
    "rtAvatarAckMessage\030G \001(\0132\027.ReportAvatarA"
    "ckMessage\022-\n\021reportGameMessage\030H \001(\0132\022.R"
    "eportGameMessage\0223\n\024reportGameAckMessage"
    "\030I \001(\0132\025.ReportGameAckMessage\022#\n\014errorMe"
    "ssage\030J \001(\0132\r.ErrorMessage\"\244\022\n\022PokerTHMe"
    "ssageType\022\030\n\024Type_AnnounceMessage\020\001\022\024\n\020T"
    "ype_InitMessage\020\002\022#\n\037Type_AuthServerChal"
    "lengeMessage\020\003\022\"\n\036Type_AuthClientRespons"
    "eMessage\020\004\022&\n\"Type_AuthServerVerificatio"
    "nMessage\020\005\022\027\n\023Type_InitAckMessage\020\006\022\035\n\031T"
    "ype_AvatarRequestMessage\020\007\022\034\n\030Type_Avata"
    "rHeaderMessage\020\010\022\032\n\026Type_AvatarDataMessa"
    "ge\020\t\022\031\n\025Type_AvatarEndMessage\020\n\022\035\n\031Type_"
    "UnknownAvatarMessage\020\013\022\032\n\026Type_PlayerLis"
    "tMessage\020\014\022\033\n\027Type_GameListNewMessage\020\r\022"
    "\036\n\032Type_GameListUpdateMessage\020\016\022$\n Type_"
    "GameListPlayerJoinedMessage\020\017\022\"\n\036Type_Ga"
    "meListPlayerLeftMessage\020\020\022$\n Type_GameLi"
    "stAdminChangedMessage\020\021\022!\n\035Type_PlayerIn"
    "foRequestMessage\020\022\022\037\n\033Type_PlayerInfoRep"
    "lyMessage\020\023\022#\n\037Type_SubscriptionRequestM"
    "essage\020\024\022 \n\034Type_JoinExistingGameMessage"
    "\020\025\022\033\n\027Type_JoinNewGameMessage\020\026\022\"\n\036Type_"
    "RejoinExistingGameMessage\020\027\022\033\n\027Type_Join"
    "GameAckMessage\020\030\022\036\n\032Type_JoinGameFailedM"
    "essage\020\031\022 \n\034Type_GamePlayerJoinedMessage"
    "\020\032\022\036\n\032Type_GamePlayerLeftMessage\020\033\022 \n\034Ty"
    "pe_GameAdminChangedMessage\020\034\022\037\n\033Type_Rem"
    "ovedFromGameMessage\020\035\022!\n\035Type_KickPlayer"
    "RequestMessage\020\036\022 \n\034Type_LeaveGameReques"
    "tMessage\020\037\022\"\n\036Type_InvitePlayerToGameMes"
    "sage\020 \022\034\n\030Type_InviteNotifyMessage\020!\022$\n "
    "Type_RejectGameInvitationMessage\020\"\022\037\n\033Ty"
    "pe_RejectInvNotifyMessage\020#\022\032\n\026Type_Star"
    "tEventMessage\020$\022\035\n\031Type_StartEventAckMes"
    "sage\020%\022 \n\034Type_GameStartInitialMessage\020&"
    "\022\037\n\033Type_GameStartRejoinMessage\020\'\022\031\n\025Typ"
    "e_HandStartMessage\020(\022\033\n\027Type_PlayersTurn"
    "Message\020)\022\037\n\033Type_MyActionRequestMessage"
    "\020*\022\"\n\036Type_YourActionRejectedMessage\020+\022!"
    "\n\035Type_PlayersActionDoneMessage\020,\022\035\n\031Typ"
    "e_DealFlopCardsMessage\020-\022\034\n\030Type_DealTur"
    "nCardMessage\020.\022\035\n\031Type_DealRiverCardMess"
    "age\020/\022\036\n\032Type_AllInShowCardsMessage\0200\022\"\n"
    "\036Type_EndOfHandShowCardsMessage\0201\022\"\n\036Typ"
    "e_EndOfHandHideCardsMessage\0202\022\"\n\036Type_Sh"
    "owMyCardsRequestMessage\0203\022\"\n\036Type_AfterH"
    "andShowCardsMessage\0204\022\031\n\025Type_EndOfGameM"
    "essage\0205\022\037\n\033Type_PlayerIdChangedMessage\020"
    "6\022\035\n\031Type_AskKickPlayerMessage\0207\022\035\n\031Type"
    "_AskKickDeniedMessage\0208\022!\n\035Type_StartKic"
    "kPetitionMessage\0209\022\037\n\033Type_VoteKickReque"
    "stMessage\020:\022\035\n\031Type_VoteKickReplyMessage"
    "\020;\022\"\n\036Type_KickPetitionUpdateMessage\020<\022\037"
    "\n\033Type_EndKickPetitionMessage\020=\022\032\n\026Type_"
    "StatisticsMessage\020>\022\033\n\027Type_ChatRequestM"
    "essage\020\?\022\024\n\020Type_ChatMessage\020@\022\032\n\026Type_C"
    "hatRejectMessage\020A\022\026\n\022Type_DialogMessage"
    "\020B\022\036\n\032Type_TimeoutWarningMessage\020C\022\034\n\030Ty"
    "pe_ResetTimeoutMessage\020D\022\034\n\030Type_ReportA"
    "vatarMessage\020E\022\037\n\033Type_ReportAvatarAckMe"
    "ssage\020F\022\032\n\026Type_ReportGameMessage\020G\022\035\n\031T"
    "ype_ReportGameAckMessage\020H\022\025\n\021Type_Error"
    "Message\020I*\?\n\013NetGameMode\022\017\n\013gameCreated\020"
    "\001\022\017\n\013gameStarted\020\002\022\016\n\ngameClosed\020\003*\204\001\n\014N"
    "etGameState\022\020\n\014statePreflop\020\000\022\r\n\tstateFl"
    "op\020\001\022\r\n\tstateTurn\020\002\022\016\n\nstateRiver\020\003\022\032\n\026s"
    "tatePreflopSmallBlind\020\004\022\030\n\024statePreflopB"
    "igBlind\020\005*\203\001\n\017NetPlayerAction\022\016\n\nactionN"
    "one\020\000\022\016\n\nactionFold\020\001\022\017\n\013actionCheck\020\002\022\016"
    "\n\nactionCall\020\003\022\r\n\tactionBet\020\004\022\017\n\013actionR"
    "aise\020\005\022\017\n\013actionAllIn\020\006*_\n\016NetPlayerStat"
    "e\022\025\n\021playerStateNormal\020\000\022\036\n\032playerStateS"
    "essionInactive\020\001\022\026\n\022playerStateNoMoney\020\002"
    "*X\n\020PlayerInfoRights\022\025\n\021playerRightsGues"
    "t\020\001\022\026\n\022playerRightsNormal\020\002\022\025\n\021playerRig"
    "htsAdmin\020\003*K\n\rNetAvatarType\022\022\n\016avatarIma"
    "gePng\020\000\022\022\n\016avatarImageJpg\020\001\022\022\n\016avatarIma"
    "geGif\020\002", 17727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pokerth.proto", &protobuf_RegisterTypes);
  NetGameInfo::default_instance_ = new NetGameInfo();
  PlayerResult::default_instance_ = new PlayerResult();
  AnnounceMessage::default_instance_ = new AnnounceMessage();
  AnnounceMessage_Version::default_instance_ = new AnnounceMessage_Version();
  InitMessage::default_instance_ = new InitMessage();
  AuthServerChallengeMessage::default_instance_ = new AuthServerChallengeMessage();
  AuthClientResponseMessage::default_instance_ = new AuthClientResponseMessage();
  AuthServerVerificationMessage::default_instance_ = new AuthServerVerificationMessage();
  InitAckMessage::default_instance_ = new InitAckMessage();
  AvatarRequestMessage::default_instance_ = new AvatarRequestMessage();
  AvatarHeaderMessage::default_instance_ = new AvatarHeaderMessage();
  AvatarDataMessage::default_instance_ = new AvatarDataMessage();
  AvatarEndMessage::default_instance_ = new AvatarEndMessage();
  UnknownAvatarMessage::default_instance_ = new UnknownAvatarMessage();
  PlayerListMessage::default_instance_ = new PlayerListMessage();
  GameListNewMessage::default_instance_ = new GameListNewMessage();
  GameListUpdateMessage::default_instance_ = new GameListUpdateMessage();
  GameListPlayerJoinedMessage::default_instance_ = new GameListPlayerJoinedMessage();
  GameListPlayerLeftMessage::default_instance_ = new GameListPlayerLeftMessage();
  GameListAdminChangedMessage::default_instance_ = new GameListAdminChangedMessage();
  PlayerInfoRequestMessage::default_instance_ = new PlayerInfoRequestMessage();
  PlayerInfoReplyMessage::default_instance_ = new PlayerInfoReplyMessage();
  PlayerInfoReplyMessage_PlayerInfoData::default_instance_ = new PlayerInfoReplyMessage_PlayerInfoData();
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_ = new PlayerInfoReplyMessage_PlayerInfoData_AvatarData();
  SubscriptionRequestMessage::default_instance_ = new SubscriptionRequestMessage();
  JoinExistingGameMessage::default_instance_ = new JoinExistingGameMessage();
  JoinNewGameMessage::default_instance_ = new JoinNewGameMessage();
  RejoinExistingGameMessage::default_instance_ = new RejoinExistingGameMessage();
  JoinGameAckMessage::default_instance_ = new JoinGameAckMessage();
  JoinGameFailedMessage::default_instance_ = new JoinGameFailedMessage();
  GamePlayerJoinedMessage::default_instance_ = new GamePlayerJoinedMessage();
  GamePlayerLeftMessage::default_instance_ = new GamePlayerLeftMessage();
  GameAdminChangedMessage::default_instance_ = new GameAdminChangedMessage();
  RemovedFromGameMessage::default_instance_ = new RemovedFromGameMessage();
  KickPlayerRequestMessage::default_instance_ = new KickPlayerRequestMessage();
  LeaveGameRequestMessage::default_instance_ = new LeaveGameRequestMessage();
  InvitePlayerToGameMessage::default_instance_ = new InvitePlayerToGameMessage();
  InviteNotifyMessage::default_instance_ = new InviteNotifyMessage();
  RejectGameInvitationMessage::default_instance_ = new RejectGameInvitationMessage();
  RejectInvNotifyMessage::default_instance_ = new RejectInvNotifyMessage();
  StartEventMessage::default_instance_ = new StartEventMessage();
  StartEventAckMessage::default_instance_ = new StartEventAckMessage();
  GameStartInitialMessage::default_instance_ = new GameStartInitialMessage();
  GameStartRejoinMessage::default_instance_ = new GameStartRejoinMessage();
  GameStartRejoinMessage_RejoinPlayerData::default_instance_ = new GameStartRejoinMessage_RejoinPlayerData();
  HandStartMessage::default_instance_ = new HandStartMessage();
  HandStartMessage_PlainCards::default_instance_ = new HandStartMessage_PlainCards();
  PlayersTurnMessage::default_instance_ = new PlayersTurnMessage();
  MyActionRequestMessage::default_instance_ = new MyActionRequestMessage();
  YourActionRejectedMessage::default_instance_ = new YourActionRejectedMessage();
  PlayersActionDoneMessage::default_instance_ = new PlayersActionDoneMessage();
  DealFlopCardsMessage::default_instance_ = new DealFlopCardsMessage();
  DealTurnCardMessage::default_instance_ = new DealTurnCardMessage();
  DealRiverCardMessage::default_instance_ = new DealRiverCardMessage();
  AllInShowCardsMessage::default_instance_ = new AllInShowCardsMessage();
  AllInShowCardsMessage_PlayerAllIn::default_instance_ = new AllInShowCardsMessage_PlayerAllIn();
  EndOfHandShowCardsMessage::default_instance_ = new EndOfHandShowCardsMessage();
  EndOfHandHideCardsMessage::default_instance_ = new EndOfHandHideCardsMessage();
  ShowMyCardsRequestMessage::default_instance_ = new ShowMyCardsRequestMessage();
  AfterHandShowCardsMessage::default_instance_ = new AfterHandShowCardsMessage();
  EndOfGameMessage::default_instance_ = new EndOfGameMessage();
  PlayerIdChangedMessage::default_instance_ = new PlayerIdChangedMessage();
  AskKickPlayerMessage::default_instance_ = new AskKickPlayerMessage();
  AskKickDeniedMessage::default_instance_ = new AskKickDeniedMessage();
  StartKickPetitionMessage::default_instance_ = new StartKickPetitionMessage();
  VoteKickRequestMessage::default_instance_ = new VoteKickRequestMessage();
  VoteKickReplyMessage::default_instance_ = new VoteKickReplyMessage();
  KickPetitionUpdateMessage::default_instance_ = new KickPetitionUpdateMessage();
  EndKickPetitionMessage::default_instance_ = new EndKickPetitionMessage();
  StatisticsMessage::default_instance_ = new StatisticsMessage();
  StatisticsMessage_StatisticsData::default_instance_ = new StatisticsMessage_StatisticsData();
  ChatRequestMessage::default_instance_ = new ChatRequestMessage();
  ChatMessage::default_instance_ = new ChatMessage();
  ChatRejectMessage::default_instance_ = new ChatRejectMessage();
  DialogMessage::default_instance_ = new DialogMessage();
  TimeoutWarningMessage::default_instance_ = new TimeoutWarningMessage();
  ResetTimeoutMessage::default_instance_ = new ResetTimeoutMessage();
  ReportAvatarMessage::default_instance_ = new ReportAvatarMessage();
  ReportAvatarAckMessage::default_instance_ = new ReportAvatarAckMessage();
  ReportGameMessage::default_instance_ = new ReportGameMessage();
  ReportGameAckMessage::default_instance_ = new ReportGameAckMessage();
  ErrorMessage::default_instance_ = new ErrorMessage();
  PokerTHMessage::default_instance_ = new PokerTHMessage();
  NetGameInfo::default_instance_->InitAsDefaultInstance();
  PlayerResult::default_instance_->InitAsDefaultInstance();
  AnnounceMessage::default_instance_->InitAsDefaultInstance();
  AnnounceMessage_Version::default_instance_->InitAsDefaultInstance();
  InitMessage::default_instance_->InitAsDefaultInstance();
  AuthServerChallengeMessage::default_instance_->InitAsDefaultInstance();
  AuthClientResponseMessage::default_instance_->InitAsDefaultInstance();
  AuthServerVerificationMessage::default_instance_->InitAsDefaultInstance();
  InitAckMessage::default_instance_->InitAsDefaultInstance();
  AvatarRequestMessage::default_instance_->InitAsDefaultInstance();
  AvatarHeaderMessage::default_instance_->InitAsDefaultInstance();
  AvatarDataMessage::default_instance_->InitAsDefaultInstance();
  AvatarEndMessage::default_instance_->InitAsDefaultInstance();
  UnknownAvatarMessage::default_instance_->InitAsDefaultInstance();
  PlayerListMessage::default_instance_->InitAsDefaultInstance();
  GameListNewMessage::default_instance_->InitAsDefaultInstance();
  GameListUpdateMessage::default_instance_->InitAsDefaultInstance();
  GameListPlayerJoinedMessage::default_instance_->InitAsDefaultInstance();
  GameListPlayerLeftMessage::default_instance_->InitAsDefaultInstance();
  GameListAdminChangedMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoRequestMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage_PlayerInfoData::default_instance_->InitAsDefaultInstance();
  PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_->InitAsDefaultInstance();
  SubscriptionRequestMessage::default_instance_->InitAsDefaultInstance();
  JoinExistingGameMessage::default_instance_->InitAsDefaultInstance();
  JoinNewGameMessage::default_instance_->InitAsDefaultInstance();
  RejoinExistingGameMessage::default_instance_->InitAsDefaultInstance();
  JoinGameAckMessage::default_instance_->InitAsDefaultInstance();
  JoinGameFailedMessage::default_instance_->InitAsDefaultInstance();
  GamePlayerJoinedMessage::default_instance_->InitAsDefaultInstance();
  GamePlayerLeftMessage::default_instance_->InitAsDefaultInstance();
  GameAdminChangedMessage::default_instance_->InitAsDefaultInstance();
  RemovedFromGameMessage::default_instance_->InitAsDefaultInstance();
  KickPlayerRequestMessage::default_instance_->InitAsDefaultInstance();
  LeaveGameRequestMessage::default_instance_->InitAsDefaultInstance();
  InvitePlayerToGameMessage::default_instance_->InitAsDefaultInstance();
  InviteNotifyMessage::default_instance_->InitAsDefaultInstance();
  RejectGameInvitationMessage::default_instance_->InitAsDefaultInstance();
  RejectInvNotifyMessage::default_instance_->InitAsDefaultInstance();
  StartEventMessage::default_instance_->InitAsDefaultInstance();
  StartEventAckMessage::default_instance_->InitAsDefaultInstance();
  GameStartInitialMessage::default_instance_->InitAsDefaultInstance();
  GameStartRejoinMessage::default_instance_->InitAsDefaultInstance();
  GameStartRejoinMessage_RejoinPlayerData::default_instance_->InitAsDefaultInstance();
  HandStartMessage::default_instance_->InitAsDefaultInstance();
  HandStartMessage_PlainCards::default_instance_->InitAsDefaultInstance();
  PlayersTurnMessage::default_instance_->InitAsDefaultInstance();
  MyActionRequestMessage::default_instance_->InitAsDefaultInstance();
  YourActionRejectedMessage::default_instance_->InitAsDefaultInstance();
  PlayersActionDoneMessage::default_instance_->InitAsDefaultInstance();
  DealFlopCardsMessage::default_instance_->InitAsDefaultInstance();
  DealTurnCardMessage::default_instance_->InitAsDefaultInstance();
  DealRiverCardMessage::default_instance_->InitAsDefaultInstance();
  AllInShowCardsMessage::default_instance_->InitAsDefaultInstance();
  AllInShowCardsMessage_PlayerAllIn::default_instance_->InitAsDefaultInstance();
  EndOfHandShowCardsMessage::default_instance_->InitAsDefaultInstance();
  EndOfHandHideCardsMessage::default_instance_->InitAsDefaultInstance();
  ShowMyCardsRequestMessage::default_instance_->InitAsDefaultInstance();
  AfterHandShowCardsMessage::default_instance_->InitAsDefaultInstance();
  EndOfGameMessage::default_instance_->InitAsDefaultInstance();
  PlayerIdChangedMessage::default_instance_->InitAsDefaultInstance();
  AskKickPlayerMessage::default_instance_->InitAsDefaultInstance();
  AskKickDeniedMessage::default_instance_->InitAsDefaultInstance();
  StartKickPetitionMessage::default_instance_->InitAsDefaultInstance();
  VoteKickRequestMessage::default_instance_->InitAsDefaultInstance();
  VoteKickReplyMessage::default_instance_->InitAsDefaultInstance();
  KickPetitionUpdateMessage::default_instance_->InitAsDefaultInstance();
  EndKickPetitionMessage::default_instance_->InitAsDefaultInstance();
  StatisticsMessage::default_instance_->InitAsDefaultInstance();
  StatisticsMessage_StatisticsData::default_instance_->InitAsDefaultInstance();
  ChatRequestMessage::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  ChatRejectMessage::default_instance_->InitAsDefaultInstance();
  DialogMessage::default_instance_->InitAsDefaultInstance();
  TimeoutWarningMessage::default_instance_->InitAsDefaultInstance();
  ResetTimeoutMessage::default_instance_->InitAsDefaultInstance();
  ReportAvatarMessage::default_instance_->InitAsDefaultInstance();
  ReportAvatarAckMessage::default_instance_->InitAsDefaultInstance();
  ReportGameMessage::default_instance_->InitAsDefaultInstance();
  ReportGameAckMessage::default_instance_->InitAsDefaultInstance();
  ErrorMessage::default_instance_->InitAsDefaultInstance();
  PokerTHMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pokerth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pokerth_2eproto {
  StaticDescriptorInitializer_pokerth_2eproto() {
    protobuf_AddDesc_pokerth_2eproto();
  }
} static_descriptor_initializer_pokerth_2eproto_;

const ::google::protobuf::EnumDescriptor* NetGameMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameMode_descriptor_;
}
bool NetGameMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameState_descriptor_;
}
bool NetGameState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetPlayerAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetPlayerAction_descriptor_;
}
bool NetPlayerAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetPlayerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetPlayerState_descriptor_;
}
bool NetPlayerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerInfoRights_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRights_descriptor_;
}
bool PlayerInfoRights_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetAvatarType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetAvatarType_descriptor_;
}
bool NetAvatarType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetGameInfo_NetGameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameInfo_NetGameType_descriptor_;
}
bool NetGameInfo_NetGameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetGameInfo_NetGameType NetGameInfo::normalGame;
const NetGameInfo_NetGameType NetGameInfo::registeredOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::inviteOnlyGame;
const NetGameInfo_NetGameType NetGameInfo::rankingGame;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MIN;
const NetGameInfo_NetGameType NetGameInfo::NetGameType_MAX;
const int NetGameInfo::NetGameType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetGameInfo_RaiseIntervalMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameInfo_RaiseIntervalMode_descriptor_;
}
bool NetGameInfo_RaiseIntervalMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnHandNum;
const NetGameInfo_RaiseIntervalMode NetGameInfo::raiseOnMinutes;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MIN;
const NetGameInfo_RaiseIntervalMode NetGameInfo::RaiseIntervalMode_MAX;
const int NetGameInfo::RaiseIntervalMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NetGameInfo_EndRaiseMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameInfo_EndRaiseMode_descriptor_;
}
bool NetGameInfo_EndRaiseMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetGameInfo_EndRaiseMode NetGameInfo::doubleBlinds;
const NetGameInfo_EndRaiseMode NetGameInfo::raiseByEndValue;
const NetGameInfo_EndRaiseMode NetGameInfo::keepLastBlind;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MIN;
const NetGameInfo_EndRaiseMode NetGameInfo::EndRaiseMode_MAX;
const int NetGameInfo::EndRaiseMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetGameInfo::kGameNameFieldNumber;
const int NetGameInfo::kNetGameTypeFieldNumber;
const int NetGameInfo::kMaxNumPlayersFieldNumber;
const int NetGameInfo::kRaiseIntervalModeFieldNumber;
const int NetGameInfo::kRaiseEveryHandsFieldNumber;
const int NetGameInfo::kRaiseEveryMinutesFieldNumber;
const int NetGameInfo::kEndRaiseModeFieldNumber;
const int NetGameInfo::kEndRaiseSmallBlindValueFieldNumber;
const int NetGameInfo::kProposedGuiSpeedFieldNumber;
const int NetGameInfo::kDelayBetweenHandsFieldNumber;
const int NetGameInfo::kPlayerActionTimeoutFieldNumber;
const int NetGameInfo::kFirstSmallBlindFieldNumber;
const int NetGameInfo::kStartMoneyFieldNumber;
const int NetGameInfo::kManualBlindsFieldNumber;
#endif  // !_MSC_VER

NetGameInfo::NetGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetGameInfo::InitAsDefaultInstance() {
}

NetGameInfo::NetGameInfo(const NetGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetGameInfo::SharedCtor() {
  _cached_size_ = 0;
  gamename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netgametype_ = 1;
  maxnumplayers_ = 0u;
  raiseintervalmode_ = 1;
  raiseeveryhands_ = 0u;
  raiseeveryminutes_ = 0u;
  endraisemode_ = 1;
  endraisesmallblindvalue_ = 0u;
  proposedguispeed_ = 0u;
  delaybetweenhands_ = 0u;
  playeractiontimeout_ = 0u;
  firstsmallblind_ = 0u;
  startmoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetGameInfo::~NetGameInfo() {
  SharedDtor();
}

void NetGameInfo::SharedDtor() {
  if (gamename_ != &::google::protobuf::internal::kEmptyString) {
    delete gamename_;
  }
  if (this != default_instance_) {
  }
}

void NetGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetGameInfo_descriptor_;
}

const NetGameInfo& NetGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

NetGameInfo* NetGameInfo::default_instance_ = NULL;

NetGameInfo* NetGameInfo::New() const {
  return new NetGameInfo;
}

void NetGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gamename()) {
      if (gamename_ != &::google::protobuf::internal::kEmptyString) {
        gamename_->clear();
      }
    }
    netgametype_ = 1;
    maxnumplayers_ = 0u;
    raiseintervalmode_ = 1;
    raiseeveryhands_ = 0u;
    raiseeveryminutes_ = 0u;
    endraisemode_ = 1;
    endraisesmallblindvalue_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    proposedguispeed_ = 0u;
    delaybetweenhands_ = 0u;
    playeractiontimeout_ = 0u;
    firstsmallblind_ = 0u;
    startmoney_ = 0u;
  }
  manualblinds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gameName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamename().data(), this->gamename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_netGameType;
        break;
      }
      
      // required .NetGameInfo.NetGameType netGameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_netGameType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_NetGameType_IsValid(value)) {
            set_netgametype(static_cast< ::NetGameInfo_NetGameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxNumPlayers;
        break;
      }
      
      // required uint32 maxNumPlayers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNumPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnumplayers_)));
          set_has_maxnumplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_raiseIntervalMode;
        break;
      }
      
      // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseIntervalMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_RaiseIntervalMode_IsValid(value)) {
            set_raiseintervalmode(static_cast< ::NetGameInfo_RaiseIntervalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_raiseEveryHands;
        break;
      }
      
      // optional uint32 raiseEveryHands = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseEveryHands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryhands_)));
          set_has_raiseeveryhands();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_raiseEveryMinutes;
        break;
      }
      
      // optional uint32 raiseEveryMinutes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseEveryMinutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiseeveryminutes_)));
          set_has_raiseeveryminutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endRaiseMode;
        break;
      }
      
      // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endRaiseMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetGameInfo_EndRaiseMode_IsValid(value)) {
            set_endraisemode(static_cast< ::NetGameInfo_EndRaiseMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_endRaiseSmallBlindValue;
        break;
      }
      
      // optional uint32 endRaiseSmallBlindValue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endRaiseSmallBlindValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endraisesmallblindvalue_)));
          set_has_endraisesmallblindvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_proposedGuiSpeed;
        break;
      }
      
      // required uint32 proposedGuiSpeed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proposedGuiSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposedguispeed_)));
          set_has_proposedguispeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_delayBetweenHands;
        break;
      }
      
      // required uint32 delayBetweenHands = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delayBetweenHands:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaybetweenhands_)));
          set_has_delaybetweenhands();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_playerActionTimeout;
        break;
      }
      
      // required uint32 playerActionTimeout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerActionTimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeractiontimeout_)));
          set_has_playeractiontimeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_firstSmallBlind;
        break;
      }
      
      // required uint32 firstSmallBlind = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstSmallBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstsmallblind_)));
          set_has_firstsmallblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_startMoney;
        break;
      }
      
      // required uint32 startMoney = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startmoney_)));
          set_has_startmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_manualBlinds;
        break;
      }
      
      // repeated uint32 manualBlinds = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manualBlinds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_manualblinds())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114, input, this->mutable_manualblinds())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gamename(), output);
  }
  
  // required .NetGameInfo.NetGameType netGameType = 2;
  if (has_netgametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->netgametype(), output);
  }
  
  // required uint32 maxNumPlayers = 3;
  if (has_maxnumplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxnumplayers(), output);
  }
  
  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (has_raiseintervalmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->raiseintervalmode(), output);
  }
  
  // optional uint32 raiseEveryHands = 5;
  if (has_raiseeveryhands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raiseeveryhands(), output);
  }
  
  // optional uint32 raiseEveryMinutes = 6;
  if (has_raiseeveryminutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raiseeveryminutes(), output);
  }
  
  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (has_endraisemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->endraisemode(), output);
  }
  
  // optional uint32 endRaiseSmallBlindValue = 8;
  if (has_endraisesmallblindvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endraisesmallblindvalue(), output);
  }
  
  // required uint32 proposedGuiSpeed = 9;
  if (has_proposedguispeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->proposedguispeed(), output);
  }
  
  // required uint32 delayBetweenHands = 10;
  if (has_delaybetweenhands()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->delaybetweenhands(), output);
  }
  
  // required uint32 playerActionTimeout = 11;
  if (has_playeractiontimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->playeractiontimeout(), output);
  }
  
  // required uint32 firstSmallBlind = 12;
  if (has_firstsmallblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->firstsmallblind(), output);
  }
  
  // required uint32 startMoney = 13;
  if (has_startmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->startmoney(), output);
  }
  
  // repeated uint32 manualBlinds = 14 [packed = true];
  if (this->manualblinds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_manualblinds_cached_byte_size_);
  }
  for (int i = 0; i < this->manualblinds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->manualblinds(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gameName = 1;
  if (has_gamename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamename().data(), this->gamename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamename(), target);
  }
  
  // required .NetGameInfo.NetGameType netGameType = 2;
  if (has_netgametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->netgametype(), target);
  }
  
  // required uint32 maxNumPlayers = 3;
  if (has_maxnumplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxnumplayers(), target);
  }
  
  // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
  if (has_raiseintervalmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->raiseintervalmode(), target);
  }
  
  // optional uint32 raiseEveryHands = 5;
  if (has_raiseeveryhands()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raiseeveryhands(), target);
  }
  
  // optional uint32 raiseEveryMinutes = 6;
  if (has_raiseeveryminutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->raiseeveryminutes(), target);
  }
  
  // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
  if (has_endraisemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->endraisemode(), target);
  }
  
  // optional uint32 endRaiseSmallBlindValue = 8;
  if (has_endraisesmallblindvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endraisesmallblindvalue(), target);
  }
  
  // required uint32 proposedGuiSpeed = 9;
  if (has_proposedguispeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->proposedguispeed(), target);
  }
  
  // required uint32 delayBetweenHands = 10;
  if (has_delaybetweenhands()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->delaybetweenhands(), target);
  }
  
  // required uint32 playerActionTimeout = 11;
  if (has_playeractiontimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->playeractiontimeout(), target);
  }
  
  // required uint32 firstSmallBlind = 12;
  if (has_firstsmallblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->firstsmallblind(), target);
  }
  
  // required uint32 startMoney = 13;
  if (has_startmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->startmoney(), target);
  }
  
  // repeated uint32 manualBlinds = 14 [packed = true];
  if (this->manualblinds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _manualblinds_cached_byte_size_, target);
  }
  for (int i = 0; i < this->manualblinds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->manualblinds(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetGameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gameName = 1;
    if (has_gamename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamename());
    }
    
    // required .NetGameInfo.NetGameType netGameType = 2;
    if (has_netgametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->netgametype());
    }
    
    // required uint32 maxNumPlayers = 3;
    if (has_maxnumplayers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnumplayers());
    }
    
    // required .NetGameInfo.RaiseIntervalMode raiseIntervalMode = 4;
    if (has_raiseintervalmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raiseintervalmode());
    }
    
    // optional uint32 raiseEveryHands = 5;
    if (has_raiseeveryhands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryhands());
    }
    
    // optional uint32 raiseEveryMinutes = 6;
    if (has_raiseeveryminutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiseeveryminutes());
    }
    
    // required .NetGameInfo.EndRaiseMode endRaiseMode = 7;
    if (has_endraisemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->endraisemode());
    }
    
    // optional uint32 endRaiseSmallBlindValue = 8;
    if (has_endraisesmallblindvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endraisesmallblindvalue());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 proposedGuiSpeed = 9;
    if (has_proposedguispeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proposedguispeed());
    }
    
    // required uint32 delayBetweenHands = 10;
    if (has_delaybetweenhands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaybetweenhands());
    }
    
    // required uint32 playerActionTimeout = 11;
    if (has_playeractiontimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playeractiontimeout());
    }
    
    // required uint32 firstSmallBlind = 12;
    if (has_firstsmallblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstsmallblind());
    }
    
    // required uint32 startMoney = 13;
    if (has_startmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startmoney());
    }
    
  }
  // repeated uint32 manualBlinds = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->manualblinds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->manualblinds(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _manualblinds_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetGameInfo::MergeFrom(const NetGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  manualblinds_.MergeFrom(from.manualblinds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamename()) {
      set_gamename(from.gamename());
    }
    if (from.has_netgametype()) {
      set_netgametype(from.netgametype());
    }
    if (from.has_maxnumplayers()) {
      set_maxnumplayers(from.maxnumplayers());
    }
    if (from.has_raiseintervalmode()) {
      set_raiseintervalmode(from.raiseintervalmode());
    }
    if (from.has_raiseeveryhands()) {
      set_raiseeveryhands(from.raiseeveryhands());
    }
    if (from.has_raiseeveryminutes()) {
      set_raiseeveryminutes(from.raiseeveryminutes());
    }
    if (from.has_endraisemode()) {
      set_endraisemode(from.endraisemode());
    }
    if (from.has_endraisesmallblindvalue()) {
      set_endraisesmallblindvalue(from.endraisesmallblindvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_proposedguispeed()) {
      set_proposedguispeed(from.proposedguispeed());
    }
    if (from.has_delaybetweenhands()) {
      set_delaybetweenhands(from.delaybetweenhands());
    }
    if (from.has_playeractiontimeout()) {
      set_playeractiontimeout(from.playeractiontimeout());
    }
    if (from.has_firstsmallblind()) {
      set_firstsmallblind(from.firstsmallblind());
    }
    if (from.has_startmoney()) {
      set_startmoney(from.startmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetGameInfo::CopyFrom(const NetGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001f4f) != 0x00001f4f) return false;
  
  return true;
}

void NetGameInfo::Swap(NetGameInfo* other) {
  if (other != this) {
    std::swap(gamename_, other->gamename_);
    std::swap(netgametype_, other->netgametype_);
    std::swap(maxnumplayers_, other->maxnumplayers_);
    std::swap(raiseintervalmode_, other->raiseintervalmode_);
    std::swap(raiseeveryhands_, other->raiseeveryhands_);
    std::swap(raiseeveryminutes_, other->raiseeveryminutes_);
    std::swap(endraisemode_, other->endraisemode_);
    std::swap(endraisesmallblindvalue_, other->endraisesmallblindvalue_);
    std::swap(proposedguispeed_, other->proposedguispeed_);
    std::swap(delaybetweenhands_, other->delaybetweenhands_);
    std::swap(playeractiontimeout_, other->playeractiontimeout_);
    std::swap(firstsmallblind_, other->firstsmallblind_);
    std::swap(startmoney_, other->startmoney_);
    manualblinds_.Swap(&other->manualblinds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetGameInfo_descriptor_;
  metadata.reflection = NetGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerResult::kPlayerIdFieldNumber;
const int PlayerResult::kResultCard1FieldNumber;
const int PlayerResult::kResultCard2FieldNumber;
const int PlayerResult::kBestHandPositionFieldNumber;
const int PlayerResult::kMoneyWonFieldNumber;
const int PlayerResult::kPlayerMoneyFieldNumber;
const int PlayerResult::kCardsValueFieldNumber;
#endif  // !_MSC_VER

PlayerResult::PlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerResult::InitAsDefaultInstance() {
}

PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerResult::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  resultcard1_ = 0u;
  resultcard2_ = 0u;
  moneywon_ = 0u;
  playermoney_ = 0u;
  cardsvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResult::~PlayerResult() {
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResult_descriptor_;
}

const PlayerResult& PlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerResult* PlayerResult::default_instance_ = NULL;

PlayerResult* PlayerResult::New() const {
  return new PlayerResult;
}

void PlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    resultcard1_ = 0u;
    resultcard2_ = 0u;
    moneywon_ = 0u;
    playermoney_ = 0u;
    cardsvalue_ = 0u;
  }
  besthandposition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resultCard1;
        break;
      }
      
      // required uint32 resultCard1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard1_)));
          set_has_resultcard1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resultCard2;
        break;
      }
      
      // required uint32 resultCard2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultcard2_)));
          set_has_resultcard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bestHandPosition;
        break;
      }
      
      // repeated uint32 bestHandPosition = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bestHandPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_besthandposition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_besthandposition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneyWon;
        break;
      }
      
      // required uint32 moneyWon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyWon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
          set_has_moneywon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerMoney;
        break;
      }
      
      // required uint32 playerMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardsValue;
        break;
      }
      
      // optional uint32 cardsValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardsvalue_)));
          set_has_cardsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required uint32 resultCard1 = 2;
  if (has_resultcard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resultcard1(), output);
  }
  
  // required uint32 resultCard2 = 3;
  if (has_resultcard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resultcard2(), output);
  }
  
  // repeated uint32 bestHandPosition = 4 [packed = true];
  if (this->besthandposition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_besthandposition_cached_byte_size_);
  }
  for (int i = 0; i < this->besthandposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->besthandposition(i), output);
  }
  
  // required uint32 moneyWon = 5;
  if (has_moneywon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->moneywon(), output);
  }
  
  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }
  
  // optional uint32 cardsValue = 7;
  if (has_cardsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cardsvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required uint32 resultCard1 = 2;
  if (has_resultcard1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resultcard1(), target);
  }
  
  // required uint32 resultCard2 = 3;
  if (has_resultcard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resultcard2(), target);
  }
  
  // repeated uint32 bestHandPosition = 4 [packed = true];
  if (this->besthandposition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _besthandposition_cached_byte_size_, target);
  }
  for (int i = 0; i < this->besthandposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->besthandposition(i), target);
  }
  
  // required uint32 moneyWon = 5;
  if (has_moneywon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->moneywon(), target);
  }
  
  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playermoney(), target);
  }
  
  // optional uint32 cardsValue = 7;
  if (has_cardsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cardsvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required uint32 resultCard1 = 2;
    if (has_resultcard1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcard1());
    }
    
    // required uint32 resultCard2 = 3;
    if (has_resultcard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultcard2());
    }
    
    // required uint32 moneyWon = 5;
    if (has_moneywon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneywon());
    }
    
    // required uint32 playerMoney = 6;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermoney());
    }
    
    // optional uint32 cardsValue = 7;
    if (has_cardsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardsvalue());
    }
    
  }
  // repeated uint32 bestHandPosition = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->besthandposition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->besthandposition(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _besthandposition_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  besthandposition_.MergeFrom(from.besthandposition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_resultcard1()) {
      set_resultcard1(from.resultcard1());
    }
    if (from.has_resultcard2()) {
      set_resultcard2(from.resultcard2());
    }
    if (from.has_moneywon()) {
      set_moneywon(from.moneywon());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_cardsvalue()) {
      set_cardsvalue(from.cardsvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(resultcard1_, other->resultcard1_);
    std::swap(resultcard2_, other->resultcard2_);
    besthandposition_.Swap(&other->besthandposition_);
    std::swap(moneywon_, other->moneywon_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(cardsvalue_, other->cardsvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResult_descriptor_;
  metadata.reflection = PlayerResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AnnounceMessage_ServerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceMessage_ServerType_descriptor_;
}
bool AnnounceMessage_ServerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AnnounceMessage_ServerType AnnounceMessage::serverTypeLAN;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetNoAuth;
const AnnounceMessage_ServerType AnnounceMessage::serverTypeInternetAuth;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MIN;
const AnnounceMessage_ServerType AnnounceMessage::ServerType_MAX;
const int AnnounceMessage::ServerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AnnounceMessage_Version::kMajorFieldNumber;
const int AnnounceMessage_Version::kMinorFieldNumber;
#endif  // !_MSC_VER

AnnounceMessage_Version::AnnounceMessage_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnounceMessage_Version::InitAsDefaultInstance() {
}

AnnounceMessage_Version::AnnounceMessage_Version(const AnnounceMessage_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnounceMessage_Version::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0u;
  minor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessage_Version::~AnnounceMessage_Version() {
  SharedDtor();
}

void AnnounceMessage_Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnnounceMessage_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnounceMessage_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceMessage_Version_descriptor_;
}

const AnnounceMessage_Version& AnnounceMessage_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AnnounceMessage_Version* AnnounceMessage_Version::default_instance_ = NULL;

AnnounceMessage_Version* AnnounceMessage_Version::New() const {
  return new AnnounceMessage_Version;
}

void AnnounceMessage_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0u;
    minor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnounceMessage_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 major = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }
      
      // required uint32 minor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnounceMessage_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }
  
  // required uint32 minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnounceMessage_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }
  
  // required uint32 minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnounceMessage_Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->major());
    }
    
    // required uint32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessage_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnounceMessage_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnounceMessage_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnounceMessage_Version::MergeFrom(const AnnounceMessage_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnounceMessage_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnounceMessage_Version::CopyFrom(const AnnounceMessage_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage_Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AnnounceMessage_Version::Swap(AnnounceMessage_Version* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnounceMessage_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnounceMessage_Version_descriptor_;
  metadata.reflection = AnnounceMessage_Version_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AnnounceMessage::kProtocolVersionFieldNumber;
const int AnnounceMessage::kLatestGameVersionFieldNumber;
const int AnnounceMessage::kLatestBetaRevisionFieldNumber;
const int AnnounceMessage::kServerTypeFieldNumber;
const int AnnounceMessage::kNumPlayersOnServerFieldNumber;
#endif  // !_MSC_VER

AnnounceMessage::AnnounceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnnounceMessage::InitAsDefaultInstance() {
  protocolversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
  latestgameversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
}

AnnounceMessage::AnnounceMessage(const AnnounceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnnounceMessage::SharedCtor() {
  _cached_size_ = 0;
  protocolversion_ = NULL;
  latestgameversion_ = NULL;
  latestbetarevision_ = 0u;
  servertype_ = 0;
  numplayersonserver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnnounceMessage::~AnnounceMessage() {
  SharedDtor();
}

void AnnounceMessage::SharedDtor() {
  if (this != default_instance_) {
    delete protocolversion_;
    delete latestgameversion_;
  }
}

void AnnounceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnnounceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnnounceMessage_descriptor_;
}

const AnnounceMessage& AnnounceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AnnounceMessage* AnnounceMessage::default_instance_ = NULL;

AnnounceMessage* AnnounceMessage::New() const {
  return new AnnounceMessage;
}

void AnnounceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_protocolversion()) {
      if (protocolversion_ != NULL) protocolversion_->::AnnounceMessage_Version::Clear();
    }
    if (has_latestgameversion()) {
      if (latestgameversion_ != NULL) latestgameversion_->::AnnounceMessage_Version::Clear();
    }
    latestbetarevision_ = 0u;
    servertype_ = 0;
    numplayersonserver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnnounceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version protocolVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocolversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_latestGameVersion;
        break;
      }
      
      // required .AnnounceMessage.Version latestGameVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latestGameVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latestgameversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_latestBetaRevision;
        break;
      }
      
      // required uint32 latestBetaRevision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latestBetaRevision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latestbetarevision_)));
          set_has_latestbetarevision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverType;
        break;
      }
      
      // required .AnnounceMessage.ServerType serverType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AnnounceMessage_ServerType_IsValid(value)) {
            set_servertype(static_cast< ::AnnounceMessage_ServerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numPlayersOnServer;
        break;
      }
      
      // required uint32 numPlayersOnServer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numPlayersOnServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numplayersonserver_)));
          set_has_numplayersonserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnnounceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protocolversion(), output);
  }
  
  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (has_latestgameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->latestgameversion(), output);
  }
  
  // required uint32 latestBetaRevision = 3;
  if (has_latestbetarevision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->latestbetarevision(), output);
  }
  
  // required .AnnounceMessage.ServerType serverType = 4;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->servertype(), output);
  }
  
  // required uint32 numPlayersOnServer = 5;
  if (has_numplayersonserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numplayersonserver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnnounceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AnnounceMessage.Version protocolVersion = 1;
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protocolversion(), target);
  }
  
  // required .AnnounceMessage.Version latestGameVersion = 2;
  if (has_latestgameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->latestgameversion(), target);
  }
  
  // required uint32 latestBetaRevision = 3;
  if (has_latestbetarevision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->latestbetarevision(), target);
  }
  
  // required .AnnounceMessage.ServerType serverType = 4;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->servertype(), target);
  }
  
  // required uint32 numPlayersOnServer = 5;
  if (has_numplayersonserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->numplayersonserver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnnounceMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AnnounceMessage.Version protocolVersion = 1;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protocolversion());
    }
    
    // required .AnnounceMessage.Version latestGameVersion = 2;
    if (has_latestgameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->latestgameversion());
    }
    
    // required uint32 latestBetaRevision = 3;
    if (has_latestbetarevision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latestbetarevision());
    }
    
    // required .AnnounceMessage.ServerType serverType = 4;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->servertype());
    }
    
    // required uint32 numPlayersOnServer = 5;
    if (has_numplayersonserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numplayersonserver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnnounceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnnounceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnnounceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnnounceMessage::MergeFrom(const AnnounceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      mutable_protocolversion()->::AnnounceMessage_Version::MergeFrom(from.protocolversion());
    }
    if (from.has_latestgameversion()) {
      mutable_latestgameversion()->::AnnounceMessage_Version::MergeFrom(from.latestgameversion());
    }
    if (from.has_latestbetarevision()) {
      set_latestbetarevision(from.latestbetarevision());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_numplayersonserver()) {
      set_numplayersonserver(from.numplayersonserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnnounceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnnounceMessage::CopyFrom(const AnnounceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnounceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_protocolversion()) {
    if (!this->protocolversion().IsInitialized()) return false;
  }
  if (has_latestgameversion()) {
    if (!this->latestgameversion().IsInitialized()) return false;
  }
  return true;
}

void AnnounceMessage::Swap(AnnounceMessage* other) {
  if (other != this) {
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(latestgameversion_, other->latestgameversion_);
    std::swap(latestbetarevision_, other->latestbetarevision_);
    std::swap(servertype_, other->servertype_);
    std::swap(numplayersonserver_, other->numplayersonserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnnounceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnnounceMessage_descriptor_;
  metadata.reflection = AnnounceMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InitMessage_LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitMessage_LoginType_descriptor_;
}
bool InitMessage_LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitMessage_LoginType InitMessage::guestLogin;
const InitMessage_LoginType InitMessage::authenticatedLogin;
const InitMessage_LoginType InitMessage::unauthenticatedLogin;
const InitMessage_LoginType InitMessage::LoginType_MIN;
const InitMessage_LoginType InitMessage::LoginType_MAX;
const int InitMessage::LoginType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InitMessage::kRequestedVersionFieldNumber;
const int InitMessage::kBuildIdFieldNumber;
const int InitMessage::kMyLastSessionIdFieldNumber;
const int InitMessage::kAuthServerPasswordFieldNumber;
const int InitMessage::kLoginFieldNumber;
const int InitMessage::kNickNameFieldNumber;
const int InitMessage::kClientUserDataFieldNumber;
const int InitMessage::kAvatarHashFieldNumber;
#endif  // !_MSC_VER

InitMessage::InitMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitMessage::InitAsDefaultInstance() {
  requestedversion_ = const_cast< ::AnnounceMessage_Version*>(&::AnnounceMessage_Version::default_instance());
}

InitMessage::InitMessage(const InitMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitMessage::SharedCtor() {
  _cached_size_ = 0;
  requestedversion_ = NULL;
  buildid_ = 0u;
  mylastsessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  authserverpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientuserdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatarhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitMessage::~InitMessage() {
  SharedDtor();
}

void InitMessage::SharedDtor() {
  if (mylastsessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete mylastsessionid_;
  }
  if (authserverpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete authserverpassword_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (clientuserdata_ != &::google::protobuf::internal::kEmptyString) {
    delete clientuserdata_;
  }
  if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarhash_;
  }
  if (this != default_instance_) {
    delete requestedversion_;
  }
}

void InitMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitMessage_descriptor_;
}

const InitMessage& InitMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

InitMessage* InitMessage::default_instance_ = NULL;

InitMessage* InitMessage::New() const {
  return new InitMessage;
}

void InitMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requestedversion()) {
      if (requestedversion_ != NULL) requestedversion_->::AnnounceMessage_Version::Clear();
    }
    buildid_ = 0u;
    if (has_mylastsessionid()) {
      if (mylastsessionid_ != &::google::protobuf::internal::kEmptyString) {
        mylastsessionid_->clear();
      }
    }
    if (has_authserverpassword()) {
      if (authserverpassword_ != &::google::protobuf::internal::kEmptyString) {
        authserverpassword_->clear();
      }
    }
    login_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_clientuserdata()) {
      if (clientuserdata_ != &::google::protobuf::internal::kEmptyString) {
        clientuserdata_->clear();
      }
    }
    if (has_avatarhash()) {
      if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
        avatarhash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnnounceMessage.Version requestedVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestedversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildId;
        break;
      }
      
      // required uint32 buildId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_myLastSessionId;
        break;
      }
      
      // optional bytes myLastSessionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myLastSessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mylastsessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_authServerPassword;
        break;
      }
      
      // optional string authServerPassword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authServerPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authserverpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authserverpassword().data(), this->authserverpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_login;
        break;
      }
      
      // required .InitMessage.LoginType login = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::InitMessage_LoginType_IsValid(value)) {
            set_login(static_cast< ::InitMessage_LoginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nickName;
        break;
      }
      
      // optional string nickName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clientUserData;
        break;
      }
      
      // optional bytes clientUserData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientUserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientuserdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_avatarHash;
        break;
      }
      
      // optional bytes avatarHash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (has_requestedversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requestedversion(), output);
  }
  
  // required uint32 buildId = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }
  
  // optional bytes myLastSessionId = 3;
  if (has_mylastsessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mylastsessionid(), output);
  }
  
  // optional string authServerPassword = 4;
  if (has_authserverpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authserverpassword().data(), this->authserverpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->authserverpassword(), output);
  }
  
  // required .InitMessage.LoginType login = 5;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->login(), output);
  }
  
  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nickname(), output);
  }
  
  // optional bytes clientUserData = 7;
  if (has_clientuserdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->clientuserdata(), output);
  }
  
  // optional bytes avatarHash = 8;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->avatarhash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AnnounceMessage.Version requestedVersion = 1;
  if (has_requestedversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requestedversion(), target);
  }
  
  // required uint32 buildId = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }
  
  // optional bytes myLastSessionId = 3;
  if (has_mylastsessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mylastsessionid(), target);
  }
  
  // optional string authServerPassword = 4;
  if (has_authserverpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authserverpassword().data(), this->authserverpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authserverpassword(), target);
  }
  
  // required .InitMessage.LoginType login = 5;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->login(), target);
  }
  
  // optional string nickName = 6;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nickname(), target);
  }
  
  // optional bytes clientUserData = 7;
  if (has_clientuserdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->clientuserdata(), target);
  }
  
  // optional bytes avatarHash = 8;
  if (has_avatarhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->avatarhash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AnnounceMessage.Version requestedVersion = 1;
    if (has_requestedversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestedversion());
    }
    
    // required uint32 buildId = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }
    
    // optional bytes myLastSessionId = 3;
    if (has_mylastsessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mylastsessionid());
    }
    
    // optional string authServerPassword = 4;
    if (has_authserverpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authserverpassword());
    }
    
    // required .InitMessage.LoginType login = 5;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login());
    }
    
    // optional string nickName = 6;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional bytes clientUserData = 7;
    if (has_clientuserdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientuserdata());
    }
    
    // optional bytes avatarHash = 8;
    if (has_avatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarhash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitMessage::MergeFrom(const InitMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestedversion()) {
      mutable_requestedversion()->::AnnounceMessage_Version::MergeFrom(from.requestedversion());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_mylastsessionid()) {
      set_mylastsessionid(from.mylastsessionid());
    }
    if (from.has_authserverpassword()) {
      set_authserverpassword(from.authserverpassword());
    }
    if (from.has_login()) {
      set_login(from.login());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_clientuserdata()) {
      set_clientuserdata(from.clientuserdata());
    }
    if (from.has_avatarhash()) {
      set_avatarhash(from.avatarhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitMessage::CopyFrom(const InitMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  if (has_requestedversion()) {
    if (!this->requestedversion().IsInitialized()) return false;
  }
  return true;
}

void InitMessage::Swap(InitMessage* other) {
  if (other != this) {
    std::swap(requestedversion_, other->requestedversion_);
    std::swap(buildid_, other->buildid_);
    std::swap(mylastsessionid_, other->mylastsessionid_);
    std::swap(authserverpassword_, other->authserverpassword_);
    std::swap(login_, other->login_);
    std::swap(nickname_, other->nickname_);
    std::swap(clientuserdata_, other->clientuserdata_);
    std::swap(avatarhash_, other->avatarhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitMessage_descriptor_;
  metadata.reflection = InitMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthServerChallengeMessage::kServerChallengeFieldNumber;
#endif  // !_MSC_VER

AuthServerChallengeMessage::AuthServerChallengeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthServerChallengeMessage::InitAsDefaultInstance() {
}

AuthServerChallengeMessage::AuthServerChallengeMessage(const AuthServerChallengeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthServerChallengeMessage::SharedCtor() {
  _cached_size_ = 0;
  serverchallenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthServerChallengeMessage::~AuthServerChallengeMessage() {
  SharedDtor();
}

void AuthServerChallengeMessage::SharedDtor() {
  if (serverchallenge_ != &::google::protobuf::internal::kEmptyString) {
    delete serverchallenge_;
  }
  if (this != default_instance_) {
  }
}

void AuthServerChallengeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthServerChallengeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthServerChallengeMessage_descriptor_;
}

const AuthServerChallengeMessage& AuthServerChallengeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AuthServerChallengeMessage* AuthServerChallengeMessage::default_instance_ = NULL;

AuthServerChallengeMessage* AuthServerChallengeMessage::New() const {
  return new AuthServerChallengeMessage;
}

void AuthServerChallengeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverchallenge()) {
      if (serverchallenge_ != &::google::protobuf::internal::kEmptyString) {
        serverchallenge_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthServerChallengeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverChallenge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverchallenge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthServerChallengeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serverChallenge = 1;
  if (has_serverchallenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serverchallenge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthServerChallengeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serverChallenge = 1;
  if (has_serverchallenge()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serverchallenge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthServerChallengeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serverChallenge = 1;
    if (has_serverchallenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serverchallenge());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthServerChallengeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthServerChallengeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthServerChallengeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthServerChallengeMessage::MergeFrom(const AuthServerChallengeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverchallenge()) {
      set_serverchallenge(from.serverchallenge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthServerChallengeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthServerChallengeMessage::CopyFrom(const AuthServerChallengeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerChallengeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthServerChallengeMessage::Swap(AuthServerChallengeMessage* other) {
  if (other != this) {
    std::swap(serverchallenge_, other->serverchallenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthServerChallengeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthServerChallengeMessage_descriptor_;
  metadata.reflection = AuthServerChallengeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthClientResponseMessage::kClientResponseFieldNumber;
#endif  // !_MSC_VER

AuthClientResponseMessage::AuthClientResponseMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthClientResponseMessage::InitAsDefaultInstance() {
}

AuthClientResponseMessage::AuthClientResponseMessage(const AuthClientResponseMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthClientResponseMessage::SharedCtor() {
  _cached_size_ = 0;
  clientresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthClientResponseMessage::~AuthClientResponseMessage() {
  SharedDtor();
}

void AuthClientResponseMessage::SharedDtor() {
  if (clientresponse_ != &::google::protobuf::internal::kEmptyString) {
    delete clientresponse_;
  }
  if (this != default_instance_) {
  }
}

void AuthClientResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthClientResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthClientResponseMessage_descriptor_;
}

const AuthClientResponseMessage& AuthClientResponseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AuthClientResponseMessage* AuthClientResponseMessage::default_instance_ = NULL;

AuthClientResponseMessage* AuthClientResponseMessage::New() const {
  return new AuthClientResponseMessage;
}

void AuthClientResponseMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientresponse()) {
      if (clientresponse_ != &::google::protobuf::internal::kEmptyString) {
        clientresponse_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthClientResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes clientResponse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clientresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthClientResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes clientResponse = 1;
  if (has_clientresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->clientresponse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthClientResponseMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes clientResponse = 1;
  if (has_clientresponse()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->clientresponse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthClientResponseMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes clientResponse = 1;
    if (has_clientresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clientresponse());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthClientResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthClientResponseMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthClientResponseMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthClientResponseMessage::MergeFrom(const AuthClientResponseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientresponse()) {
      set_clientresponse(from.clientresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthClientResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthClientResponseMessage::CopyFrom(const AuthClientResponseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthClientResponseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthClientResponseMessage::Swap(AuthClientResponseMessage* other) {
  if (other != this) {
    std::swap(clientresponse_, other->clientresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthClientResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthClientResponseMessage_descriptor_;
  metadata.reflection = AuthClientResponseMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthServerVerificationMessage::kServerVerificationFieldNumber;
#endif  // !_MSC_VER

AuthServerVerificationMessage::AuthServerVerificationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthServerVerificationMessage::InitAsDefaultInstance() {
}

AuthServerVerificationMessage::AuthServerVerificationMessage(const AuthServerVerificationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthServerVerificationMessage::SharedCtor() {
  _cached_size_ = 0;
  serververification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthServerVerificationMessage::~AuthServerVerificationMessage() {
  SharedDtor();
}

void AuthServerVerificationMessage::SharedDtor() {
  if (serververification_ != &::google::protobuf::internal::kEmptyString) {
    delete serververification_;
  }
  if (this != default_instance_) {
  }
}

void AuthServerVerificationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthServerVerificationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthServerVerificationMessage_descriptor_;
}

const AuthServerVerificationMessage& AuthServerVerificationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AuthServerVerificationMessage* AuthServerVerificationMessage::default_instance_ = NULL;

AuthServerVerificationMessage* AuthServerVerificationMessage::New() const {
  return new AuthServerVerificationMessage;
}

void AuthServerVerificationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serververification()) {
      if (serververification_ != &::google::protobuf::internal::kEmptyString) {
        serververification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthServerVerificationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serverVerification = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serververification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthServerVerificationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serverVerification = 1;
  if (has_serververification()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serververification(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthServerVerificationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serverVerification = 1;
  if (has_serververification()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serververification(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthServerVerificationMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serverVerification = 1;
    if (has_serververification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serververification());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthServerVerificationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthServerVerificationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthServerVerificationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthServerVerificationMessage::MergeFrom(const AuthServerVerificationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serververification()) {
      set_serververification(from.serververification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthServerVerificationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthServerVerificationMessage::CopyFrom(const AuthServerVerificationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthServerVerificationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthServerVerificationMessage::Swap(AuthServerVerificationMessage* other) {
  if (other != this) {
    std::swap(serververification_, other->serververification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthServerVerificationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthServerVerificationMessage_descriptor_;
  metadata.reflection = AuthServerVerificationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitAckMessage::kYourSessionIdFieldNumber;
const int InitAckMessage::kYourPlayerIdFieldNumber;
const int InitAckMessage::kYourAvatarHashFieldNumber;
const int InitAckMessage::kRejoinGameIdFieldNumber;
#endif  // !_MSC_VER

InitAckMessage::InitAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitAckMessage::InitAsDefaultInstance() {
}

InitAckMessage::InitAckMessage(const InitAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitAckMessage::SharedCtor() {
  _cached_size_ = 0;
  yoursessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yourplayerid_ = 0u;
  youravatarhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rejoingameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitAckMessage::~InitAckMessage() {
  SharedDtor();
}

void InitAckMessage::SharedDtor() {
  if (yoursessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete yoursessionid_;
  }
  if (youravatarhash_ != &::google::protobuf::internal::kEmptyString) {
    delete youravatarhash_;
  }
  if (this != default_instance_) {
  }
}

void InitAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitAckMessage_descriptor_;
}

const InitAckMessage& InitAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

InitAckMessage* InitAckMessage::default_instance_ = NULL;

InitAckMessage* InitAckMessage::New() const {
  return new InitAckMessage;
}

void InitAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_yoursessionid()) {
      if (yoursessionid_ != &::google::protobuf::internal::kEmptyString) {
        yoursessionid_->clear();
      }
    }
    yourplayerid_ = 0u;
    if (has_youravatarhash()) {
      if (youravatarhash_ != &::google::protobuf::internal::kEmptyString) {
        youravatarhash_->clear();
      }
    }
    rejoingameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes yourSessionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_yoursessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_yourPlayerId;
        break;
      }
      
      // required uint32 yourPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yourPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourplayerid_)));
          set_has_yourplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yourAvatarHash;
        break;
      }
      
      // optional bytes yourAvatarHash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yourAvatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_youravatarhash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rejoinGameId;
        break;
      }
      
      // optional uint32 rejoinGameId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rejoinGameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rejoingameid_)));
          set_has_rejoingameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InitAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes yourSessionId = 1;
  if (has_yoursessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->yoursessionid(), output);
  }
  
  // required uint32 yourPlayerId = 2;
  if (has_yourplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->yourplayerid(), output);
  }
  
  // optional bytes yourAvatarHash = 3;
  if (has_youravatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->youravatarhash(), output);
  }
  
  // optional uint32 rejoinGameId = 4;
  if (has_rejoingameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rejoingameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes yourSessionId = 1;
  if (has_yoursessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->yoursessionid(), target);
  }
  
  // required uint32 yourPlayerId = 2;
  if (has_yourplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->yourplayerid(), target);
  }
  
  // optional bytes yourAvatarHash = 3;
  if (has_youravatarhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->youravatarhash(), target);
  }
  
  // optional uint32 rejoinGameId = 4;
  if (has_rejoingameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rejoingameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes yourSessionId = 1;
    if (has_yoursessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->yoursessionid());
    }
    
    // required uint32 yourPlayerId = 2;
    if (has_yourplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yourplayerid());
    }
    
    // optional bytes yourAvatarHash = 3;
    if (has_youravatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->youravatarhash());
    }
    
    // optional uint32 rejoinGameId = 4;
    if (has_rejoingameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rejoingameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitAckMessage::MergeFrom(const InitAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yoursessionid()) {
      set_yoursessionid(from.yoursessionid());
    }
    if (from.has_yourplayerid()) {
      set_yourplayerid(from.yourplayerid());
    }
    if (from.has_youravatarhash()) {
      set_youravatarhash(from.youravatarhash());
    }
    if (from.has_rejoingameid()) {
      set_rejoingameid(from.rejoingameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitAckMessage::CopyFrom(const InitAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void InitAckMessage::Swap(InitAckMessage* other) {
  if (other != this) {
    std::swap(yoursessionid_, other->yoursessionid_);
    std::swap(yourplayerid_, other->yourplayerid_);
    std::swap(youravatarhash_, other->youravatarhash_);
    std::swap(rejoingameid_, other->rejoingameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitAckMessage_descriptor_;
  metadata.reflection = InitAckMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarRequestMessage::kRequestIdFieldNumber;
const int AvatarRequestMessage::kAvatarHashFieldNumber;
#endif  // !_MSC_VER

AvatarRequestMessage::AvatarRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AvatarRequestMessage::InitAsDefaultInstance() {
}

AvatarRequestMessage::AvatarRequestMessage(const AvatarRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  avatarhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarRequestMessage::~AvatarRequestMessage() {
  SharedDtor();
}

void AvatarRequestMessage::SharedDtor() {
  if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarhash_;
  }
  if (this != default_instance_) {
  }
}

void AvatarRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarRequestMessage_descriptor_;
}

const AvatarRequestMessage& AvatarRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AvatarRequestMessage* AvatarRequestMessage::default_instance_ = NULL;

AvatarRequestMessage* AvatarRequestMessage::New() const {
  return new AvatarRequestMessage;
}

void AvatarRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
    if (has_avatarhash()) {
      if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
        avatarhash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarHash;
        break;
      }
      
      // required bytes avatarHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }
  
  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->avatarhash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AvatarRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }
  
  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->avatarhash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AvatarRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
    // required bytes avatarHash = 2;
    if (has_avatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarhash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarRequestMessage::MergeFrom(const AvatarRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatarhash()) {
      set_avatarhash(from.avatarhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarRequestMessage::CopyFrom(const AvatarRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AvatarRequestMessage::Swap(AvatarRequestMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(avatarhash_, other->avatarhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarRequestMessage_descriptor_;
  metadata.reflection = AvatarRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarHeaderMessage::kRequestIdFieldNumber;
const int AvatarHeaderMessage::kAvatarTypeFieldNumber;
const int AvatarHeaderMessage::kAvatarSizeFieldNumber;
#endif  // !_MSC_VER

AvatarHeaderMessage::AvatarHeaderMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AvatarHeaderMessage::InitAsDefaultInstance() {
}

AvatarHeaderMessage::AvatarHeaderMessage(const AvatarHeaderMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  avatartype_ = 0;
  avatarsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarHeaderMessage::~AvatarHeaderMessage() {
  SharedDtor();
}

void AvatarHeaderMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvatarHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarHeaderMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarHeaderMessage_descriptor_;
}

const AvatarHeaderMessage& AvatarHeaderMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AvatarHeaderMessage* AvatarHeaderMessage::default_instance_ = NULL;

AvatarHeaderMessage* AvatarHeaderMessage::New() const {
  return new AvatarHeaderMessage;
}

void AvatarHeaderMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
    avatartype_ = 0;
    avatarsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_avatarType;
        break;
      }
      
      // required .NetAvatarType avatarType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< NetAvatarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_avatarSize;
        break;
      }
      
      // required uint32 avatarSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarsize_)));
          set_has_avatarsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }
  
  // required .NetAvatarType avatarType = 2;
  if (has_avatartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->avatartype(), output);
  }
  
  // required uint32 avatarSize = 3;
  if (has_avatarsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->avatarsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AvatarHeaderMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }
  
  // required .NetAvatarType avatarType = 2;
  if (has_avatartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->avatartype(), target);
  }
  
  // required uint32 avatarSize = 3;
  if (has_avatarsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->avatarsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AvatarHeaderMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
    // required .NetAvatarType avatarType = 2;
    if (has_avatartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
    }
    
    // required uint32 avatarSize = 3;
    if (has_avatarsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarHeaderMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarHeaderMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarHeaderMessage::MergeFrom(const AvatarHeaderMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatartype()) {
      set_avatartype(from.avatartype());
    }
    if (from.has_avatarsize()) {
      set_avatarsize(from.avatarsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarHeaderMessage::CopyFrom(const AvatarHeaderMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarHeaderMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AvatarHeaderMessage::Swap(AvatarHeaderMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(avatartype_, other->avatartype_);
    std::swap(avatarsize_, other->avatarsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarHeaderMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarHeaderMessage_descriptor_;
  metadata.reflection = AvatarHeaderMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarDataMessage::kRequestIdFieldNumber;
const int AvatarDataMessage::kAvatarBlockFieldNumber;
#endif  // !_MSC_VER

AvatarDataMessage::AvatarDataMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AvatarDataMessage::InitAsDefaultInstance() {
}

AvatarDataMessage::AvatarDataMessage(const AvatarDataMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarDataMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  avatarblock_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarDataMessage::~AvatarDataMessage() {
  SharedDtor();
}

void AvatarDataMessage::SharedDtor() {
  if (avatarblock_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarblock_;
  }
  if (this != default_instance_) {
  }
}

void AvatarDataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarDataMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarDataMessage_descriptor_;
}

const AvatarDataMessage& AvatarDataMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AvatarDataMessage* AvatarDataMessage::default_instance_ = NULL;

AvatarDataMessage* AvatarDataMessage::New() const {
  return new AvatarDataMessage;
}

void AvatarDataMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
    if (has_avatarblock()) {
      if (avatarblock_ != &::google::protobuf::internal::kEmptyString) {
        avatarblock_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarDataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarBlock;
        break;
      }
      
      // required bytes avatarBlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarblock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarDataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }
  
  // required bytes avatarBlock = 2;
  if (has_avatarblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->avatarblock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AvatarDataMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }
  
  // required bytes avatarBlock = 2;
  if (has_avatarblock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->avatarblock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AvatarDataMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
    // required bytes avatarBlock = 2;
    if (has_avatarblock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarblock());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarDataMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarDataMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarDataMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarDataMessage::MergeFrom(const AvatarDataMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_avatarblock()) {
      set_avatarblock(from.avatarblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarDataMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarDataMessage::CopyFrom(const AvatarDataMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarDataMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AvatarDataMessage::Swap(AvatarDataMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(avatarblock_, other->avatarblock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarDataMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarDataMessage_descriptor_;
  metadata.reflection = AvatarDataMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AvatarEndMessage::kRequestIdFieldNumber;
#endif  // !_MSC_VER

AvatarEndMessage::AvatarEndMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AvatarEndMessage::InitAsDefaultInstance() {
}

AvatarEndMessage::AvatarEndMessage(const AvatarEndMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AvatarEndMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvatarEndMessage::~AvatarEndMessage() {
  SharedDtor();
}

void AvatarEndMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvatarEndMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvatarEndMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvatarEndMessage_descriptor_;
}

const AvatarEndMessage& AvatarEndMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AvatarEndMessage* AvatarEndMessage::default_instance_ = NULL;

AvatarEndMessage* AvatarEndMessage::New() const {
  return new AvatarEndMessage;
}

void AvatarEndMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AvatarEndMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvatarEndMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AvatarEndMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AvatarEndMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvatarEndMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AvatarEndMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AvatarEndMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AvatarEndMessage::MergeFrom(const AvatarEndMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AvatarEndMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarEndMessage::CopyFrom(const AvatarEndMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarEndMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AvatarEndMessage::Swap(AvatarEndMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AvatarEndMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvatarEndMessage_descriptor_;
  metadata.reflection = AvatarEndMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnknownAvatarMessage::kRequestIdFieldNumber;
#endif  // !_MSC_VER

UnknownAvatarMessage::UnknownAvatarMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnknownAvatarMessage::InitAsDefaultInstance() {
}

UnknownAvatarMessage::UnknownAvatarMessage(const UnknownAvatarMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownAvatarMessage::SharedCtor() {
  _cached_size_ = 0;
  requestid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownAvatarMessage::~UnknownAvatarMessage() {
  SharedDtor();
}

void UnknownAvatarMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnknownAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnknownAvatarMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnknownAvatarMessage_descriptor_;
}

const UnknownAvatarMessage& UnknownAvatarMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

UnknownAvatarMessage* UnknownAvatarMessage::default_instance_ = NULL;

UnknownAvatarMessage* UnknownAvatarMessage::New() const {
  return new UnknownAvatarMessage;
}

void UnknownAvatarMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requestid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 requestId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnknownAvatarMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 requestId = 1;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnknownAvatarMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 requestId = 1;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownAvatarMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnknownAvatarMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnknownAvatarMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnknownAvatarMessage::MergeFrom(const UnknownAvatarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownAvatarMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownAvatarMessage::CopyFrom(const UnknownAvatarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnknownAvatarMessage::Swap(UnknownAvatarMessage* other) {
  if (other != this) {
    std::swap(requestid_, other->requestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnknownAvatarMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnknownAvatarMessage_descriptor_;
  metadata.reflection = UnknownAvatarMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PlayerListMessage_PlayerListNotification_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerListMessage_PlayerListNotification_descriptor_;
}
bool PlayerListMessage_PlayerListNotification_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListNew;
const PlayerListMessage_PlayerListNotification PlayerListMessage::playerListLeft;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MIN;
const PlayerListMessage_PlayerListNotification PlayerListMessage::PlayerListNotification_MAX;
const int PlayerListMessage::PlayerListNotification_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PlayerListMessage::kPlayerIdFieldNumber;
const int PlayerListMessage::kPlayerListNotificationFieldNumber;
#endif  // !_MSC_VER

PlayerListMessage::PlayerListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerListMessage::InitAsDefaultInstance() {
}

PlayerListMessage::PlayerListMessage(const PlayerListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerListMessage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playerlistnotification_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerListMessage::~PlayerListMessage() {
  SharedDtor();
}

void PlayerListMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerListMessage_descriptor_;
}

const PlayerListMessage& PlayerListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerListMessage* PlayerListMessage::default_instance_ = NULL;

PlayerListMessage* PlayerListMessage::New() const {
  return new PlayerListMessage;
}

void PlayerListMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    playerlistnotification_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerListNotification;
        break;
      }
      
      // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerListNotification:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PlayerListMessage_PlayerListNotification_IsValid(value)) {
            set_playerlistnotification(static_cast< ::PlayerListMessage_PlayerListNotification >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (has_playerlistnotification()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->playerlistnotification(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
  if (has_playerlistnotification()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->playerlistnotification(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerListMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .PlayerListMessage.PlayerListNotification playerListNotification = 2;
    if (has_playerlistnotification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerlistnotification());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerListMessage::MergeFrom(const PlayerListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerlistnotification()) {
      set_playerlistnotification(from.playerlistnotification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerListMessage::CopyFrom(const PlayerListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerListMessage::Swap(PlayerListMessage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playerlistnotification_, other->playerlistnotification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerListMessage_descriptor_;
  metadata.reflection = PlayerListMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameListNewMessage::kGameIdFieldNumber;
const int GameListNewMessage::kGameModeFieldNumber;
const int GameListNewMessage::kIsPrivateFieldNumber;
const int GameListNewMessage::kPlayerIdsFieldNumber;
const int GameListNewMessage::kAdminPlayerIdFieldNumber;
const int GameListNewMessage::kGameInfoFieldNumber;
#endif  // !_MSC_VER

GameListNewMessage::GameListNewMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameListNewMessage::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
}

GameListNewMessage::GameListNewMessage(const GameListNewMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameListNewMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  gamemode_ = 1;
  isprivate_ = false;
  adminplayerid_ = 0u;
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListNewMessage::~GameListNewMessage() {
  SharedDtor();
}

void GameListNewMessage::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void GameListNewMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameListNewMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameListNewMessage_descriptor_;
}

const GameListNewMessage& GameListNewMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameListNewMessage* GameListNewMessage::default_instance_ = NULL;

GameListNewMessage* GameListNewMessage::New() const {
  return new GameListNewMessage;
}

void GameListNewMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    gamemode_ = 1;
    isprivate_ = false;
    adminplayerid_ = 0u;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
  }
  playerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameListNewMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameMode;
        break;
      }
      
      // required .NetGameMode gameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< NetGameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isPrivate;
        break;
      }
      
      // required bool isPrivate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPrivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprivate_)));
          set_has_isprivate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerIds;
        break;
      }
      
      // repeated uint32 playerIds = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_playerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_adminPlayerId;
        break;
      }
      
      // required uint32 adminPlayerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adminplayerid_)));
          set_has_adminplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gameInfo;
        break;
      }
      
      // required .NetGameInfo gameInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameListNewMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }
  
  // required bool isPrivate = 3;
  if (has_isprivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isprivate(), output);
  }
  
  // repeated uint32 playerIds = 4 [packed = true];
  if (this->playerids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerids_cached_byte_size_);
  }
  for (int i = 0; i < this->playerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerids(i), output);
  }
  
  // required uint32 adminPlayerId = 5;
  if (has_adminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adminplayerid(), output);
  }
  
  // required .NetGameInfo gameInfo = 6;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gameinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameListNewMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gamemode(), target);
  }
  
  // required bool isPrivate = 3;
  if (has_isprivate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isprivate(), target);
  }
  
  // repeated uint32 playerIds = 4 [packed = true];
  if (this->playerids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _playerids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->playerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->playerids(i), target);
  }
  
  // required uint32 adminPlayerId = 5;
  if (has_adminplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->adminplayerid(), target);
  }
  
  // required .NetGameInfo gameInfo = 6;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gameinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameListNewMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .NetGameMode gameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
    }
    
    // required bool isPrivate = 3;
    if (has_isprivate()) {
      total_size += 1 + 1;
    }
    
    // required uint32 adminPlayerId = 5;
    if (has_adminplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adminplayerid());
    }
    
    // required .NetGameInfo gameInfo = 6;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
  }
  // repeated uint32 playerIds = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _playerids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListNewMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameListNewMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameListNewMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameListNewMessage::MergeFrom(const GameListNewMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerids_.MergeFrom(from.playerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_isprivate()) {
      set_isprivate(from.isprivate());
    }
    if (from.has_adminplayerid()) {
      set_adminplayerid(from.adminplayerid());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameListNewMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListNewMessage::CopyFrom(const GameListNewMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListNewMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  return true;
}

void GameListNewMessage::Swap(GameListNewMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(isprivate_, other->isprivate_);
    playerids_.Swap(&other->playerids_);
    std::swap(adminplayerid_, other->adminplayerid_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameListNewMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameListNewMessage_descriptor_;
  metadata.reflection = GameListNewMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameListUpdateMessage::kGameIdFieldNumber;
const int GameListUpdateMessage::kGameModeFieldNumber;
#endif  // !_MSC_VER

GameListUpdateMessage::GameListUpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameListUpdateMessage::InitAsDefaultInstance() {
}

GameListUpdateMessage::GameListUpdateMessage(const GameListUpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameListUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  gamemode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListUpdateMessage::~GameListUpdateMessage() {
  SharedDtor();
}

void GameListUpdateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameListUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameListUpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameListUpdateMessage_descriptor_;
}

const GameListUpdateMessage& GameListUpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameListUpdateMessage* GameListUpdateMessage::default_instance_ = NULL;

GameListUpdateMessage* GameListUpdateMessage::New() const {
  return new GameListUpdateMessage;
}

void GameListUpdateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    gamemode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameListUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameMode;
        break;
      }
      
      // required .NetGameMode gameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameMode_IsValid(value)) {
            set_gamemode(static_cast< NetGameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameListUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamemode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameListUpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .NetGameMode gameMode = 2;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gamemode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameListUpdateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .NetGameMode gameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameListUpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameListUpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameListUpdateMessage::MergeFrom(const GameListUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameListUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListUpdateMessage::CopyFrom(const GameListUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameListUpdateMessage::Swap(GameListUpdateMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameListUpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameListUpdateMessage_descriptor_;
  metadata.reflection = GameListUpdateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameListPlayerJoinedMessage::kGameIdFieldNumber;
const int GameListPlayerJoinedMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameListPlayerJoinedMessage::InitAsDefaultInstance() {
}

GameListPlayerJoinedMessage::GameListPlayerJoinedMessage(const GameListPlayerJoinedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameListPlayerJoinedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListPlayerJoinedMessage::~GameListPlayerJoinedMessage() {
  SharedDtor();
}

void GameListPlayerJoinedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameListPlayerJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameListPlayerJoinedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameListPlayerJoinedMessage_descriptor_;
}

const GameListPlayerJoinedMessage& GameListPlayerJoinedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameListPlayerJoinedMessage* GameListPlayerJoinedMessage::default_instance_ = NULL;

GameListPlayerJoinedMessage* GameListPlayerJoinedMessage::New() const {
  return new GameListPlayerJoinedMessage;
}

void GameListPlayerJoinedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameListPlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameListPlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameListPlayerJoinedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameListPlayerJoinedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListPlayerJoinedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameListPlayerJoinedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameListPlayerJoinedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameListPlayerJoinedMessage::MergeFrom(const GameListPlayerJoinedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameListPlayerJoinedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListPlayerJoinedMessage::CopyFrom(const GameListPlayerJoinedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameListPlayerJoinedMessage::Swap(GameListPlayerJoinedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameListPlayerJoinedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameListPlayerJoinedMessage_descriptor_;
  metadata.reflection = GameListPlayerJoinedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameListPlayerLeftMessage::kGameIdFieldNumber;
const int GameListPlayerLeftMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

GameListPlayerLeftMessage::GameListPlayerLeftMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameListPlayerLeftMessage::InitAsDefaultInstance() {
}

GameListPlayerLeftMessage::GameListPlayerLeftMessage(const GameListPlayerLeftMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameListPlayerLeftMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListPlayerLeftMessage::~GameListPlayerLeftMessage() {
  SharedDtor();
}

void GameListPlayerLeftMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameListPlayerLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameListPlayerLeftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameListPlayerLeftMessage_descriptor_;
}

const GameListPlayerLeftMessage& GameListPlayerLeftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameListPlayerLeftMessage* GameListPlayerLeftMessage::default_instance_ = NULL;

GameListPlayerLeftMessage* GameListPlayerLeftMessage::New() const {
  return new GameListPlayerLeftMessage;
}

void GameListPlayerLeftMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameListPlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameListPlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameListPlayerLeftMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameListPlayerLeftMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListPlayerLeftMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameListPlayerLeftMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameListPlayerLeftMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameListPlayerLeftMessage::MergeFrom(const GameListPlayerLeftMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameListPlayerLeftMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListPlayerLeftMessage::CopyFrom(const GameListPlayerLeftMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListPlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameListPlayerLeftMessage::Swap(GameListPlayerLeftMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameListPlayerLeftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameListPlayerLeftMessage_descriptor_;
  metadata.reflection = GameListPlayerLeftMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameListAdminChangedMessage::kGameIdFieldNumber;
const int GameListAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !_MSC_VER

GameListAdminChangedMessage::GameListAdminChangedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameListAdminChangedMessage::InitAsDefaultInstance() {
}

GameListAdminChangedMessage::GameListAdminChangedMessage(const GameListAdminChangedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameListAdminChangedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  newadminplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameListAdminChangedMessage::~GameListAdminChangedMessage() {
  SharedDtor();
}

void GameListAdminChangedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameListAdminChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameListAdminChangedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameListAdminChangedMessage_descriptor_;
}

const GameListAdminChangedMessage& GameListAdminChangedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameListAdminChangedMessage* GameListAdminChangedMessage::default_instance_ = NULL;

GameListAdminChangedMessage* GameListAdminChangedMessage::New() const {
  return new GameListAdminChangedMessage;
}

void GameListAdminChangedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    newadminplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameListAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newAdminPlayerId;
        break;
      }
      
      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newAdminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
          set_has_newadminplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameListAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameListAdminChangedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newadminplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameListAdminChangedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 newAdminPlayerId = 2;
    if (has_newadminplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newadminplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameListAdminChangedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameListAdminChangedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameListAdminChangedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameListAdminChangedMessage::MergeFrom(const GameListAdminChangedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_newadminplayerid()) {
      set_newadminplayerid(from.newadminplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameListAdminChangedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameListAdminChangedMessage::CopyFrom(const GameListAdminChangedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameListAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameListAdminChangedMessage::Swap(GameListAdminChangedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(newadminplayerid_, other->newadminplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameListAdminChangedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameListAdminChangedMessage_descriptor_;
  metadata.reflection = GameListAdminChangedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoRequestMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

PlayerInfoRequestMessage::PlayerInfoRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoRequestMessage::InitAsDefaultInstance() {
}

PlayerInfoRequestMessage::PlayerInfoRequestMessage(const PlayerInfoRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoRequestMessage::~PlayerInfoRequestMessage() {
  SharedDtor();
}

void PlayerInfoRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfoRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRequestMessage_descriptor_;
}

const PlayerInfoRequestMessage& PlayerInfoRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerInfoRequestMessage* PlayerInfoRequestMessage::default_instance_ = NULL;

PlayerInfoRequestMessage* PlayerInfoRequestMessage::New() const {
  return new PlayerInfoRequestMessage;
}

void PlayerInfoRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoRequestMessage::MergeFrom(const PlayerInfoRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoRequestMessage::CopyFrom(const PlayerInfoRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerInfoRequestMessage::Swap(PlayerInfoRequestMessage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoRequestMessage_descriptor_;
  metadata.reflection = PlayerInfoRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarTypeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::kAvatarHashFieldNumber;
#endif  // !_MSC_VER

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::InitAsDefaultInstance() {
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::PlayerInfoReplyMessage_PlayerInfoData_AvatarData(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedCtor() {
  _cached_size_ = 0;
  avatartype_ = 0;
  avatarhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData::~PlayerInfoReplyMessage_PlayerInfoData_AvatarData() {
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SharedDtor() {
  if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarhash_;
  }
  if (this != default_instance_) {
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_;
}

const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance_ = NULL;

PlayerInfoReplyMessage_PlayerInfoData_AvatarData* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::New() const {
  return new PlayerInfoReplyMessage_PlayerInfoData_AvatarData;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    avatartype_ = 0;
    if (has_avatarhash()) {
      if (avatarhash_ != &::google::protobuf::internal::kEmptyString) {
        avatarhash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetAvatarType avatarType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetAvatarType_IsValid(value)) {
            set_avatartype(static_cast< NetAvatarType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatarHash;
        break;
      }
      
      // required bytes avatarHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avatarhash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetAvatarType avatarType = 1;
  if (has_avatartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->avatartype(), output);
  }
  
  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->avatarhash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoReplyMessage_PlayerInfoData_AvatarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NetAvatarType avatarType = 1;
  if (has_avatartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->avatartype(), target);
  }
  
  // required bytes avatarHash = 2;
  if (has_avatarhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->avatarhash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoReplyMessage_PlayerInfoData_AvatarData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetAvatarType avatarType = 1;
    if (has_avatartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->avatartype());
    }
    
    // required bytes avatarHash = 2;
    if (has_avatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avatarhash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoReplyMessage_PlayerInfoData_AvatarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avatartype()) {
      set_avatartype(from.avatartype());
    }
    if (from.has_avatarhash()) {
      set_avatarhash(from.avatarhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData_AvatarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData_AvatarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Swap(PlayerInfoReplyMessage_PlayerInfoData_AvatarData* other) {
  if (other != this) {
    std::swap(avatartype_, other->avatartype_);
    std::swap(avatarhash_, other->avatarhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoReplyMessage_PlayerInfoData_AvatarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoReplyMessage_PlayerInfoData_AvatarData_descriptor_;
  metadata.reflection = PlayerInfoReplyMessage_PlayerInfoData_AvatarData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerNameFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kIsHumanFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kPlayerRightsFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kCountryCodeFieldNumber;
const int PlayerInfoReplyMessage_PlayerInfoData::kAvatarDataFieldNumber;
#endif  // !_MSC_VER

PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoReplyMessage_PlayerInfoData::InitAsDefaultInstance() {
  avatardata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData_AvatarData*>(&::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::default_instance());
}

PlayerInfoReplyMessage_PlayerInfoData::PlayerInfoReplyMessage_PlayerInfoData(const PlayerInfoReplyMessage_PlayerInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishuman_ = false;
  playerrights_ = 1;
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatardata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage_PlayerInfoData::~PlayerInfoReplyMessage_PlayerInfoData() {
  SharedDtor();
}

void PlayerInfoReplyMessage_PlayerInfoData::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (this != default_instance_) {
    delete avatardata_;
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage_PlayerInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoReplyMessage_PlayerInfoData_descriptor_;
}

const PlayerInfoReplyMessage_PlayerInfoData& PlayerInfoReplyMessage_PlayerInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage_PlayerInfoData::default_instance_ = NULL;

PlayerInfoReplyMessage_PlayerInfoData* PlayerInfoReplyMessage_PlayerInfoData::New() const {
  return new PlayerInfoReplyMessage_PlayerInfoData;
}

void PlayerInfoReplyMessage_PlayerInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    ishuman_ = false;
    playerrights_ = 1;
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
    if (has_avatardata()) {
      if (avatardata_ != NULL) avatardata_->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoReplyMessage_PlayerInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playerName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isHuman;
        break;
      }
      
      // required bool isHuman = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHuman:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishuman_)));
          set_has_ishuman();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerRights;
        break;
      }
      
      // required .PlayerInfoRights playerRights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerRights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PlayerInfoRights_IsValid(value)) {
            set_playerrights(static_cast< PlayerInfoRights >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_countryCode;
        break;
      }
      
      // optional string countryCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatarData;
        break;
      }
      
      // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatardata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoReplyMessage_PlayerInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }
  
  // required bool isHuman = 2;
  if (has_ishuman()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ishuman(), output);
  }
  
  // required .PlayerInfoRights playerRights = 3;
  if (has_playerrights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrights(), output);
  }
  
  // optional string countryCode = 4;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->countrycode(), output);
  }
  
  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (has_avatardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->avatardata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoReplyMessage_PlayerInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playerName = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }
  
  // required bool isHuman = 2;
  if (has_ishuman()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ishuman(), target);
  }
  
  // required .PlayerInfoRights playerRights = 3;
  if (has_playerrights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->playerrights(), target);
  }
  
  // optional string countryCode = 4;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->countrycode(), target);
  }
  
  // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
  if (has_avatardata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->avatardata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoReplyMessage_PlayerInfoData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playerName = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }
    
    // required bool isHuman = 2;
    if (has_ishuman()) {
      total_size += 1 + 1;
    }
    
    // required .PlayerInfoRights playerRights = 3;
    if (has_playerrights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrights());
    }
    
    // optional string countryCode = 4;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }
    
    // optional .PlayerInfoReplyMessage.PlayerInfoData.AvatarData avatarData = 5;
    if (has_avatardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatardata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoReplyMessage_PlayerInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoReplyMessage_PlayerInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_ishuman()) {
      set_ishuman(from.ishuman());
    }
    if (from.has_playerrights()) {
      set_playerrights(from.playerrights());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_avatardata()) {
      mutable_avatardata()->::PlayerInfoReplyMessage_PlayerInfoData_AvatarData::MergeFrom(from.avatardata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoReplyMessage_PlayerInfoData::CopyFrom(const PlayerInfoReplyMessage_PlayerInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage_PlayerInfoData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_avatardata()) {
    if (!this->avatardata().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage_PlayerInfoData::Swap(PlayerInfoReplyMessage_PlayerInfoData* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(ishuman_, other->ishuman_);
    std::swap(playerrights_, other->playerrights_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(avatardata_, other->avatardata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoReplyMessage_PlayerInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoReplyMessage_PlayerInfoData_descriptor_;
  metadata.reflection = PlayerInfoReplyMessage_PlayerInfoData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PlayerInfoReplyMessage::kPlayerIdFieldNumber;
const int PlayerInfoReplyMessage::kPlayerInfoDataFieldNumber;
#endif  // !_MSC_VER

PlayerInfoReplyMessage::PlayerInfoReplyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfoReplyMessage::InitAsDefaultInstance() {
  playerinfodata_ = const_cast< ::PlayerInfoReplyMessage_PlayerInfoData*>(&::PlayerInfoReplyMessage_PlayerInfoData::default_instance());
}

PlayerInfoReplyMessage::PlayerInfoReplyMessage(const PlayerInfoReplyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfoReplyMessage::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playerinfodata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReplyMessage::~PlayerInfoReplyMessage() {
  SharedDtor();
}

void PlayerInfoReplyMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfodata_;
  }
}

void PlayerInfoReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoReplyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoReplyMessage_descriptor_;
}

const PlayerInfoReplyMessage& PlayerInfoReplyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerInfoReplyMessage* PlayerInfoReplyMessage::default_instance_ = NULL;

PlayerInfoReplyMessage* PlayerInfoReplyMessage::New() const {
  return new PlayerInfoReplyMessage;
}

void PlayerInfoReplyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playerinfodata()) {
      if (playerinfodata_ != NULL) playerinfodata_->::PlayerInfoReplyMessage_PlayerInfoData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfoReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfoData;
        break;
      }
      
      // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfoReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (has_playerinfodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfodata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfoReplyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
  if (has_playerinfodata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfodata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfoReplyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // optional .PlayerInfoReplyMessage.PlayerInfoData playerInfoData = 2;
    if (has_playerinfodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfodata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReplyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfoReplyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfoReplyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfoReplyMessage::MergeFrom(const PlayerInfoReplyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerinfodata()) {
      mutable_playerinfodata()->::PlayerInfoReplyMessage_PlayerInfoData::MergeFrom(from.playerinfodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfoReplyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoReplyMessage::CopyFrom(const PlayerInfoReplyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_playerinfodata()) {
    if (!this->playerinfodata().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfoReplyMessage::Swap(PlayerInfoReplyMessage* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playerinfodata_, other->playerinfodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfoReplyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoReplyMessage_descriptor_;
  metadata.reflection = PlayerInfoReplyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SubscriptionRequestMessage_SubscriptionAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequestMessage_SubscriptionAction_descriptor_;
}
bool SubscriptionRequestMessage_SubscriptionAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::unsubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::resubscribeGameList;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MIN;
const SubscriptionRequestMessage_SubscriptionAction SubscriptionRequestMessage::SubscriptionAction_MAX;
const int SubscriptionRequestMessage::SubscriptionAction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SubscriptionRequestMessage::kSubscriptionActionFieldNumber;
#endif  // !_MSC_VER

SubscriptionRequestMessage::SubscriptionRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionRequestMessage::InitAsDefaultInstance() {
}

SubscriptionRequestMessage::SubscriptionRequestMessage(const SubscriptionRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  subscriptionaction_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionRequestMessage::~SubscriptionRequestMessage() {
  SharedDtor();
}

void SubscriptionRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequestMessage_descriptor_;
}

const SubscriptionRequestMessage& SubscriptionRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

SubscriptionRequestMessage* SubscriptionRequestMessage::default_instance_ = NULL;

SubscriptionRequestMessage* SubscriptionRequestMessage::New() const {
  return new SubscriptionRequestMessage;
}

void SubscriptionRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    subscriptionaction_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SubscriptionRequestMessage_SubscriptionAction_IsValid(value)) {
            set_subscriptionaction(static_cast< ::SubscriptionRequestMessage_SubscriptionAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (has_subscriptionaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->subscriptionaction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
  if (has_subscriptionaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->subscriptionaction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SubscriptionRequestMessage.SubscriptionAction subscriptionAction = 1;
    if (has_subscriptionaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscriptionaction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionRequestMessage::MergeFrom(const SubscriptionRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscriptionaction()) {
      set_subscriptionaction(from.subscriptionaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionRequestMessage::CopyFrom(const SubscriptionRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubscriptionRequestMessage::Swap(SubscriptionRequestMessage* other) {
  if (other != this) {
    std::swap(subscriptionaction_, other->subscriptionaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionRequestMessage_descriptor_;
  metadata.reflection = SubscriptionRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinExistingGameMessage::kGameIdFieldNumber;
const int JoinExistingGameMessage::kPasswordFieldNumber;
const int JoinExistingGameMessage::kAutoLeaveFieldNumber;
#endif  // !_MSC_VER

JoinExistingGameMessage::JoinExistingGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinExistingGameMessage::InitAsDefaultInstance() {
}

JoinExistingGameMessage::JoinExistingGameMessage(const JoinExistingGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinExistingGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autoleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinExistingGameMessage::~JoinExistingGameMessage() {
  SharedDtor();
}

void JoinExistingGameMessage::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void JoinExistingGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinExistingGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinExistingGameMessage_descriptor_;
}

const JoinExistingGameMessage& JoinExistingGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

JoinExistingGameMessage* JoinExistingGameMessage::default_instance_ = NULL;

JoinExistingGameMessage* JoinExistingGameMessage::New() const {
  return new JoinExistingGameMessage;
}

void JoinExistingGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    autoleave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoLeave;
        break;
      }
      
      // optional bool autoLeave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional bool autoLeave = 3;
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinExistingGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional bool autoLeave = 3;
  if (has_autoleave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autoleave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinExistingGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional bool autoLeave = 3;
    if (has_autoleave()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinExistingGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinExistingGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinExistingGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinExistingGameMessage::MergeFrom(const JoinExistingGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinExistingGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinExistingGameMessage::CopyFrom(const JoinExistingGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void JoinExistingGameMessage::Swap(JoinExistingGameMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(password_, other->password_);
    std::swap(autoleave_, other->autoleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinExistingGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinExistingGameMessage_descriptor_;
  metadata.reflection = JoinExistingGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinNewGameMessage::kGameInfoFieldNumber;
const int JoinNewGameMessage::kPasswordFieldNumber;
const int JoinNewGameMessage::kAutoLeaveFieldNumber;
#endif  // !_MSC_VER

JoinNewGameMessage::JoinNewGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinNewGameMessage::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
}

JoinNewGameMessage::JoinNewGameMessage(const JoinNewGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinNewGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameinfo_ = NULL;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autoleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinNewGameMessage::~JoinNewGameMessage() {
  SharedDtor();
}

void JoinNewGameMessage::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void JoinNewGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinNewGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinNewGameMessage_descriptor_;
}

const JoinNewGameMessage& JoinNewGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

JoinNewGameMessage* JoinNewGameMessage::default_instance_ = NULL;

JoinNewGameMessage* JoinNewGameMessage::New() const {
  return new JoinNewGameMessage;
}

void JoinNewGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    autoleave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinNewGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetGameInfo gameInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_autoLeave;
        break;
      }
      
      // optional bool autoLeave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinNewGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetGameInfo gameInfo = 1;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gameinfo(), output);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional bool autoLeave = 3;
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->autoleave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinNewGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NetGameInfo gameInfo = 1;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gameinfo(), target);
  }
  
  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional bool autoLeave = 3;
  if (has_autoleave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->autoleave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinNewGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetGameInfo gameInfo = 1;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional bool autoLeave = 3;
    if (has_autoleave()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinNewGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinNewGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinNewGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinNewGameMessage::MergeFrom(const JoinNewGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinNewGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinNewGameMessage::CopyFrom(const JoinNewGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinNewGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  return true;
}

void JoinNewGameMessage::Swap(JoinNewGameMessage* other) {
  if (other != this) {
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(password_, other->password_);
    std::swap(autoleave_, other->autoleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinNewGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinNewGameMessage_descriptor_;
  metadata.reflection = JoinNewGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RejoinExistingGameMessage::kGameIdFieldNumber;
const int RejoinExistingGameMessage::kAutoLeaveFieldNumber;
#endif  // !_MSC_VER

RejoinExistingGameMessage::RejoinExistingGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejoinExistingGameMessage::InitAsDefaultInstance() {
}

RejoinExistingGameMessage::RejoinExistingGameMessage(const RejoinExistingGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejoinExistingGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  autoleave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejoinExistingGameMessage::~RejoinExistingGameMessage() {
  SharedDtor();
}

void RejoinExistingGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RejoinExistingGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejoinExistingGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejoinExistingGameMessage_descriptor_;
}

const RejoinExistingGameMessage& RejoinExistingGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

RejoinExistingGameMessage* RejoinExistingGameMessage::default_instance_ = NULL;

RejoinExistingGameMessage* RejoinExistingGameMessage::New() const {
  return new RejoinExistingGameMessage;
}

void RejoinExistingGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    autoleave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejoinExistingGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_autoLeave;
        break;
      }
      
      // optional bool autoLeave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoleave_)));
          set_has_autoleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejoinExistingGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // optional bool autoLeave = 2;
  if (has_autoleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoleave(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejoinExistingGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // optional bool autoLeave = 2;
  if (has_autoleave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoleave(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejoinExistingGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // optional bool autoLeave = 2;
    if (has_autoleave()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejoinExistingGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejoinExistingGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejoinExistingGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejoinExistingGameMessage::MergeFrom(const RejoinExistingGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_autoleave()) {
      set_autoleave(from.autoleave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejoinExistingGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejoinExistingGameMessage::CopyFrom(const RejoinExistingGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejoinExistingGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RejoinExistingGameMessage::Swap(RejoinExistingGameMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(autoleave_, other->autoleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejoinExistingGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejoinExistingGameMessage_descriptor_;
  metadata.reflection = RejoinExistingGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinGameAckMessage::kGameIdFieldNumber;
const int JoinGameAckMessage::kAreYouGameAdminFieldNumber;
const int JoinGameAckMessage::kGameInfoFieldNumber;
#endif  // !_MSC_VER

JoinGameAckMessage::JoinGameAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGameAckMessage::InitAsDefaultInstance() {
  gameinfo_ = const_cast< ::NetGameInfo*>(&::NetGameInfo::default_instance());
}

JoinGameAckMessage::JoinGameAckMessage(const JoinGameAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGameAckMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  areyougameadmin_ = false;
  gameinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameAckMessage::~JoinGameAckMessage() {
  SharedDtor();
}

void JoinGameAckMessage::SharedDtor() {
  if (this != default_instance_) {
    delete gameinfo_;
  }
}

void JoinGameAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGameAckMessage_descriptor_;
}

const JoinGameAckMessage& JoinGameAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

JoinGameAckMessage* JoinGameAckMessage::default_instance_ = NULL;

JoinGameAckMessage* JoinGameAckMessage::New() const {
  return new JoinGameAckMessage;
}

void JoinGameAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    areyougameadmin_ = false;
    if (has_gameinfo()) {
      if (gameinfo_ != NULL) gameinfo_->::NetGameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areYouGameAdmin;
        break;
      }
      
      // required bool areYouGameAdmin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areYouGameAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &areyougameadmin_)));
          set_has_areyougameadmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gameInfo;
        break;
      }
      
      // required .NetGameInfo gameInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required bool areYouGameAdmin = 2;
  if (has_areyougameadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->areyougameadmin(), output);
  }
  
  // required .NetGameInfo gameInfo = 3;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gameinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGameAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required bool areYouGameAdmin = 2;
  if (has_areyougameadmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->areyougameadmin(), target);
  }
  
  // required .NetGameInfo gameInfo = 3;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gameinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGameAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required bool areYouGameAdmin = 2;
    if (has_areyougameadmin()) {
      total_size += 1 + 1;
    }
    
    // required .NetGameInfo gameInfo = 3;
    if (has_gameinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGameAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGameAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGameAckMessage::MergeFrom(const JoinGameAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_areyougameadmin()) {
      set_areyougameadmin(from.areyougameadmin());
    }
    if (from.has_gameinfo()) {
      mutable_gameinfo()->::NetGameInfo::MergeFrom(from.gameinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGameAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameAckMessage::CopyFrom(const JoinGameAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  return true;
}

void JoinGameAckMessage::Swap(JoinGameAckMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(areyougameadmin_, other->areyougameadmin_);
    std::swap(gameinfo_, other->gameinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGameAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGameAckMessage_descriptor_;
  metadata.reflection = JoinGameAckMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* JoinGameFailedMessage_JoinGameFailureReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGameFailedMessage_JoinGameFailureReason_descriptor_;
}
bool JoinGameFailedMessage_JoinGameFailureReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidGame;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsFull;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameIsRunning;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidPassword;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notAllowedAsGuest;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::notInvited;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::gameNameInUse;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::badGameName;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::invalidSettings;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::ipAddressBlocked;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::rejoinFailed;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MIN;
const JoinGameFailedMessage_JoinGameFailureReason JoinGameFailedMessage::JoinGameFailureReason_MAX;
const int JoinGameFailedMessage::JoinGameFailureReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int JoinGameFailedMessage::kGameIdFieldNumber;
const int JoinGameFailedMessage::kJoinGameFailureReasonFieldNumber;
#endif  // !_MSC_VER

JoinGameFailedMessage::JoinGameFailedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinGameFailedMessage::InitAsDefaultInstance() {
}

JoinGameFailedMessage::JoinGameFailedMessage(const JoinGameFailedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinGameFailedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  joingamefailurereason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinGameFailedMessage::~JoinGameFailedMessage() {
  SharedDtor();
}

void JoinGameFailedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinGameFailedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGameFailedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGameFailedMessage_descriptor_;
}

const JoinGameFailedMessage& JoinGameFailedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

JoinGameFailedMessage* JoinGameFailedMessage::default_instance_ = NULL;

JoinGameFailedMessage* JoinGameFailedMessage::New() const {
  return new JoinGameFailedMessage;
}

void JoinGameFailedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    joingamefailurereason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinGameFailedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_joinGameFailureReason;
        break;
      }
      
      // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinGameFailureReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JoinGameFailedMessage_JoinGameFailureReason_IsValid(value)) {
            set_joingamefailurereason(static_cast< ::JoinGameFailedMessage_JoinGameFailureReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinGameFailedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (has_joingamefailurereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->joingamefailurereason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinGameFailedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
  if (has_joingamefailurereason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->joingamefailurereason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinGameFailedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .JoinGameFailedMessage.JoinGameFailureReason joinGameFailureReason = 2;
    if (has_joingamefailurereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->joingamefailurereason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGameFailedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinGameFailedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinGameFailedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinGameFailedMessage::MergeFrom(const JoinGameFailedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_joingamefailurereason()) {
      set_joingamefailurereason(from.joingamefailurereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinGameFailedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameFailedMessage::CopyFrom(const JoinGameFailedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameFailedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void JoinGameFailedMessage::Swap(JoinGameFailedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(joingamefailurereason_, other->joingamefailurereason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinGameFailedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinGameFailedMessage_descriptor_;
  metadata.reflection = JoinGameFailedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamePlayerJoinedMessage::kGameIdFieldNumber;
const int GamePlayerJoinedMessage::kPlayerIdFieldNumber;
const int GamePlayerJoinedMessage::kIsGameAdminFieldNumber;
#endif  // !_MSC_VER

GamePlayerJoinedMessage::GamePlayerJoinedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerJoinedMessage::InitAsDefaultInstance() {
}

GamePlayerJoinedMessage::GamePlayerJoinedMessage(const GamePlayerJoinedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerJoinedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  isgameadmin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerJoinedMessage::~GamePlayerJoinedMessage() {
  SharedDtor();
}

void GamePlayerJoinedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerJoinedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerJoinedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerJoinedMessage_descriptor_;
}

const GamePlayerJoinedMessage& GamePlayerJoinedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GamePlayerJoinedMessage* GamePlayerJoinedMessage::default_instance_ = NULL;

GamePlayerJoinedMessage* GamePlayerJoinedMessage::New() const {
  return new GamePlayerJoinedMessage;
}

void GamePlayerJoinedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    isgameadmin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerJoinedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isGameAdmin;
        break;
      }
      
      // required bool isGameAdmin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGameAdmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgameadmin_)));
          set_has_isgameadmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerJoinedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required bool isGameAdmin = 3;
  if (has_isgameadmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isgameadmin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerJoinedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required bool isGameAdmin = 3;
  if (has_isgameadmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isgameadmin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerJoinedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required bool isGameAdmin = 3;
    if (has_isgameadmin()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerJoinedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerJoinedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerJoinedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerJoinedMessage::MergeFrom(const GamePlayerJoinedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isgameadmin()) {
      set_isgameadmin(from.isgameadmin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerJoinedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerJoinedMessage::CopyFrom(const GamePlayerJoinedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerJoinedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GamePlayerJoinedMessage::Swap(GamePlayerJoinedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(isgameadmin_, other->isgameadmin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerJoinedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerJoinedMessage_descriptor_;
  metadata.reflection = GamePlayerJoinedMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GamePlayerLeftMessage_GamePlayerLeftReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerLeftMessage_GamePlayerLeftReason_descriptor_;
}
bool GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftOnRequest;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftKicked;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::leftError;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MIN;
const GamePlayerLeftMessage_GamePlayerLeftReason GamePlayerLeftMessage::GamePlayerLeftReason_MAX;
const int GamePlayerLeftMessage::GamePlayerLeftReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GamePlayerLeftMessage::kGameIdFieldNumber;
const int GamePlayerLeftMessage::kPlayerIdFieldNumber;
const int GamePlayerLeftMessage::kGamePlayerLeftReasonFieldNumber;
#endif  // !_MSC_VER

GamePlayerLeftMessage::GamePlayerLeftMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamePlayerLeftMessage::InitAsDefaultInstance() {
}

GamePlayerLeftMessage::GamePlayerLeftMessage(const GamePlayerLeftMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamePlayerLeftMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  gameplayerleftreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePlayerLeftMessage::~GamePlayerLeftMessage() {
  SharedDtor();
}

void GamePlayerLeftMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamePlayerLeftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePlayerLeftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePlayerLeftMessage_descriptor_;
}

const GamePlayerLeftMessage& GamePlayerLeftMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GamePlayerLeftMessage* GamePlayerLeftMessage::default_instance_ = NULL;

GamePlayerLeftMessage* GamePlayerLeftMessage::New() const {
  return new GamePlayerLeftMessage;
}

void GamePlayerLeftMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    gameplayerleftreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePlayerLeftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamePlayerLeftReason;
        break;
      }
      
      // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamePlayerLeftReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GamePlayerLeftMessage_GamePlayerLeftReason_IsValid(value)) {
            set_gameplayerleftreason(static_cast< ::GamePlayerLeftMessage_GamePlayerLeftReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamePlayerLeftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
  if (has_gameplayerleftreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gameplayerleftreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamePlayerLeftMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
  if (has_gameplayerleftreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gameplayerleftreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamePlayerLeftMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .GamePlayerLeftMessage.GamePlayerLeftReason gamePlayerLeftReason = 3;
    if (has_gameplayerleftreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gameplayerleftreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePlayerLeftMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePlayerLeftMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePlayerLeftMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePlayerLeftMessage::MergeFrom(const GamePlayerLeftMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gameplayerleftreason()) {
      set_gameplayerleftreason(from.gameplayerleftreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePlayerLeftMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePlayerLeftMessage::CopyFrom(const GamePlayerLeftMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePlayerLeftMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GamePlayerLeftMessage::Swap(GamePlayerLeftMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(gameplayerleftreason_, other->gameplayerleftreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePlayerLeftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePlayerLeftMessage_descriptor_;
  metadata.reflection = GamePlayerLeftMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAdminChangedMessage::kGameIdFieldNumber;
const int GameAdminChangedMessage::kNewAdminPlayerIdFieldNumber;
#endif  // !_MSC_VER

GameAdminChangedMessage::GameAdminChangedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameAdminChangedMessage::InitAsDefaultInstance() {
}

GameAdminChangedMessage::GameAdminChangedMessage(const GameAdminChangedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameAdminChangedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  newadminplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAdminChangedMessage::~GameAdminChangedMessage() {
  SharedDtor();
}

void GameAdminChangedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAdminChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAdminChangedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAdminChangedMessage_descriptor_;
}

const GameAdminChangedMessage& GameAdminChangedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameAdminChangedMessage* GameAdminChangedMessage::default_instance_ = NULL;

GameAdminChangedMessage* GameAdminChangedMessage::New() const {
  return new GameAdminChangedMessage;
}

void GameAdminChangedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    newadminplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAdminChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newAdminPlayerId;
        break;
      }
      
      // required uint32 newAdminPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newAdminPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newadminplayerid_)));
          set_has_newadminplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameAdminChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newadminplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameAdminChangedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 newAdminPlayerId = 2;
  if (has_newadminplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newadminplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameAdminChangedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 newAdminPlayerId = 2;
    if (has_newadminplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newadminplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAdminChangedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAdminChangedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAdminChangedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAdminChangedMessage::MergeFrom(const GameAdminChangedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_newadminplayerid()) {
      set_newadminplayerid(from.newadminplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAdminChangedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAdminChangedMessage::CopyFrom(const GameAdminChangedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAdminChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameAdminChangedMessage::Swap(GameAdminChangedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(newadminplayerid_, other->newadminplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAdminChangedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAdminChangedMessage_descriptor_;
  metadata.reflection = GameAdminChangedMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RemovedFromGameMessage_RemovedFromGameReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovedFromGameMessage_RemovedFromGameReason_descriptor_;
}
bool RemovedFromGameMessage_RemovedFromGameReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedOnRequest;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::kickedFromGame;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsFull;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameIsRunning;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::gameTimeout;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::removedStartFailed;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MIN;
const RemovedFromGameMessage_RemovedFromGameReason RemovedFromGameMessage::RemovedFromGameReason_MAX;
const int RemovedFromGameMessage::RemovedFromGameReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RemovedFromGameMessage::kGameIdFieldNumber;
const int RemovedFromGameMessage::kRemovedFromGameReasonFieldNumber;
#endif  // !_MSC_VER

RemovedFromGameMessage::RemovedFromGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemovedFromGameMessage::InitAsDefaultInstance() {
}

RemovedFromGameMessage::RemovedFromGameMessage(const RemovedFromGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemovedFromGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  removedfromgamereason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemovedFromGameMessage::~RemovedFromGameMessage() {
  SharedDtor();
}

void RemovedFromGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemovedFromGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovedFromGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemovedFromGameMessage_descriptor_;
}

const RemovedFromGameMessage& RemovedFromGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

RemovedFromGameMessage* RemovedFromGameMessage::default_instance_ = NULL;

RemovedFromGameMessage* RemovedFromGameMessage::New() const {
  return new RemovedFromGameMessage;
}

void RemovedFromGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    removedfromgamereason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemovedFromGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_removedFromGameReason;
        break;
      }
      
      // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_removedFromGameReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RemovedFromGameMessage_RemovedFromGameReason_IsValid(value)) {
            set_removedfromgamereason(static_cast< ::RemovedFromGameMessage_RemovedFromGameReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemovedFromGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
  if (has_removedfromgamereason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->removedfromgamereason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemovedFromGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
  if (has_removedfromgamereason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->removedfromgamereason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemovedFromGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .RemovedFromGameMessage.RemovedFromGameReason removedFromGameReason = 2;
    if (has_removedfromgamereason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->removedfromgamereason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovedFromGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemovedFromGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemovedFromGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemovedFromGameMessage::MergeFrom(const RemovedFromGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_removedfromgamereason()) {
      set_removedfromgamereason(from.removedfromgamereason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemovedFromGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovedFromGameMessage::CopyFrom(const RemovedFromGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovedFromGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RemovedFromGameMessage::Swap(RemovedFromGameMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(removedfromgamereason_, other->removedfromgamereason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemovedFromGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemovedFromGameMessage_descriptor_;
  metadata.reflection = RemovedFromGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPlayerRequestMessage::kGameIdFieldNumber;
const int KickPlayerRequestMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

KickPlayerRequestMessage::KickPlayerRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPlayerRequestMessage::InitAsDefaultInstance() {
}

KickPlayerRequestMessage::KickPlayerRequestMessage(const KickPlayerRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPlayerRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPlayerRequestMessage::~KickPlayerRequestMessage() {
  SharedDtor();
}

void KickPlayerRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPlayerRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPlayerRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPlayerRequestMessage_descriptor_;
}

const KickPlayerRequestMessage& KickPlayerRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

KickPlayerRequestMessage* KickPlayerRequestMessage::default_instance_ = NULL;

KickPlayerRequestMessage* KickPlayerRequestMessage::New() const {
  return new KickPlayerRequestMessage;
}

void KickPlayerRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPlayerRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPlayerRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPlayerRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPlayerRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPlayerRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPlayerRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPlayerRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPlayerRequestMessage::MergeFrom(const KickPlayerRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPlayerRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPlayerRequestMessage::CopyFrom(const KickPlayerRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KickPlayerRequestMessage::Swap(KickPlayerRequestMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPlayerRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPlayerRequestMessage_descriptor_;
  metadata.reflection = KickPlayerRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveGameRequestMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

LeaveGameRequestMessage::LeaveGameRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveGameRequestMessage::InitAsDefaultInstance() {
}

LeaveGameRequestMessage::LeaveGameRequestMessage(const LeaveGameRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveGameRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveGameRequestMessage::~LeaveGameRequestMessage() {
  SharedDtor();
}

void LeaveGameRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveGameRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveGameRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveGameRequestMessage_descriptor_;
}

const LeaveGameRequestMessage& LeaveGameRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

LeaveGameRequestMessage* LeaveGameRequestMessage::default_instance_ = NULL;

LeaveGameRequestMessage* LeaveGameRequestMessage::New() const {
  return new LeaveGameRequestMessage;
}

void LeaveGameRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveGameRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveGameRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveGameRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveGameRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveGameRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveGameRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveGameRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveGameRequestMessage::MergeFrom(const LeaveGameRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveGameRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveGameRequestMessage::CopyFrom(const LeaveGameRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGameRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LeaveGameRequestMessage::Swap(LeaveGameRequestMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveGameRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveGameRequestMessage_descriptor_;
  metadata.reflection = LeaveGameRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitePlayerToGameMessage::kGameIdFieldNumber;
const int InvitePlayerToGameMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

InvitePlayerToGameMessage::InvitePlayerToGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitePlayerToGameMessage::InitAsDefaultInstance() {
}

InvitePlayerToGameMessage::InvitePlayerToGameMessage(const InvitePlayerToGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitePlayerToGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitePlayerToGameMessage::~InvitePlayerToGameMessage() {
  SharedDtor();
}

void InvitePlayerToGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitePlayerToGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitePlayerToGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitePlayerToGameMessage_descriptor_;
}

const InvitePlayerToGameMessage& InvitePlayerToGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

InvitePlayerToGameMessage* InvitePlayerToGameMessage::default_instance_ = NULL;

InvitePlayerToGameMessage* InvitePlayerToGameMessage::New() const {
  return new InvitePlayerToGameMessage;
}

void InvitePlayerToGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitePlayerToGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitePlayerToGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitePlayerToGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitePlayerToGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitePlayerToGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitePlayerToGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitePlayerToGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitePlayerToGameMessage::MergeFrom(const InvitePlayerToGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitePlayerToGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitePlayerToGameMessage::CopyFrom(const InvitePlayerToGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePlayerToGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void InvitePlayerToGameMessage::Swap(InvitePlayerToGameMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitePlayerToGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitePlayerToGameMessage_descriptor_;
  metadata.reflection = InvitePlayerToGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteNotifyMessage::kGameIdFieldNumber;
const int InviteNotifyMessage::kPlayerIdWhoFieldNumber;
const int InviteNotifyMessage::kPlayerIdByWhomFieldNumber;
#endif  // !_MSC_VER

InviteNotifyMessage::InviteNotifyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteNotifyMessage::InitAsDefaultInstance() {
}

InviteNotifyMessage::InviteNotifyMessage(const InviteNotifyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteNotifyMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playeridwho_ = 0u;
  playeridbywhom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteNotifyMessage::~InviteNotifyMessage() {
  SharedDtor();
}

void InviteNotifyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteNotifyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteNotifyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteNotifyMessage_descriptor_;
}

const InviteNotifyMessage& InviteNotifyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

InviteNotifyMessage* InviteNotifyMessage::default_instance_ = NULL;

InviteNotifyMessage* InviteNotifyMessage::New() const {
  return new InviteNotifyMessage;
}

void InviteNotifyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playeridwho_ = 0u;
    playeridbywhom_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerIdWho;
        break;
      }
      
      // required uint32 playerIdWho = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdWho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridwho_)));
          set_has_playeridwho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerIdByWhom;
        break;
      }
      
      // required uint32 playerIdByWhom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerIdByWhom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeridbywhom_)));
          set_has_playeridbywhom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerIdWho = 2;
  if (has_playeridwho()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playeridwho(), output);
  }
  
  // required uint32 playerIdByWhom = 3;
  if (has_playeridbywhom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playeridbywhom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteNotifyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerIdWho = 2;
  if (has_playeridwho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playeridwho(), target);
  }
  
  // required uint32 playerIdByWhom = 3;
  if (has_playeridbywhom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playeridbywhom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteNotifyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerIdWho = 2;
    if (has_playeridwho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playeridwho());
    }
    
    // required uint32 playerIdByWhom = 3;
    if (has_playeridbywhom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playeridbywhom());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteNotifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteNotifyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteNotifyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteNotifyMessage::MergeFrom(const InviteNotifyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playeridwho()) {
      set_playeridwho(from.playeridwho());
    }
    if (from.has_playeridbywhom()) {
      set_playeridbywhom(from.playeridbywhom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteNotifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteNotifyMessage::CopyFrom(const InviteNotifyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void InviteNotifyMessage::Swap(InviteNotifyMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playeridwho_, other->playeridwho_);
    std::swap(playeridbywhom_, other->playeridbywhom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteNotifyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteNotifyMessage_descriptor_;
  metadata.reflection = InviteNotifyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RejectGameInvitationMessage_RejectGameInvReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectGameInvitationMessage_RejectGameInvReason_descriptor_;
}
bool RejectGameInvitationMessage_RejectGameInvReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonNo;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::rejectReasonBusy;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MIN;
const RejectGameInvitationMessage_RejectGameInvReason RejectGameInvitationMessage::RejectGameInvReason_MAX;
const int RejectGameInvitationMessage::RejectGameInvReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RejectGameInvitationMessage::kGameIdFieldNumber;
const int RejectGameInvitationMessage::kMyRejectReasonFieldNumber;
#endif  // !_MSC_VER

RejectGameInvitationMessage::RejectGameInvitationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectGameInvitationMessage::InitAsDefaultInstance() {
}

RejectGameInvitationMessage::RejectGameInvitationMessage(const RejectGameInvitationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectGameInvitationMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  myrejectreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectGameInvitationMessage::~RejectGameInvitationMessage() {
  SharedDtor();
}

void RejectGameInvitationMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RejectGameInvitationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectGameInvitationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectGameInvitationMessage_descriptor_;
}

const RejectGameInvitationMessage& RejectGameInvitationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

RejectGameInvitationMessage* RejectGameInvitationMessage::default_instance_ = NULL;

RejectGameInvitationMessage* RejectGameInvitationMessage::New() const {
  return new RejectGameInvitationMessage;
}

void RejectGameInvitationMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    myrejectreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectGameInvitationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myRejectReason;
        break;
      }
      
      // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRejectReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_myrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectGameInvitationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (has_myrejectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->myrejectreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectGameInvitationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
  if (has_myrejectreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->myrejectreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectGameInvitationMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .RejectGameInvitationMessage.RejectGameInvReason myRejectReason = 2;
    if (has_myrejectreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->myrejectreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectGameInvitationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectGameInvitationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectGameInvitationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectGameInvitationMessage::MergeFrom(const RejectGameInvitationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_myrejectreason()) {
      set_myrejectreason(from.myrejectreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectGameInvitationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectGameInvitationMessage::CopyFrom(const RejectGameInvitationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectGameInvitationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RejectGameInvitationMessage::Swap(RejectGameInvitationMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(myrejectreason_, other->myrejectreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectGameInvitationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectGameInvitationMessage_descriptor_;
  metadata.reflection = RejectGameInvitationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RejectInvNotifyMessage::kGameIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerIdFieldNumber;
const int RejectInvNotifyMessage::kPlayerRejectReasonFieldNumber;
#endif  // !_MSC_VER

RejectInvNotifyMessage::RejectInvNotifyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectInvNotifyMessage::InitAsDefaultInstance() {
}

RejectInvNotifyMessage::RejectInvNotifyMessage(const RejectInvNotifyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectInvNotifyMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  playerrejectreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectInvNotifyMessage::~RejectInvNotifyMessage() {
  SharedDtor();
}

void RejectInvNotifyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RejectInvNotifyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectInvNotifyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectInvNotifyMessage_descriptor_;
}

const RejectInvNotifyMessage& RejectInvNotifyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

RejectInvNotifyMessage* RejectInvNotifyMessage::default_instance_ = NULL;

RejectInvNotifyMessage* RejectInvNotifyMessage::New() const {
  return new RejectInvNotifyMessage;
}

void RejectInvNotifyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    playerrejectreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectInvNotifyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerRejectReason;
        break;
      }
      
      // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerRejectReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RejectGameInvitationMessage_RejectGameInvReason_IsValid(value)) {
            set_playerrejectreason(static_cast< ::RejectGameInvitationMessage_RejectGameInvReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectInvNotifyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (has_playerrejectreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->playerrejectreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectInvNotifyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
  if (has_playerrejectreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->playerrejectreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectInvNotifyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .RejectGameInvitationMessage.RejectGameInvReason playerRejectReason = 3;
    if (has_playerrejectreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerrejectreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectInvNotifyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectInvNotifyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectInvNotifyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectInvNotifyMessage::MergeFrom(const RejectInvNotifyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerrejectreason()) {
      set_playerrejectreason(from.playerrejectreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectInvNotifyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectInvNotifyMessage::CopyFrom(const RejectInvNotifyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectInvNotifyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RejectInvNotifyMessage::Swap(RejectInvNotifyMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(playerrejectreason_, other->playerrejectreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectInvNotifyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectInvNotifyMessage_descriptor_;
  metadata.reflection = RejectInvNotifyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StartEventMessage_StartEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartEventMessage_StartEventType_descriptor_;
}
bool StartEventMessage_StartEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StartEventMessage_StartEventType StartEventMessage::startEvent;
const StartEventMessage_StartEventType StartEventMessage::rejoinEvent;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MIN;
const StartEventMessage_StartEventType StartEventMessage::StartEventType_MAX;
const int StartEventMessage::StartEventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StartEventMessage::kGameIdFieldNumber;
const int StartEventMessage::kStartEventTypeFieldNumber;
const int StartEventMessage::kFillWithComputerPlayersFieldNumber;
#endif  // !_MSC_VER

StartEventMessage::StartEventMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartEventMessage::InitAsDefaultInstance() {
}

StartEventMessage::StartEventMessage(const StartEventMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartEventMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  starteventtype_ = 0;
  fillwithcomputerplayers_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEventMessage::~StartEventMessage() {
  SharedDtor();
}

void StartEventMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartEventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartEventMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartEventMessage_descriptor_;
}

const StartEventMessage& StartEventMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

StartEventMessage* StartEventMessage::default_instance_ = NULL;

StartEventMessage* StartEventMessage::New() const {
  return new StartEventMessage;
}

void StartEventMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    starteventtype_ = 0;
    fillwithcomputerplayers_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startEventType;
        break;
      }
      
      // required .StartEventMessage.StartEventType startEventType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startEventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StartEventMessage_StartEventType_IsValid(value)) {
            set_starteventtype(static_cast< ::StartEventMessage_StartEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fillWithComputerPlayers;
        break;
      }
      
      // optional bool fillWithComputerPlayers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fillWithComputerPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fillwithcomputerplayers_)));
          set_has_fillwithcomputerplayers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .StartEventMessage.StartEventType startEventType = 2;
  if (has_starteventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->starteventtype(), output);
  }
  
  // optional bool fillWithComputerPlayers = 3;
  if (has_fillwithcomputerplayers()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fillwithcomputerplayers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartEventMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .StartEventMessage.StartEventType startEventType = 2;
  if (has_starteventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->starteventtype(), target);
  }
  
  // optional bool fillWithComputerPlayers = 3;
  if (has_fillwithcomputerplayers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fillwithcomputerplayers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartEventMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .StartEventMessage.StartEventType startEventType = 2;
    if (has_starteventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->starteventtype());
    }
    
    // optional bool fillWithComputerPlayers = 3;
    if (has_fillwithcomputerplayers()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEventMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartEventMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartEventMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartEventMessage::MergeFrom(const StartEventMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_starteventtype()) {
      set_starteventtype(from.starteventtype());
    }
    if (from.has_fillwithcomputerplayers()) {
      set_fillwithcomputerplayers(from.fillwithcomputerplayers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartEventMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartEventMessage::CopyFrom(const StartEventMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StartEventMessage::Swap(StartEventMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(starteventtype_, other->starteventtype_);
    std::swap(fillwithcomputerplayers_, other->fillwithcomputerplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartEventMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartEventMessage_descriptor_;
  metadata.reflection = StartEventMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartEventAckMessage::kGameIdFieldNumber;
#endif  // !_MSC_VER

StartEventAckMessage::StartEventAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartEventAckMessage::InitAsDefaultInstance() {
}

StartEventAckMessage::StartEventAckMessage(const StartEventAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartEventAckMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartEventAckMessage::~StartEventAckMessage() {
  SharedDtor();
}

void StartEventAckMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartEventAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartEventAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartEventAckMessage_descriptor_;
}

const StartEventAckMessage& StartEventAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

StartEventAckMessage* StartEventAckMessage::default_instance_ = NULL;

StartEventAckMessage* StartEventAckMessage::New() const {
  return new StartEventAckMessage;
}

void StartEventAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartEventAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartEventAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartEventAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartEventAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartEventAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartEventAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartEventAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartEventAckMessage::MergeFrom(const StartEventAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartEventAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartEventAckMessage::CopyFrom(const StartEventAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartEventAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StartEventAckMessage::Swap(StartEventAckMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartEventAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartEventAckMessage_descriptor_;
  metadata.reflection = StartEventAckMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStartInitialMessage::kGameIdFieldNumber;
const int GameStartInitialMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartInitialMessage::kPlayerSeatsFieldNumber;
#endif  // !_MSC_VER

GameStartInitialMessage::GameStartInitialMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStartInitialMessage::InitAsDefaultInstance() {
}

GameStartInitialMessage::GameStartInitialMessage(const GameStartInitialMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStartInitialMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  startdealerplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartInitialMessage::~GameStartInitialMessage() {
  SharedDtor();
}

void GameStartInitialMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStartInitialMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartInitialMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartInitialMessage_descriptor_;
}

const GameStartInitialMessage& GameStartInitialMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameStartInitialMessage* GameStartInitialMessage::default_instance_ = NULL;

GameStartInitialMessage* GameStartInitialMessage::New() const {
  return new GameStartInitialMessage;
}

void GameStartInitialMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    startdealerplayerid_ = 0u;
  }
  playerseats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartInitialMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startDealerPlayerId;
        break;
      }
      
      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDealerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
          set_has_startdealerplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerSeats;
        break;
      }
      
      // repeated uint32 playerSeats = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerSeats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerseats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_playerseats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStartInitialMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }
  
  // repeated uint32 playerSeats = 3 [packed = true];
  if (this->playerseats_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_playerseats_cached_byte_size_);
  }
  for (int i = 0; i < this->playerseats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->playerseats(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStartInitialMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startdealerplayerid(), target);
  }
  
  // repeated uint32 playerSeats = 3 [packed = true];
  if (this->playerseats_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _playerseats_cached_byte_size_, target);
  }
  for (int i = 0; i < this->playerseats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->playerseats(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStartInitialMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 startDealerPlayerId = 2;
    if (has_startdealerplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startdealerplayerid());
    }
    
  }
  // repeated uint32 playerSeats = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->playerseats_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerseats(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _playerseats_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartInitialMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartInitialMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartInitialMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartInitialMessage::MergeFrom(const GameStartInitialMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerseats_.MergeFrom(from.playerseats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_startdealerplayerid()) {
      set_startdealerplayerid(from.startdealerplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartInitialMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartInitialMessage::CopyFrom(const GameStartInitialMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartInitialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameStartInitialMessage::Swap(GameStartInitialMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(startdealerplayerid_, other->startdealerplayerid_);
    playerseats_.Swap(&other->playerseats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartInitialMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartInitialMessage_descriptor_;
  metadata.reflection = GameStartInitialMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerIdFieldNumber;
const int GameStartRejoinMessage_RejoinPlayerData::kPlayerMoneyFieldNumber;
#endif  // !_MSC_VER

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStartRejoinMessage_RejoinPlayerData::InitAsDefaultInstance() {
}

GameStartRejoinMessage_RejoinPlayerData::GameStartRejoinMessage_RejoinPlayerData(const GameStartRejoinMessage_RejoinPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStartRejoinMessage_RejoinPlayerData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playermoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartRejoinMessage_RejoinPlayerData::~GameStartRejoinMessage_RejoinPlayerData() {
  SharedDtor();
}

void GameStartRejoinMessage_RejoinPlayerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStartRejoinMessage_RejoinPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartRejoinMessage_RejoinPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartRejoinMessage_RejoinPlayerData_descriptor_;
}

const GameStartRejoinMessage_RejoinPlayerData& GameStartRejoinMessage_RejoinPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage_RejoinPlayerData::default_instance_ = NULL;

GameStartRejoinMessage_RejoinPlayerData* GameStartRejoinMessage_RejoinPlayerData::New() const {
  return new GameStartRejoinMessage_RejoinPlayerData;
}

void GameStartRejoinMessage_RejoinPlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    playermoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartRejoinMessage_RejoinPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerMoney;
        break;
      }
      
      // required uint32 playerMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStartRejoinMessage_RejoinPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required uint32 playerMoney = 2;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playermoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStartRejoinMessage_RejoinPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required uint32 playerMoney = 2;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playermoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStartRejoinMessage_RejoinPlayerData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required uint32 playerMoney = 2;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartRejoinMessage_RejoinPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartRejoinMessage_RejoinPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartRejoinMessage_RejoinPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartRejoinMessage_RejoinPlayerData::MergeFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartRejoinMessage_RejoinPlayerData::CopyFrom(const GameStartRejoinMessage_RejoinPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage_RejoinPlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameStartRejoinMessage_RejoinPlayerData::Swap(GameStartRejoinMessage_RejoinPlayerData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartRejoinMessage_RejoinPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartRejoinMessage_RejoinPlayerData_descriptor_;
  metadata.reflection = GameStartRejoinMessage_RejoinPlayerData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameStartRejoinMessage::kGameIdFieldNumber;
const int GameStartRejoinMessage::kStartDealerPlayerIdFieldNumber;
const int GameStartRejoinMessage::kHandNumFieldNumber;
const int GameStartRejoinMessage::kRejoinPlayerDataFieldNumber;
#endif  // !_MSC_VER

GameStartRejoinMessage::GameStartRejoinMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStartRejoinMessage::InitAsDefaultInstance() {
}

GameStartRejoinMessage::GameStartRejoinMessage(const GameStartRejoinMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStartRejoinMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  startdealerplayerid_ = 0u;
  handnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartRejoinMessage::~GameStartRejoinMessage() {
  SharedDtor();
}

void GameStartRejoinMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStartRejoinMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartRejoinMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartRejoinMessage_descriptor_;
}

const GameStartRejoinMessage& GameStartRejoinMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

GameStartRejoinMessage* GameStartRejoinMessage::default_instance_ = NULL;

GameStartRejoinMessage* GameStartRejoinMessage::New() const {
  return new GameStartRejoinMessage;
}

void GameStartRejoinMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    startdealerplayerid_ = 0u;
    handnum_ = 0u;
  }
  rejoinplayerdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartRejoinMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startDealerPlayerId;
        break;
      }
      
      // required uint32 startDealerPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDealerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startdealerplayerid_)));
          set_has_startdealerplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handNum;
        break;
      }
      
      // required uint32 handNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
          set_has_handnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rejoinPlayerData;
        break;
      }
      
      // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rejoinPlayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rejoinplayerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rejoinPlayerData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStartRejoinMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startdealerplayerid(), output);
  }
  
  // required uint32 handNum = 3;
  if (has_handnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handnum(), output);
  }
  
  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  for (int i = 0; i < this->rejoinplayerdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rejoinplayerdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStartRejoinMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 startDealerPlayerId = 2;
  if (has_startdealerplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startdealerplayerid(), target);
  }
  
  // required uint32 handNum = 3;
  if (has_handnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handnum(), target);
  }
  
  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  for (int i = 0; i < this->rejoinplayerdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rejoinplayerdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStartRejoinMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 startDealerPlayerId = 2;
    if (has_startdealerplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startdealerplayerid());
    }
    
    // required uint32 handNum = 3;
    if (has_handnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handnum());
    }
    
  }
  // repeated .GameStartRejoinMessage.RejoinPlayerData rejoinPlayerData = 4;
  total_size += 1 * this->rejoinplayerdata_size();
  for (int i = 0; i < this->rejoinplayerdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rejoinplayerdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartRejoinMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartRejoinMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartRejoinMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartRejoinMessage::MergeFrom(const GameStartRejoinMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  rejoinplayerdata_.MergeFrom(from.rejoinplayerdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_startdealerplayerid()) {
      set_startdealerplayerid(from.startdealerplayerid());
    }
    if (from.has_handnum()) {
      set_handnum(from.handnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartRejoinMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartRejoinMessage::CopyFrom(const GameStartRejoinMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRejoinMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < rejoinplayerdata_size(); i++) {
    if (!this->rejoinplayerdata(i).IsInitialized()) return false;
  }
  return true;
}

void GameStartRejoinMessage::Swap(GameStartRejoinMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(startdealerplayerid_, other->startdealerplayerid_);
    std::swap(handnum_, other->handnum_);
    rejoinplayerdata_.Swap(&other->rejoinplayerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartRejoinMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartRejoinMessage_descriptor_;
  metadata.reflection = GameStartRejoinMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandStartMessage_PlainCards::kPlainCard1FieldNumber;
const int HandStartMessage_PlainCards::kPlainCard2FieldNumber;
#endif  // !_MSC_VER

HandStartMessage_PlainCards::HandStartMessage_PlainCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandStartMessage_PlainCards::InitAsDefaultInstance() {
}

HandStartMessage_PlainCards::HandStartMessage_PlainCards(const HandStartMessage_PlainCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandStartMessage_PlainCards::SharedCtor() {
  _cached_size_ = 0;
  plaincard1_ = 0u;
  plaincard2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandStartMessage_PlainCards::~HandStartMessage_PlainCards() {
  SharedDtor();
}

void HandStartMessage_PlainCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandStartMessage_PlainCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandStartMessage_PlainCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandStartMessage_PlainCards_descriptor_;
}

const HandStartMessage_PlainCards& HandStartMessage_PlainCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

HandStartMessage_PlainCards* HandStartMessage_PlainCards::default_instance_ = NULL;

HandStartMessage_PlainCards* HandStartMessage_PlainCards::New() const {
  return new HandStartMessage_PlainCards;
}

void HandStartMessage_PlainCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plaincard1_ = 0u;
    plaincard2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandStartMessage_PlainCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plainCard1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard1_)));
          set_has_plaincard1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plainCard2;
        break;
      }
      
      // required uint32 plainCard2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plainCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plaincard2_)));
          set_has_plaincard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandStartMessage_PlainCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plainCard1 = 1;
  if (has_plaincard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plaincard1(), output);
  }
  
  // required uint32 plainCard2 = 2;
  if (has_plaincard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plaincard2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandStartMessage_PlainCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plainCard1 = 1;
  if (has_plaincard1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plaincard1(), target);
  }
  
  // required uint32 plainCard2 = 2;
  if (has_plaincard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plaincard2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandStartMessage_PlainCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plainCard1 = 1;
    if (has_plaincard1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plaincard1());
    }
    
    // required uint32 plainCard2 = 2;
    if (has_plaincard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plaincard2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandStartMessage_PlainCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandStartMessage_PlainCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandStartMessage_PlainCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandStartMessage_PlainCards::MergeFrom(const HandStartMessage_PlainCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plaincard1()) {
      set_plaincard1(from.plaincard1());
    }
    if (from.has_plaincard2()) {
      set_plaincard2(from.plaincard2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandStartMessage_PlainCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandStartMessage_PlainCards::CopyFrom(const HandStartMessage_PlainCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage_PlainCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HandStartMessage_PlainCards::Swap(HandStartMessage_PlainCards* other) {
  if (other != this) {
    std::swap(plaincard1_, other->plaincard1_);
    std::swap(plaincard2_, other->plaincard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandStartMessage_PlainCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandStartMessage_PlainCards_descriptor_;
  metadata.reflection = HandStartMessage_PlainCards_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HandStartMessage::kGameIdFieldNumber;
const int HandStartMessage::kPlainCardsFieldNumber;
const int HandStartMessage::kEncryptedCardsFieldNumber;
const int HandStartMessage::kSmallBlindFieldNumber;
const int HandStartMessage::kSeatStatesFieldNumber;
#endif  // !_MSC_VER

HandStartMessage::HandStartMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandStartMessage::InitAsDefaultInstance() {
  plaincards_ = const_cast< ::HandStartMessage_PlainCards*>(&::HandStartMessage_PlainCards::default_instance());
}

HandStartMessage::HandStartMessage(const HandStartMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandStartMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  plaincards_ = NULL;
  encryptedcards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smallblind_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandStartMessage::~HandStartMessage() {
  SharedDtor();
}

void HandStartMessage::SharedDtor() {
  if (encryptedcards_ != &::google::protobuf::internal::kEmptyString) {
    delete encryptedcards_;
  }
  if (this != default_instance_) {
    delete plaincards_;
  }
}

void HandStartMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandStartMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandStartMessage_descriptor_;
}

const HandStartMessage& HandStartMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

HandStartMessage* HandStartMessage::default_instance_ = NULL;

HandStartMessage* HandStartMessage::New() const {
  return new HandStartMessage;
}

void HandStartMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    if (has_plaincards()) {
      if (plaincards_ != NULL) plaincards_->::HandStartMessage_PlainCards::Clear();
    }
    if (has_encryptedcards()) {
      if (encryptedcards_ != &::google::protobuf::internal::kEmptyString) {
        encryptedcards_->clear();
      }
    }
    smallblind_ = 0u;
  }
  seatstates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandStartMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plainCards;
        break;
      }
      
      // optional .HandStartMessage.PlainCards plainCards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plainCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plaincards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encryptedCards;
        break;
      }
      
      // optional bytes encryptedCards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryptedCards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_smallBlind;
        break;
      }
      
      // required uint32 smallBlind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallblind_)));
          set_has_smallblind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seatStates;
        break;
      }
      
      // repeated .NetPlayerState seatStates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatStates:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetPlayerState_IsValid(value)) {
            add_seatstates(static_cast< NetPlayerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &NetPlayerState_IsValid,
                 this->mutable_seatstates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seatStates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandStartMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // optional .HandStartMessage.PlainCards plainCards = 2;
  if (has_plaincards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plaincards(), output);
  }
  
  // optional bytes encryptedCards = 3;
  if (has_encryptedcards()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encryptedcards(), output);
  }
  
  // required uint32 smallBlind = 4;
  if (has_smallblind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->smallblind(), output);
  }
  
  // repeated .NetPlayerState seatStates = 5;
  for (int i = 0; i < this->seatstates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->seatstates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandStartMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // optional .HandStartMessage.PlainCards plainCards = 2;
  if (has_plaincards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plaincards(), target);
  }
  
  // optional bytes encryptedCards = 3;
  if (has_encryptedcards()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encryptedcards(), target);
  }
  
  // required uint32 smallBlind = 4;
  if (has_smallblind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->smallblind(), target);
  }
  
  // repeated .NetPlayerState seatStates = 5;
  for (int i = 0; i < this->seatstates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->seatstates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandStartMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // optional .HandStartMessage.PlainCards plainCards = 2;
    if (has_plaincards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plaincards());
    }
    
    // optional bytes encryptedCards = 3;
    if (has_encryptedcards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptedcards());
    }
    
    // required uint32 smallBlind = 4;
    if (has_smallblind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smallblind());
    }
    
  }
  // repeated .NetPlayerState seatStates = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatstates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->seatstates(i));
    }
    total_size += 1 * this->seatstates_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandStartMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandStartMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandStartMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandStartMessage::MergeFrom(const HandStartMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatstates_.MergeFrom(from.seatstates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_plaincards()) {
      mutable_plaincards()->::HandStartMessage_PlainCards::MergeFrom(from.plaincards());
    }
    if (from.has_encryptedcards()) {
      set_encryptedcards(from.encryptedcards());
    }
    if (from.has_smallblind()) {
      set_smallblind(from.smallblind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandStartMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandStartMessage::CopyFrom(const HandStartMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStartMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  if (has_plaincards()) {
    if (!this->plaincards().IsInitialized()) return false;
  }
  return true;
}

void HandStartMessage::Swap(HandStartMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(plaincards_, other->plaincards_);
    std::swap(encryptedcards_, other->encryptedcards_);
    std::swap(smallblind_, other->smallblind_);
    seatstates_.Swap(&other->seatstates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandStartMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandStartMessage_descriptor_;
  metadata.reflection = HandStartMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayersTurnMessage::kGameIdFieldNumber;
const int PlayersTurnMessage::kPlayerIdFieldNumber;
const int PlayersTurnMessage::kGameStateFieldNumber;
#endif  // !_MSC_VER

PlayersTurnMessage::PlayersTurnMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayersTurnMessage::InitAsDefaultInstance() {
}

PlayersTurnMessage::PlayersTurnMessage(const PlayersTurnMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayersTurnMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  gamestate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayersTurnMessage::~PlayersTurnMessage() {
  SharedDtor();
}

void PlayersTurnMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayersTurnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayersTurnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayersTurnMessage_descriptor_;
}

const PlayersTurnMessage& PlayersTurnMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayersTurnMessage* PlayersTurnMessage::default_instance_ = NULL;

PlayersTurnMessage* PlayersTurnMessage::New() const {
  return new PlayersTurnMessage;
}

void PlayersTurnMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    gamestate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayersTurnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }
      
      // required .NetGameState gameState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameState_IsValid(value)) {
            set_gamestate(static_cast< NetGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayersTurnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayersTurnMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamestate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayersTurnMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .NetGameState gameState = 3;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayersTurnMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayersTurnMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayersTurnMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayersTurnMessage::MergeFrom(const PlayersTurnMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayersTurnMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayersTurnMessage::CopyFrom(const PlayersTurnMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersTurnMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PlayersTurnMessage::Swap(PlayersTurnMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayersTurnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayersTurnMessage_descriptor_;
  metadata.reflection = PlayersTurnMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyActionRequestMessage::kGameIdFieldNumber;
const int MyActionRequestMessage::kHandNumFieldNumber;
const int MyActionRequestMessage::kGameStateFieldNumber;
const int MyActionRequestMessage::kMyActionFieldNumber;
const int MyActionRequestMessage::kMyRelativeBetFieldNumber;
#endif  // !_MSC_VER

MyActionRequestMessage::MyActionRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyActionRequestMessage::InitAsDefaultInstance() {
}

MyActionRequestMessage::MyActionRequestMessage(const MyActionRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyActionRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  handnum_ = 0u;
  gamestate_ = 0;
  myaction_ = 0;
  myrelativebet_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyActionRequestMessage::~MyActionRequestMessage() {
  SharedDtor();
}

void MyActionRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyActionRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyActionRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyActionRequestMessage_descriptor_;
}

const MyActionRequestMessage& MyActionRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

MyActionRequestMessage* MyActionRequestMessage::default_instance_ = NULL;

MyActionRequestMessage* MyActionRequestMessage::New() const {
  return new MyActionRequestMessage;
}

void MyActionRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    handnum_ = 0u;
    gamestate_ = 0;
    myaction_ = 0;
    myrelativebet_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyActionRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_handNum;
        break;
      }
      
      // required uint32 handNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handnum_)));
          set_has_handnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }
      
      // required .NetGameState gameState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameState_IsValid(value)) {
            set_gamestate(static_cast< NetGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_myAction;
        break;
      }
      
      // required .NetPlayerAction myAction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetPlayerAction_IsValid(value)) {
            set_myaction(static_cast< NetPlayerAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_myRelativeBet;
        break;
      }
      
      // required uint32 myRelativeBet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRelativeBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrelativebet_)));
          set_has_myrelativebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyActionRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 handNum = 2;
  if (has_handnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->handnum(), output);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }
  
  // required .NetPlayerAction myAction = 4;
  if (has_myaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->myaction(), output);
  }
  
  // required uint32 myRelativeBet = 5;
  if (has_myrelativebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myrelativebet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyActionRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 handNum = 2;
  if (has_handnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->handnum(), target);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamestate(), target);
  }
  
  // required .NetPlayerAction myAction = 4;
  if (has_myaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->myaction(), target);
  }
  
  // required uint32 myRelativeBet = 5;
  if (has_myrelativebet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->myrelativebet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyActionRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 handNum = 2;
    if (has_handnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handnum());
    }
    
    // required .NetGameState gameState = 3;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }
    
    // required .NetPlayerAction myAction = 4;
    if (has_myaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->myaction());
    }
    
    // required uint32 myRelativeBet = 5;
    if (has_myrelativebet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrelativebet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyActionRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyActionRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyActionRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyActionRequestMessage::MergeFrom(const MyActionRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_handnum()) {
      set_handnum(from.handnum());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_myaction()) {
      set_myaction(from.myaction());
    }
    if (from.has_myrelativebet()) {
      set_myrelativebet(from.myrelativebet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyActionRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyActionRequestMessage::CopyFrom(const MyActionRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyActionRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MyActionRequestMessage::Swap(MyActionRequestMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(handnum_, other->handnum_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(myaction_, other->myaction_);
    std::swap(myrelativebet_, other->myrelativebet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyActionRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyActionRequestMessage_descriptor_;
  metadata.reflection = MyActionRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* YourActionRejectedMessage_RejectionReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YourActionRejectedMessage_RejectionReason_descriptor_;
}
bool YourActionRejectedMessage_RejectionReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedInvalidGameState;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedNotYourTurn;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::rejectedActionNotAllowed;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MIN;
const YourActionRejectedMessage_RejectionReason YourActionRejectedMessage::RejectionReason_MAX;
const int YourActionRejectedMessage::RejectionReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int YourActionRejectedMessage::kGameIdFieldNumber;
const int YourActionRejectedMessage::kGameStateFieldNumber;
const int YourActionRejectedMessage::kYourActionFieldNumber;
const int YourActionRejectedMessage::kYourRelativeBetFieldNumber;
const int YourActionRejectedMessage::kRejectionReasonFieldNumber;
#endif  // !_MSC_VER

YourActionRejectedMessage::YourActionRejectedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YourActionRejectedMessage::InitAsDefaultInstance() {
}

YourActionRejectedMessage::YourActionRejectedMessage(const YourActionRejectedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YourActionRejectedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  gamestate_ = 0;
  youraction_ = 0;
  yourrelativebet_ = 0u;
  rejectionreason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YourActionRejectedMessage::~YourActionRejectedMessage() {
  SharedDtor();
}

void YourActionRejectedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YourActionRejectedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YourActionRejectedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YourActionRejectedMessage_descriptor_;
}

const YourActionRejectedMessage& YourActionRejectedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

YourActionRejectedMessage* YourActionRejectedMessage::default_instance_ = NULL;

YourActionRejectedMessage* YourActionRejectedMessage::New() const {
  return new YourActionRejectedMessage;
}

void YourActionRejectedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    gamestate_ = 0;
    youraction_ = 0;
    yourrelativebet_ = 0u;
    rejectionreason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YourActionRejectedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameState;
        break;
      }
      
      // required .NetGameState gameState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameState_IsValid(value)) {
            set_gamestate(static_cast< NetGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yourAction;
        break;
      }
      
      // required .NetPlayerAction yourAction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yourAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetPlayerAction_IsValid(value)) {
            set_youraction(static_cast< NetPlayerAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yourRelativeBet;
        break;
      }
      
      // required uint32 yourRelativeBet = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yourRelativeBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &yourrelativebet_)));
          set_has_yourrelativebet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rejectionReason;
        break;
      }
      
      // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rejectionReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YourActionRejectedMessage_RejectionReason_IsValid(value)) {
            set_rejectionreason(static_cast< ::YourActionRejectedMessage_RejectionReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YourActionRejectedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required .NetGameState gameState = 2;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gamestate(), output);
  }
  
  // required .NetPlayerAction yourAction = 3;
  if (has_youraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->youraction(), output);
  }
  
  // required uint32 yourRelativeBet = 4;
  if (has_yourrelativebet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->yourrelativebet(), output);
  }
  
  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
  if (has_rejectionreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rejectionreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YourActionRejectedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required .NetGameState gameState = 2;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gamestate(), target);
  }
  
  // required .NetPlayerAction yourAction = 3;
  if (has_youraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->youraction(), target);
  }
  
  // required uint32 yourRelativeBet = 4;
  if (has_yourrelativebet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->yourrelativebet(), target);
  }
  
  // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
  if (has_rejectionreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->rejectionreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YourActionRejectedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required .NetGameState gameState = 2;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }
    
    // required .NetPlayerAction yourAction = 3;
    if (has_youraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->youraction());
    }
    
    // required uint32 yourRelativeBet = 4;
    if (has_yourrelativebet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->yourrelativebet());
    }
    
    // required .YourActionRejectedMessage.RejectionReason rejectionReason = 5;
    if (has_rejectionreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rejectionreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YourActionRejectedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YourActionRejectedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YourActionRejectedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YourActionRejectedMessage::MergeFrom(const YourActionRejectedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_youraction()) {
      set_youraction(from.youraction());
    }
    if (from.has_yourrelativebet()) {
      set_yourrelativebet(from.yourrelativebet());
    }
    if (from.has_rejectionreason()) {
      set_rejectionreason(from.rejectionreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YourActionRejectedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YourActionRejectedMessage::CopyFrom(const YourActionRejectedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YourActionRejectedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void YourActionRejectedMessage::Swap(YourActionRejectedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(youraction_, other->youraction_);
    std::swap(yourrelativebet_, other->yourrelativebet_);
    std::swap(rejectionreason_, other->rejectionreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YourActionRejectedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YourActionRejectedMessage_descriptor_;
  metadata.reflection = YourActionRejectedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayersActionDoneMessage::kGameIdFieldNumber;
const int PlayersActionDoneMessage::kPlayerIdFieldNumber;
const int PlayersActionDoneMessage::kGameStateFieldNumber;
const int PlayersActionDoneMessage::kPlayerActionFieldNumber;
const int PlayersActionDoneMessage::kTotalPlayerBetFieldNumber;
const int PlayersActionDoneMessage::kPlayerMoneyFieldNumber;
const int PlayersActionDoneMessage::kHighestSetFieldNumber;
const int PlayersActionDoneMessage::kMinimumRaiseFieldNumber;
#endif  // !_MSC_VER

PlayersActionDoneMessage::PlayersActionDoneMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayersActionDoneMessage::InitAsDefaultInstance() {
}

PlayersActionDoneMessage::PlayersActionDoneMessage(const PlayersActionDoneMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayersActionDoneMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  gamestate_ = 0;
  playeraction_ = 0;
  totalplayerbet_ = 0u;
  playermoney_ = 0u;
  highestset_ = 0u;
  minimumraise_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayersActionDoneMessage::~PlayersActionDoneMessage() {
  SharedDtor();
}

void PlayersActionDoneMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayersActionDoneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayersActionDoneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayersActionDoneMessage_descriptor_;
}

const PlayersActionDoneMessage& PlayersActionDoneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayersActionDoneMessage* PlayersActionDoneMessage::default_instance_ = NULL;

PlayersActionDoneMessage* PlayersActionDoneMessage::New() const {
  return new PlayersActionDoneMessage;
}

void PlayersActionDoneMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    gamestate_ = 0;
    playeraction_ = 0;
    totalplayerbet_ = 0u;
    playermoney_ = 0u;
    highestset_ = 0u;
    minimumraise_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayersActionDoneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameState;
        break;
      }
      
      // required .NetGameState gameState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetGameState_IsValid(value)) {
            set_gamestate(static_cast< NetGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerAction;
        break;
      }
      
      // required .NetPlayerAction playerAction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (NetPlayerAction_IsValid(value)) {
            set_playeraction(static_cast< NetPlayerAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalPlayerBet;
        break;
      }
      
      // required uint32 totalPlayerBet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalPlayerBet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalplayerbet_)));
          set_has_totalplayerbet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerMoney;
        break;
      }
      
      // required uint32 playerMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_highestSet;
        break;
      }
      
      // required uint32 highestSet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highestSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highestset_)));
          set_has_highestset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_minimumRaise;
        break;
      }
      
      // required uint32 minimumRaise = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minimumRaise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minimumraise_)));
          set_has_minimumraise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayersActionDoneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gamestate(), output);
  }
  
  // required .NetPlayerAction playerAction = 4;
  if (has_playeraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->playeraction(), output);
  }
  
  // required uint32 totalPlayerBet = 5;
  if (has_totalplayerbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalplayerbet(), output);
  }
  
  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playermoney(), output);
  }
  
  // required uint32 highestSet = 7;
  if (has_highestset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->highestset(), output);
  }
  
  // required uint32 minimumRaise = 8;
  if (has_minimumraise()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minimumraise(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayersActionDoneMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .NetGameState gameState = 3;
  if (has_gamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gamestate(), target);
  }
  
  // required .NetPlayerAction playerAction = 4;
  if (has_playeraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->playeraction(), target);
  }
  
  // required uint32 totalPlayerBet = 5;
  if (has_totalplayerbet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalplayerbet(), target);
  }
  
  // required uint32 playerMoney = 6;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playermoney(), target);
  }
  
  // required uint32 highestSet = 7;
  if (has_highestset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->highestset(), target);
  }
  
  // required uint32 minimumRaise = 8;
  if (has_minimumraise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->minimumraise(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayersActionDoneMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .NetGameState gameState = 3;
    if (has_gamestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamestate());
    }
    
    // required .NetPlayerAction playerAction = 4;
    if (has_playeraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playeraction());
    }
    
    // required uint32 totalPlayerBet = 5;
    if (has_totalplayerbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalplayerbet());
    }
    
    // required uint32 playerMoney = 6;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermoney());
    }
    
    // required uint32 highestSet = 7;
    if (has_highestset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highestset());
    }
    
    // required uint32 minimumRaise = 8;
    if (has_minimumraise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minimumraise());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayersActionDoneMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayersActionDoneMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayersActionDoneMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayersActionDoneMessage::MergeFrom(const PlayersActionDoneMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_gamestate()) {
      set_gamestate(from.gamestate());
    }
    if (from.has_playeraction()) {
      set_playeraction(from.playeraction());
    }
    if (from.has_totalplayerbet()) {
      set_totalplayerbet(from.totalplayerbet());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
    if (from.has_highestset()) {
      set_highestset(from.highestset());
    }
    if (from.has_minimumraise()) {
      set_minimumraise(from.minimumraise());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayersActionDoneMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayersActionDoneMessage::CopyFrom(const PlayersActionDoneMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayersActionDoneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void PlayersActionDoneMessage::Swap(PlayersActionDoneMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(gamestate_, other->gamestate_);
    std::swap(playeraction_, other->playeraction_);
    std::swap(totalplayerbet_, other->totalplayerbet_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(highestset_, other->highestset_);
    std::swap(minimumraise_, other->minimumraise_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayersActionDoneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayersActionDoneMessage_descriptor_;
  metadata.reflection = PlayersActionDoneMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealFlopCardsMessage::kGameIdFieldNumber;
const int DealFlopCardsMessage::kFlopCard1FieldNumber;
const int DealFlopCardsMessage::kFlopCard2FieldNumber;
const int DealFlopCardsMessage::kFlopCard3FieldNumber;
#endif  // !_MSC_VER

DealFlopCardsMessage::DealFlopCardsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealFlopCardsMessage::InitAsDefaultInstance() {
}

DealFlopCardsMessage::DealFlopCardsMessage(const DealFlopCardsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealFlopCardsMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  flopcard1_ = 0u;
  flopcard2_ = 0u;
  flopcard3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealFlopCardsMessage::~DealFlopCardsMessage() {
  SharedDtor();
}

void DealFlopCardsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealFlopCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealFlopCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealFlopCardsMessage_descriptor_;
}

const DealFlopCardsMessage& DealFlopCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

DealFlopCardsMessage* DealFlopCardsMessage::default_instance_ = NULL;

DealFlopCardsMessage* DealFlopCardsMessage::New() const {
  return new DealFlopCardsMessage;
}

void DealFlopCardsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    flopcard1_ = 0u;
    flopcard2_ = 0u;
    flopcard3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealFlopCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flopCard1;
        break;
      }
      
      // required uint32 flopCard1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flopCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard1_)));
          set_has_flopcard1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flopCard2;
        break;
      }
      
      // required uint32 flopCard2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flopCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard2_)));
          set_has_flopcard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flopCard3;
        break;
      }
      
      // required uint32 flopCard3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flopCard3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flopcard3_)));
          set_has_flopcard3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealFlopCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 flopCard1 = 2;
  if (has_flopcard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flopcard1(), output);
  }
  
  // required uint32 flopCard2 = 3;
  if (has_flopcard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flopcard2(), output);
  }
  
  // required uint32 flopCard3 = 4;
  if (has_flopcard3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flopcard3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealFlopCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 flopCard1 = 2;
  if (has_flopcard1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flopcard1(), target);
  }
  
  // required uint32 flopCard2 = 3;
  if (has_flopcard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flopcard2(), target);
  }
  
  // required uint32 flopCard3 = 4;
  if (has_flopcard3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flopcard3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealFlopCardsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 flopCard1 = 2;
    if (has_flopcard1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flopcard1());
    }
    
    // required uint32 flopCard2 = 3;
    if (has_flopcard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flopcard2());
    }
    
    // required uint32 flopCard3 = 4;
    if (has_flopcard3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flopcard3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealFlopCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealFlopCardsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealFlopCardsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealFlopCardsMessage::MergeFrom(const DealFlopCardsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_flopcard1()) {
      set_flopcard1(from.flopcard1());
    }
    if (from.has_flopcard2()) {
      set_flopcard2(from.flopcard2());
    }
    if (from.has_flopcard3()) {
      set_flopcard3(from.flopcard3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealFlopCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealFlopCardsMessage::CopyFrom(const DealFlopCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealFlopCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void DealFlopCardsMessage::Swap(DealFlopCardsMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(flopcard1_, other->flopcard1_);
    std::swap(flopcard2_, other->flopcard2_);
    std::swap(flopcard3_, other->flopcard3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealFlopCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealFlopCardsMessage_descriptor_;
  metadata.reflection = DealFlopCardsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealTurnCardMessage::kGameIdFieldNumber;
const int DealTurnCardMessage::kTurnCardFieldNumber;
#endif  // !_MSC_VER

DealTurnCardMessage::DealTurnCardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealTurnCardMessage::InitAsDefaultInstance() {
}

DealTurnCardMessage::DealTurnCardMessage(const DealTurnCardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealTurnCardMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  turncard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealTurnCardMessage::~DealTurnCardMessage() {
  SharedDtor();
}

void DealTurnCardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealTurnCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealTurnCardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealTurnCardMessage_descriptor_;
}

const DealTurnCardMessage& DealTurnCardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

DealTurnCardMessage* DealTurnCardMessage::default_instance_ = NULL;

DealTurnCardMessage* DealTurnCardMessage::New() const {
  return new DealTurnCardMessage;
}

void DealTurnCardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    turncard_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealTurnCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_turnCard;
        break;
      }
      
      // required uint32 turnCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turncard_)));
          set_has_turncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealTurnCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 turnCard = 2;
  if (has_turncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turncard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealTurnCardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 turnCard = 2;
  if (has_turncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->turncard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealTurnCardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 turnCard = 2;
    if (has_turncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turncard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealTurnCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealTurnCardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealTurnCardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealTurnCardMessage::MergeFrom(const DealTurnCardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_turncard()) {
      set_turncard(from.turncard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealTurnCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealTurnCardMessage::CopyFrom(const DealTurnCardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTurnCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DealTurnCardMessage::Swap(DealTurnCardMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(turncard_, other->turncard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealTurnCardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealTurnCardMessage_descriptor_;
  metadata.reflection = DealTurnCardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DealRiverCardMessage::kGameIdFieldNumber;
const int DealRiverCardMessage::kRiverCardFieldNumber;
#endif  // !_MSC_VER

DealRiverCardMessage::DealRiverCardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DealRiverCardMessage::InitAsDefaultInstance() {
}

DealRiverCardMessage::DealRiverCardMessage(const DealRiverCardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DealRiverCardMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  rivercard_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DealRiverCardMessage::~DealRiverCardMessage() {
  SharedDtor();
}

void DealRiverCardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DealRiverCardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DealRiverCardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DealRiverCardMessage_descriptor_;
}

const DealRiverCardMessage& DealRiverCardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

DealRiverCardMessage* DealRiverCardMessage::default_instance_ = NULL;

DealRiverCardMessage* DealRiverCardMessage::New() const {
  return new DealRiverCardMessage;
}

void DealRiverCardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    rivercard_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DealRiverCardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_riverCard;
        break;
      }
      
      // required uint32 riverCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riverCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rivercard_)));
          set_has_rivercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DealRiverCardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 riverCard = 2;
  if (has_rivercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rivercard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DealRiverCardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 riverCard = 2;
  if (has_rivercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rivercard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DealRiverCardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 riverCard = 2;
    if (has_rivercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rivercard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DealRiverCardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DealRiverCardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DealRiverCardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DealRiverCardMessage::MergeFrom(const DealRiverCardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_rivercard()) {
      set_rivercard(from.rivercard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DealRiverCardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealRiverCardMessage::CopyFrom(const DealRiverCardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealRiverCardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DealRiverCardMessage::Swap(DealRiverCardMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(rivercard_, other->rivercard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DealRiverCardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DealRiverCardMessage_descriptor_;
  metadata.reflection = DealRiverCardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllInShowCardsMessage_PlayerAllIn::kPlayerIdFieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard1FieldNumber;
const int AllInShowCardsMessage_PlayerAllIn::kAllInCard2FieldNumber;
#endif  // !_MSC_VER

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllInShowCardsMessage_PlayerAllIn::InitAsDefaultInstance() {
}

AllInShowCardsMessage_PlayerAllIn::AllInShowCardsMessage_PlayerAllIn(const AllInShowCardsMessage_PlayerAllIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllInShowCardsMessage_PlayerAllIn::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  allincard1_ = 0u;
  allincard2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllInShowCardsMessage_PlayerAllIn::~AllInShowCardsMessage_PlayerAllIn() {
  SharedDtor();
}

void AllInShowCardsMessage_PlayerAllIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllInShowCardsMessage_PlayerAllIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllInShowCardsMessage_PlayerAllIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllInShowCardsMessage_PlayerAllIn_descriptor_;
}

const AllInShowCardsMessage_PlayerAllIn& AllInShowCardsMessage_PlayerAllIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage_PlayerAllIn::default_instance_ = NULL;

AllInShowCardsMessage_PlayerAllIn* AllInShowCardsMessage_PlayerAllIn::New() const {
  return new AllInShowCardsMessage_PlayerAllIn;
}

void AllInShowCardsMessage_PlayerAllIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    allincard1_ = 0u;
    allincard2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllInShowCardsMessage_PlayerAllIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allInCard1;
        break;
      }
      
      // required uint32 allInCard1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allInCard1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard1_)));
          set_has_allincard1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allInCard2;
        break;
      }
      
      // required uint32 allInCard2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allInCard2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allincard2_)));
          set_has_allincard2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllInShowCardsMessage_PlayerAllIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required uint32 allInCard1 = 2;
  if (has_allincard1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->allincard1(), output);
  }
  
  // required uint32 allInCard2 = 3;
  if (has_allincard2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allincard2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllInShowCardsMessage_PlayerAllIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required uint32 allInCard1 = 2;
  if (has_allincard1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->allincard1(), target);
  }
  
  // required uint32 allInCard2 = 3;
  if (has_allincard2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allincard2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllInShowCardsMessage_PlayerAllIn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required uint32 allInCard1 = 2;
    if (has_allincard1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allincard1());
    }
    
    // required uint32 allInCard2 = 3;
    if (has_allincard2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allincard2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllInShowCardsMessage_PlayerAllIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllInShowCardsMessage_PlayerAllIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllInShowCardsMessage_PlayerAllIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllInShowCardsMessage_PlayerAllIn::MergeFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_allincard1()) {
      set_allincard1(from.allincard1());
    }
    if (from.has_allincard2()) {
      set_allincard2(from.allincard2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllInShowCardsMessage_PlayerAllIn::CopyFrom(const AllInShowCardsMessage_PlayerAllIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage_PlayerAllIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AllInShowCardsMessage_PlayerAllIn::Swap(AllInShowCardsMessage_PlayerAllIn* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(allincard1_, other->allincard1_);
    std::swap(allincard2_, other->allincard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllInShowCardsMessage_PlayerAllIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllInShowCardsMessage_PlayerAllIn_descriptor_;
  metadata.reflection = AllInShowCardsMessage_PlayerAllIn_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AllInShowCardsMessage::kGameIdFieldNumber;
const int AllInShowCardsMessage::kPlayersAllInFieldNumber;
#endif  // !_MSC_VER

AllInShowCardsMessage::AllInShowCardsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllInShowCardsMessage::InitAsDefaultInstance() {
}

AllInShowCardsMessage::AllInShowCardsMessage(const AllInShowCardsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllInShowCardsMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllInShowCardsMessage::~AllInShowCardsMessage() {
  SharedDtor();
}

void AllInShowCardsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllInShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllInShowCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllInShowCardsMessage_descriptor_;
}

const AllInShowCardsMessage& AllInShowCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AllInShowCardsMessage* AllInShowCardsMessage::default_instance_ = NULL;

AllInShowCardsMessage* AllInShowCardsMessage::New() const {
  return new AllInShowCardsMessage;
}

void AllInShowCardsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
  }
  playersallin_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllInShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playersAllIn;
        break;
      }
      
      // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playersAllIn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playersallin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playersAllIn;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllInShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  for (int i = 0; i < this->playersallin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playersallin(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllInShowCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  for (int i = 0; i < this->playersallin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playersallin(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllInShowCardsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
  }
  // repeated .AllInShowCardsMessage.PlayerAllIn playersAllIn = 2;
  total_size += 1 * this->playersallin_size();
  for (int i = 0; i < this->playersallin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playersallin(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllInShowCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllInShowCardsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllInShowCardsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllInShowCardsMessage::MergeFrom(const AllInShowCardsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playersallin_.MergeFrom(from.playersallin_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllInShowCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllInShowCardsMessage::CopyFrom(const AllInShowCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < playersallin_size(); i++) {
    if (!this->playersallin(i).IsInitialized()) return false;
  }
  return true;
}

void AllInShowCardsMessage::Swap(AllInShowCardsMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    playersallin_.Swap(&other->playersallin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllInShowCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllInShowCardsMessage_descriptor_;
  metadata.reflection = AllInShowCardsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndOfHandShowCardsMessage::kGameIdFieldNumber;
const int EndOfHandShowCardsMessage::kPlayerResultsFieldNumber;
#endif  // !_MSC_VER

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndOfHandShowCardsMessage::InitAsDefaultInstance() {
}

EndOfHandShowCardsMessage::EndOfHandShowCardsMessage(const EndOfHandShowCardsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndOfHandShowCardsMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfHandShowCardsMessage::~EndOfHandShowCardsMessage() {
  SharedDtor();
}

void EndOfHandShowCardsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndOfHandShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndOfHandShowCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndOfHandShowCardsMessage_descriptor_;
}

const EndOfHandShowCardsMessage& EndOfHandShowCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

EndOfHandShowCardsMessage* EndOfHandShowCardsMessage::default_instance_ = NULL;

EndOfHandShowCardsMessage* EndOfHandShowCardsMessage::New() const {
  return new EndOfHandShowCardsMessage;
}

void EndOfHandShowCardsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
  }
  playerresults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndOfHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerResults;
        break;
      }
      
      // repeated .PlayerResult playerResults = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerresults()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerResults;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndOfHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // repeated .PlayerResult playerResults = 2;
  for (int i = 0; i < this->playerresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerresults(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndOfHandShowCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // repeated .PlayerResult playerResults = 2;
  for (int i = 0; i < this->playerresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerresults(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndOfHandShowCardsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
  }
  // repeated .PlayerResult playerResults = 2;
  total_size += 1 * this->playerresults_size();
  for (int i = 0; i < this->playerresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerresults(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfHandShowCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndOfHandShowCardsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndOfHandShowCardsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndOfHandShowCardsMessage::MergeFrom(const EndOfHandShowCardsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerresults_.MergeFrom(from.playerresults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndOfHandShowCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndOfHandShowCardsMessage::CopyFrom(const EndOfHandShowCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < playerresults_size(); i++) {
    if (!this->playerresults(i).IsInitialized()) return false;
  }
  return true;
}

void EndOfHandShowCardsMessage::Swap(EndOfHandShowCardsMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    playerresults_.Swap(&other->playerresults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndOfHandShowCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndOfHandShowCardsMessage_descriptor_;
  metadata.reflection = EndOfHandShowCardsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndOfHandHideCardsMessage::kGameIdFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerIdFieldNumber;
const int EndOfHandHideCardsMessage::kMoneyWonFieldNumber;
const int EndOfHandHideCardsMessage::kPlayerMoneyFieldNumber;
#endif  // !_MSC_VER

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndOfHandHideCardsMessage::InitAsDefaultInstance() {
}

EndOfHandHideCardsMessage::EndOfHandHideCardsMessage(const EndOfHandHideCardsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndOfHandHideCardsMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  moneywon_ = 0u;
  playermoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfHandHideCardsMessage::~EndOfHandHideCardsMessage() {
  SharedDtor();
}

void EndOfHandHideCardsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndOfHandHideCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndOfHandHideCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndOfHandHideCardsMessage_descriptor_;
}

const EndOfHandHideCardsMessage& EndOfHandHideCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

EndOfHandHideCardsMessage* EndOfHandHideCardsMessage::default_instance_ = NULL;

EndOfHandHideCardsMessage* EndOfHandHideCardsMessage::New() const {
  return new EndOfHandHideCardsMessage;
}

void EndOfHandHideCardsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    moneywon_ = 0u;
    playermoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndOfHandHideCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moneyWon;
        break;
      }
      
      // required uint32 moneyWon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyWon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneywon_)));
          set_has_moneywon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerMoney;
        break;
      }
      
      // required uint32 playerMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playermoney_)));
          set_has_playermoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndOfHandHideCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required uint32 moneyWon = 3;
  if (has_moneywon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneywon(), output);
  }
  
  // required uint32 playerMoney = 4;
  if (has_playermoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playermoney(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndOfHandHideCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required uint32 moneyWon = 3;
  if (has_moneywon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moneywon(), target);
  }
  
  // required uint32 playerMoney = 4;
  if (has_playermoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playermoney(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndOfHandHideCardsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required uint32 moneyWon = 3;
    if (has_moneywon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneywon());
    }
    
    // required uint32 playerMoney = 4;
    if (has_playermoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playermoney());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfHandHideCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndOfHandHideCardsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndOfHandHideCardsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndOfHandHideCardsMessage::MergeFrom(const EndOfHandHideCardsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_moneywon()) {
      set_moneywon(from.moneywon());
    }
    if (from.has_playermoney()) {
      set_playermoney(from.playermoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndOfHandHideCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndOfHandHideCardsMessage::CopyFrom(const EndOfHandHideCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfHandHideCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void EndOfHandHideCardsMessage::Swap(EndOfHandHideCardsMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(moneywon_, other->moneywon_);
    std::swap(playermoney_, other->playermoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndOfHandHideCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndOfHandHideCardsMessage_descriptor_;
  metadata.reflection = EndOfHandHideCardsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowMyCardsRequestMessage::InitAsDefaultInstance() {
}

ShowMyCardsRequestMessage::ShowMyCardsRequestMessage(const ShowMyCardsRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowMyCardsRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowMyCardsRequestMessage::~ShowMyCardsRequestMessage() {
  SharedDtor();
}

void ShowMyCardsRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowMyCardsRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowMyCardsRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowMyCardsRequestMessage_descriptor_;
}

const ShowMyCardsRequestMessage& ShowMyCardsRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ShowMyCardsRequestMessage* ShowMyCardsRequestMessage::default_instance_ = NULL;

ShowMyCardsRequestMessage* ShowMyCardsRequestMessage::New() const {
  return new ShowMyCardsRequestMessage;
}

void ShowMyCardsRequestMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowMyCardsRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShowMyCardsRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowMyCardsRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowMyCardsRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowMyCardsRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowMyCardsRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowMyCardsRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowMyCardsRequestMessage::MergeFrom(const ShowMyCardsRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowMyCardsRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowMyCardsRequestMessage::CopyFrom(const ShowMyCardsRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowMyCardsRequestMessage::IsInitialized() const {
  
  return true;
}

void ShowMyCardsRequestMessage::Swap(ShowMyCardsRequestMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowMyCardsRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowMyCardsRequestMessage_descriptor_;
  metadata.reflection = ShowMyCardsRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AfterHandShowCardsMessage::kPlayerResultFieldNumber;
#endif  // !_MSC_VER

AfterHandShowCardsMessage::AfterHandShowCardsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AfterHandShowCardsMessage::InitAsDefaultInstance() {
  playerresult_ = const_cast< ::PlayerResult*>(&::PlayerResult::default_instance());
}

AfterHandShowCardsMessage::AfterHandShowCardsMessage(const AfterHandShowCardsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AfterHandShowCardsMessage::SharedCtor() {
  _cached_size_ = 0;
  playerresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AfterHandShowCardsMessage::~AfterHandShowCardsMessage() {
  SharedDtor();
}

void AfterHandShowCardsMessage::SharedDtor() {
  if (this != default_instance_) {
    delete playerresult_;
  }
}

void AfterHandShowCardsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AfterHandShowCardsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AfterHandShowCardsMessage_descriptor_;
}

const AfterHandShowCardsMessage& AfterHandShowCardsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AfterHandShowCardsMessage* AfterHandShowCardsMessage::default_instance_ = NULL;

AfterHandShowCardsMessage* AfterHandShowCardsMessage::New() const {
  return new AfterHandShowCardsMessage;
}

void AfterHandShowCardsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerresult()) {
      if (playerresult_ != NULL) playerresult_->::PlayerResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AfterHandShowCardsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlayerResult playerResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerresult()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AfterHandShowCardsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlayerResult playerResult = 1;
  if (has_playerresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AfterHandShowCardsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlayerResult playerResult = 1;
  if (has_playerresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AfterHandShowCardsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlayerResult playerResult = 1;
    if (has_playerresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AfterHandShowCardsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AfterHandShowCardsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AfterHandShowCardsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AfterHandShowCardsMessage::MergeFrom(const AfterHandShowCardsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerresult()) {
      mutable_playerresult()->::PlayerResult::MergeFrom(from.playerresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AfterHandShowCardsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AfterHandShowCardsMessage::CopyFrom(const AfterHandShowCardsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AfterHandShowCardsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_playerresult()) {
    if (!this->playerresult().IsInitialized()) return false;
  }
  return true;
}

void AfterHandShowCardsMessage::Swap(AfterHandShowCardsMessage* other) {
  if (other != this) {
    std::swap(playerresult_, other->playerresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AfterHandShowCardsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AfterHandShowCardsMessage_descriptor_;
  metadata.reflection = AfterHandShowCardsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndOfGameMessage::kGameIdFieldNumber;
const int EndOfGameMessage::kWinnerPlayerIdFieldNumber;
#endif  // !_MSC_VER

EndOfGameMessage::EndOfGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndOfGameMessage::InitAsDefaultInstance() {
}

EndOfGameMessage::EndOfGameMessage(const EndOfGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndOfGameMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  winnerplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOfGameMessage::~EndOfGameMessage() {
  SharedDtor();
}

void EndOfGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndOfGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndOfGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndOfGameMessage_descriptor_;
}

const EndOfGameMessage& EndOfGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

EndOfGameMessage* EndOfGameMessage::default_instance_ = NULL;

EndOfGameMessage* EndOfGameMessage::New() const {
  return new EndOfGameMessage;
}

void EndOfGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    winnerplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndOfGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winnerPlayerId;
        break;
      }
      
      // required uint32 winnerPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winnerPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnerplayerid_)));
          set_has_winnerplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndOfGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 winnerPlayerId = 2;
  if (has_winnerplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnerplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndOfGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 winnerPlayerId = 2;
  if (has_winnerplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winnerplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndOfGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 winnerPlayerId = 2;
    if (has_winnerplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnerplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOfGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndOfGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndOfGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndOfGameMessage::MergeFrom(const EndOfGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_winnerplayerid()) {
      set_winnerplayerid(from.winnerplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndOfGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndOfGameMessage::CopyFrom(const EndOfGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOfGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EndOfGameMessage::Swap(EndOfGameMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(winnerplayerid_, other->winnerplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndOfGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndOfGameMessage_descriptor_;
  metadata.reflection = EndOfGameMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerIdChangedMessage::kOldPlayerIdFieldNumber;
const int PlayerIdChangedMessage::kNewPlayerIdFieldNumber;
#endif  // !_MSC_VER

PlayerIdChangedMessage::PlayerIdChangedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerIdChangedMessage::InitAsDefaultInstance() {
}

PlayerIdChangedMessage::PlayerIdChangedMessage(const PlayerIdChangedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerIdChangedMessage::SharedCtor() {
  _cached_size_ = 0;
  oldplayerid_ = 0u;
  newplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerIdChangedMessage::~PlayerIdChangedMessage() {
  SharedDtor();
}

void PlayerIdChangedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerIdChangedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerIdChangedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerIdChangedMessage_descriptor_;
}

const PlayerIdChangedMessage& PlayerIdChangedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PlayerIdChangedMessage* PlayerIdChangedMessage::default_instance_ = NULL;

PlayerIdChangedMessage* PlayerIdChangedMessage::New() const {
  return new PlayerIdChangedMessage;
}

void PlayerIdChangedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oldplayerid_ = 0u;
    newplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerIdChangedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oldPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldplayerid_)));
          set_has_oldplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newPlayerId;
        break;
      }
      
      // required uint32 newPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newplayerid_)));
          set_has_newplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerIdChangedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 oldPlayerId = 1;
  if (has_oldplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldplayerid(), output);
  }
  
  // required uint32 newPlayerId = 2;
  if (has_newplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newplayerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerIdChangedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oldPlayerId = 1;
  if (has_oldplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oldplayerid(), target);
  }
  
  // required uint32 newPlayerId = 2;
  if (has_newplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newplayerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerIdChangedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oldPlayerId = 1;
    if (has_oldplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldplayerid());
    }
    
    // required uint32 newPlayerId = 2;
    if (has_newplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newplayerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerIdChangedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerIdChangedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerIdChangedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerIdChangedMessage::MergeFrom(const PlayerIdChangedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldplayerid()) {
      set_oldplayerid(from.oldplayerid());
    }
    if (from.has_newplayerid()) {
      set_newplayerid(from.newplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerIdChangedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerIdChangedMessage::CopyFrom(const PlayerIdChangedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIdChangedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PlayerIdChangedMessage::Swap(PlayerIdChangedMessage* other) {
  if (other != this) {
    std::swap(oldplayerid_, other->oldplayerid_);
    std::swap(newplayerid_, other->newplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerIdChangedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerIdChangedMessage_descriptor_;
  metadata.reflection = PlayerIdChangedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskKickPlayerMessage::kGameIdFieldNumber;
const int AskKickPlayerMessage::kPlayerIdFieldNumber;
#endif  // !_MSC_VER

AskKickPlayerMessage::AskKickPlayerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskKickPlayerMessage::InitAsDefaultInstance() {
}

AskKickPlayerMessage::AskKickPlayerMessage(const AskKickPlayerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskKickPlayerMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskKickPlayerMessage::~AskKickPlayerMessage() {
  SharedDtor();
}

void AskKickPlayerMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskKickPlayerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskKickPlayerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskKickPlayerMessage_descriptor_;
}

const AskKickPlayerMessage& AskKickPlayerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AskKickPlayerMessage* AskKickPlayerMessage::default_instance_ = NULL;

AskKickPlayerMessage* AskKickPlayerMessage::New() const {
  return new AskKickPlayerMessage;
}

void AskKickPlayerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskKickPlayerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskKickPlayerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskKickPlayerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskKickPlayerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskKickPlayerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskKickPlayerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskKickPlayerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskKickPlayerMessage::MergeFrom(const AskKickPlayerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskKickPlayerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskKickPlayerMessage::CopyFrom(const AskKickPlayerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickPlayerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AskKickPlayerMessage::Swap(AskKickPlayerMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskKickPlayerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskKickPlayerMessage_descriptor_;
  metadata.reflection = AskKickPlayerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AskKickDeniedMessage_KickDeniedReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskKickDeniedMessage_KickDeniedReason_descriptor_;
}
bool AskKickDeniedMessage_KickDeniedReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidGameState;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedNotPossible;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedTryAgainLater;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedAlreadyInProgress;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::kickDeniedInvalidPlayerId;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MIN;
const AskKickDeniedMessage_KickDeniedReason AskKickDeniedMessage::KickDeniedReason_MAX;
const int AskKickDeniedMessage::KickDeniedReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AskKickDeniedMessage::kGameIdFieldNumber;
const int AskKickDeniedMessage::kPlayerIdFieldNumber;
const int AskKickDeniedMessage::kKickDeniedReasonFieldNumber;
#endif  // !_MSC_VER

AskKickDeniedMessage::AskKickDeniedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskKickDeniedMessage::InitAsDefaultInstance() {
}

AskKickDeniedMessage::AskKickDeniedMessage(const AskKickDeniedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskKickDeniedMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  kickdeniedreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskKickDeniedMessage::~AskKickDeniedMessage() {
  SharedDtor();
}

void AskKickDeniedMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskKickDeniedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskKickDeniedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskKickDeniedMessage_descriptor_;
}

const AskKickDeniedMessage& AskKickDeniedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

AskKickDeniedMessage* AskKickDeniedMessage::default_instance_ = NULL;

AskKickDeniedMessage* AskKickDeniedMessage::New() const {
  return new AskKickDeniedMessage;
}

void AskKickDeniedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    kickdeniedreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskKickDeniedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // required uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kickDeniedReason;
        break;
      }
      
      // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickDeniedReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AskKickDeniedMessage_KickDeniedReason_IsValid(value)) {
            set_kickdeniedreason(static_cast< ::AskKickDeniedMessage_KickDeniedReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskKickDeniedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
  if (has_kickdeniedreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->kickdeniedreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskKickDeniedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
  if (has_kickdeniedreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->kickdeniedreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskKickDeniedMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .AskKickDeniedMessage.KickDeniedReason kickDeniedReason = 3;
    if (has_kickdeniedreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kickdeniedreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskKickDeniedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskKickDeniedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskKickDeniedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskKickDeniedMessage::MergeFrom(const AskKickDeniedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_kickdeniedreason()) {
      set_kickdeniedreason(from.kickdeniedreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskKickDeniedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskKickDeniedMessage::CopyFrom(const AskKickDeniedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskKickDeniedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AskKickDeniedMessage::Swap(AskKickDeniedMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(kickdeniedreason_, other->kickdeniedreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskKickDeniedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskKickDeniedMessage_descriptor_;
  metadata.reflection = AskKickDeniedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartKickPetitionMessage::kGameIdFieldNumber;
const int StartKickPetitionMessage::kPetitionIdFieldNumber;
const int StartKickPetitionMessage::kProposingPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickPlayerIdFieldNumber;
const int StartKickPetitionMessage::kKickTimeoutSecFieldNumber;
const int StartKickPetitionMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !_MSC_VER

StartKickPetitionMessage::StartKickPetitionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartKickPetitionMessage::InitAsDefaultInstance() {
}

StartKickPetitionMessage::StartKickPetitionMessage(const StartKickPetitionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartKickPetitionMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  petitionid_ = 0u;
  proposingplayerid_ = 0u;
  kickplayerid_ = 0u;
  kicktimeoutsec_ = 0u;
  numvotesneededtokick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartKickPetitionMessage::~StartKickPetitionMessage() {
  SharedDtor();
}

void StartKickPetitionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartKickPetitionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartKickPetitionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartKickPetitionMessage_descriptor_;
}

const StartKickPetitionMessage& StartKickPetitionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

StartKickPetitionMessage* StartKickPetitionMessage::default_instance_ = NULL;

StartKickPetitionMessage* StartKickPetitionMessage::New() const {
  return new StartKickPetitionMessage;
}

void StartKickPetitionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    petitionid_ = 0u;
    proposingplayerid_ = 0u;
    kickplayerid_ = 0u;
    kicktimeoutsec_ = 0u;
    numvotesneededtokick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }
      
      // required uint32 petitionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proposingPlayerId;
        break;
      }
      
      // required uint32 proposingPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proposingPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proposingplayerid_)));
          set_has_proposingplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kickPlayerId;
        break;
      }
      
      // required uint32 kickPlayerId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickplayerid_)));
          set_has_kickplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kickTimeoutSec;
        break;
      }
      
      // required uint32 kickTimeoutSec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kickTimeoutSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kicktimeoutsec_)));
          set_has_kicktimeoutsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_numVotesNeededToKick;
        break;
      }
      
      // required uint32 numVotesNeededToKick = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesNeededToKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
          set_has_numvotesneededtokick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }
  
  // required uint32 proposingPlayerId = 3;
  if (has_proposingplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->proposingplayerid(), output);
  }
  
  // required uint32 kickPlayerId = 4;
  if (has_kickplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kickplayerid(), output);
  }
  
  // required uint32 kickTimeoutSec = 5;
  if (has_kicktimeoutsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kicktimeoutsec(), output);
  }
  
  // required uint32 numVotesNeededToKick = 6;
  if (has_numvotesneededtokick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numvotesneededtokick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartKickPetitionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petitionid(), target);
  }
  
  // required uint32 proposingPlayerId = 3;
  if (has_proposingplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->proposingplayerid(), target);
  }
  
  // required uint32 kickPlayerId = 4;
  if (has_kickplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kickplayerid(), target);
  }
  
  // required uint32 kickTimeoutSec = 5;
  if (has_kicktimeoutsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kicktimeoutsec(), target);
  }
  
  // required uint32 numVotesNeededToKick = 6;
  if (has_numvotesneededtokick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->numvotesneededtokick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartKickPetitionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 petitionId = 2;
    if (has_petitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petitionid());
    }
    
    // required uint32 proposingPlayerId = 3;
    if (has_proposingplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proposingplayerid());
    }
    
    // required uint32 kickPlayerId = 4;
    if (has_kickplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickplayerid());
    }
    
    // required uint32 kickTimeoutSec = 5;
    if (has_kicktimeoutsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kicktimeoutsec());
    }
    
    // required uint32 numVotesNeededToKick = 6;
    if (has_numvotesneededtokick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesneededtokick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartKickPetitionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartKickPetitionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartKickPetitionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartKickPetitionMessage::MergeFrom(const StartKickPetitionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_proposingplayerid()) {
      set_proposingplayerid(from.proposingplayerid());
    }
    if (from.has_kickplayerid()) {
      set_kickplayerid(from.kickplayerid());
    }
    if (from.has_kicktimeoutsec()) {
      set_kicktimeoutsec(from.kicktimeoutsec());
    }
    if (from.has_numvotesneededtokick()) {
      set_numvotesneededtokick(from.numvotesneededtokick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartKickPetitionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartKickPetitionMessage::CopyFrom(const StartKickPetitionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void StartKickPetitionMessage::Swap(StartKickPetitionMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(petitionid_, other->petitionid_);
    std::swap(proposingplayerid_, other->proposingplayerid_);
    std::swap(kickplayerid_, other->kickplayerid_);
    std::swap(kicktimeoutsec_, other->kicktimeoutsec_);
    std::swap(numvotesneededtokick_, other->numvotesneededtokick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartKickPetitionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartKickPetitionMessage_descriptor_;
  metadata.reflection = StartKickPetitionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VoteKickRequestMessage::kGameIdFieldNumber;
const int VoteKickRequestMessage::kPetitionIdFieldNumber;
const int VoteKickRequestMessage::kVoteKickFieldNumber;
#endif  // !_MSC_VER

VoteKickRequestMessage::VoteKickRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteKickRequestMessage::InitAsDefaultInstance() {
}

VoteKickRequestMessage::VoteKickRequestMessage(const VoteKickRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteKickRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  petitionid_ = 0u;
  votekick_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteKickRequestMessage::~VoteKickRequestMessage() {
  SharedDtor();
}

void VoteKickRequestMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteKickRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteKickRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteKickRequestMessage_descriptor_;
}

const VoteKickRequestMessage& VoteKickRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

VoteKickRequestMessage* VoteKickRequestMessage::default_instance_ = NULL;

VoteKickRequestMessage* VoteKickRequestMessage::New() const {
  return new VoteKickRequestMessage;
}

void VoteKickRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    petitionid_ = 0u;
    votekick_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteKickRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }
      
      // required uint32 petitionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voteKick;
        break;
      }
      
      // required bool voteKick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voteKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votekick_)));
          set_has_votekick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteKickRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }
  
  // required bool voteKick = 3;
  if (has_votekick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->votekick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteKickRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petitionid(), target);
  }
  
  // required bool voteKick = 3;
  if (has_votekick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->votekick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteKickRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 petitionId = 2;
    if (has_petitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petitionid());
    }
    
    // required bool voteKick = 3;
    if (has_votekick()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteKickRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteKickRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteKickRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteKickRequestMessage::MergeFrom(const VoteKickRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_votekick()) {
      set_votekick(from.votekick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteKickRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteKickRequestMessage::CopyFrom(const VoteKickRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void VoteKickRequestMessage::Swap(VoteKickRequestMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(petitionid_, other->petitionid_);
    std::swap(votekick_, other->votekick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteKickRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteKickRequestMessage_descriptor_;
  metadata.reflection = VoteKickRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VoteKickReplyMessage_VoteKickReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteKickReplyMessage_VoteKickReplyType_descriptor_;
}
bool VoteKickReplyMessage_VoteKickReplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickAck;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedInvalid;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::voteKickDeniedAlreadyVoted;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MIN;
const VoteKickReplyMessage_VoteKickReplyType VoteKickReplyMessage::VoteKickReplyType_MAX;
const int VoteKickReplyMessage::VoteKickReplyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VoteKickReplyMessage::kGameIdFieldNumber;
const int VoteKickReplyMessage::kPetitionIdFieldNumber;
const int VoteKickReplyMessage::kVoteKickReplyTypeFieldNumber;
#endif  // !_MSC_VER

VoteKickReplyMessage::VoteKickReplyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VoteKickReplyMessage::InitAsDefaultInstance() {
}

VoteKickReplyMessage::VoteKickReplyMessage(const VoteKickReplyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VoteKickReplyMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  petitionid_ = 0u;
  votekickreplytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VoteKickReplyMessage::~VoteKickReplyMessage() {
  SharedDtor();
}

void VoteKickReplyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteKickReplyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteKickReplyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteKickReplyMessage_descriptor_;
}

const VoteKickReplyMessage& VoteKickReplyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

VoteKickReplyMessage* VoteKickReplyMessage::default_instance_ = NULL;

VoteKickReplyMessage* VoteKickReplyMessage::New() const {
  return new VoteKickReplyMessage;
}

void VoteKickReplyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    petitionid_ = 0u;
    votekickreplytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VoteKickReplyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }
      
      // required uint32 petitionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_voteKickReplyType;
        break;
      }
      
      // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voteKickReplyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoteKickReplyMessage_VoteKickReplyType_IsValid(value)) {
            set_votekickreplytype(static_cast< ::VoteKickReplyMessage_VoteKickReplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VoteKickReplyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }
  
  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
  if (has_votekickreplytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->votekickreplytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VoteKickReplyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petitionid(), target);
  }
  
  // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
  if (has_votekickreplytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->votekickreplytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VoteKickReplyMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 petitionId = 2;
    if (has_petitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petitionid());
    }
    
    // required .VoteKickReplyMessage.VoteKickReplyType voteKickReplyType = 3;
    if (has_votekickreplytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->votekickreplytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteKickReplyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VoteKickReplyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VoteKickReplyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteKickReplyMessage::MergeFrom(const VoteKickReplyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_votekickreplytype()) {
      set_votekickreplytype(from.votekickreplytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VoteKickReplyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteKickReplyMessage::CopyFrom(const VoteKickReplyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteKickReplyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void VoteKickReplyMessage::Swap(VoteKickReplyMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(petitionid_, other->petitionid_);
    std::swap(votekickreplytype_, other->votekickreplytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VoteKickReplyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteKickReplyMessage_descriptor_;
  metadata.reflection = VoteKickReplyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickPetitionUpdateMessage::kGameIdFieldNumber;
const int KickPetitionUpdateMessage::kPetitionIdFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesAgainstKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesInFavourOfKickingFieldNumber;
const int KickPetitionUpdateMessage::kNumVotesNeededToKickFieldNumber;
#endif  // !_MSC_VER

KickPetitionUpdateMessage::KickPetitionUpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickPetitionUpdateMessage::InitAsDefaultInstance() {
}

KickPetitionUpdateMessage::KickPetitionUpdateMessage(const KickPetitionUpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickPetitionUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  petitionid_ = 0u;
  numvotesagainstkicking_ = 0u;
  numvotesinfavourofkicking_ = 0u;
  numvotesneededtokick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickPetitionUpdateMessage::~KickPetitionUpdateMessage() {
  SharedDtor();
}

void KickPetitionUpdateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickPetitionUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickPetitionUpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickPetitionUpdateMessage_descriptor_;
}

const KickPetitionUpdateMessage& KickPetitionUpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

KickPetitionUpdateMessage* KickPetitionUpdateMessage::default_instance_ = NULL;

KickPetitionUpdateMessage* KickPetitionUpdateMessage::New() const {
  return new KickPetitionUpdateMessage;
}

void KickPetitionUpdateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    petitionid_ = 0u;
    numvotesagainstkicking_ = 0u;
    numvotesinfavourofkicking_ = 0u;
    numvotesneededtokick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickPetitionUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }
      
      // required uint32 petitionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numVotesAgainstKicking;
        break;
      }
      
      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesAgainstKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
          set_has_numvotesagainstkicking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numVotesInFavourOfKicking;
        break;
      }
      
      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesInFavourOfKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
          set_has_numvotesinfavourofkicking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numVotesNeededToKick;
        break;
      }
      
      // required uint32 numVotesNeededToKick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesNeededToKick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesneededtokick_)));
          set_has_numvotesneededtokick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickPetitionUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }
  
  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }
  
  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }
  
  // required uint32 numVotesNeededToKick = 5;
  if (has_numvotesneededtokick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numvotesneededtokick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickPetitionUpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petitionid(), target);
  }
  
  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numvotesagainstkicking(), target);
  }
  
  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numvotesinfavourofkicking(), target);
  }
  
  // required uint32 numVotesNeededToKick = 5;
  if (has_numvotesneededtokick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->numvotesneededtokick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickPetitionUpdateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 petitionId = 2;
    if (has_petitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petitionid());
    }
    
    // required uint32 numVotesAgainstKicking = 3;
    if (has_numvotesagainstkicking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesagainstkicking());
    }
    
    // required uint32 numVotesInFavourOfKicking = 4;
    if (has_numvotesinfavourofkicking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesinfavourofkicking());
    }
    
    // required uint32 numVotesNeededToKick = 5;
    if (has_numvotesneededtokick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesneededtokick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickPetitionUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickPetitionUpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickPetitionUpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickPetitionUpdateMessage::MergeFrom(const KickPetitionUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_numvotesagainstkicking()) {
      set_numvotesagainstkicking(from.numvotesagainstkicking());
    }
    if (from.has_numvotesinfavourofkicking()) {
      set_numvotesinfavourofkicking(from.numvotesinfavourofkicking());
    }
    if (from.has_numvotesneededtokick()) {
      set_numvotesneededtokick(from.numvotesneededtokick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickPetitionUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickPetitionUpdateMessage::CopyFrom(const KickPetitionUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPetitionUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void KickPetitionUpdateMessage::Swap(KickPetitionUpdateMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(petitionid_, other->petitionid_);
    std::swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
    std::swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
    std::swap(numvotesneededtokick_, other->numvotesneededtokick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickPetitionUpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickPetitionUpdateMessage_descriptor_;
  metadata.reflection = KickPetitionUpdateMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EndKickPetitionMessage_PetitionEndReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndKickPetitionMessage_PetitionEndReason_descriptor_;
}
bool EndKickPetitionMessage_PetitionEndReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndEnoughVotes;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTooFewPlayers;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndPlayerLeft;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::petitionEndTimeout;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MIN;
const EndKickPetitionMessage_PetitionEndReason EndKickPetitionMessage::PetitionEndReason_MAX;
const int EndKickPetitionMessage::PetitionEndReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EndKickPetitionMessage::kGameIdFieldNumber;
const int EndKickPetitionMessage::kPetitionIdFieldNumber;
const int EndKickPetitionMessage::kNumVotesAgainstKickingFieldNumber;
const int EndKickPetitionMessage::kNumVotesInFavourOfKickingFieldNumber;
const int EndKickPetitionMessage::kResultPlayerKickedFieldNumber;
const int EndKickPetitionMessage::kPetitionEndReasonFieldNumber;
#endif  // !_MSC_VER

EndKickPetitionMessage::EndKickPetitionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndKickPetitionMessage::InitAsDefaultInstance() {
}

EndKickPetitionMessage::EndKickPetitionMessage(const EndKickPetitionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndKickPetitionMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  petitionid_ = 0u;
  numvotesagainstkicking_ = 0u;
  numvotesinfavourofkicking_ = 0u;
  resultplayerkicked_ = 0u;
  petitionendreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndKickPetitionMessage::~EndKickPetitionMessage() {
  SharedDtor();
}

void EndKickPetitionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndKickPetitionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndKickPetitionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndKickPetitionMessage_descriptor_;
}

const EndKickPetitionMessage& EndKickPetitionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

EndKickPetitionMessage* EndKickPetitionMessage::default_instance_ = NULL;

EndKickPetitionMessage* EndKickPetitionMessage::New() const {
  return new EndKickPetitionMessage;
}

void EndKickPetitionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    petitionid_ = 0u;
    numvotesagainstkicking_ = 0u;
    numvotesinfavourofkicking_ = 0u;
    resultplayerkicked_ = 0u;
    petitionendreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndKickPetitionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_petitionId;
        break;
      }
      
      // required uint32 petitionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &petitionid_)));
          set_has_petitionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numVotesAgainstKicking;
        break;
      }
      
      // required uint32 numVotesAgainstKicking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesAgainstKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesagainstkicking_)));
          set_has_numvotesagainstkicking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_numVotesInFavourOfKicking;
        break;
      }
      
      // required uint32 numVotesInFavourOfKicking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numVotesInFavourOfKicking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numvotesinfavourofkicking_)));
          set_has_numvotesinfavourofkicking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resultPlayerKicked;
        break;
      }
      
      // required uint32 resultPlayerKicked = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultPlayerKicked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultplayerkicked_)));
          set_has_resultplayerkicked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_petitionEndReason;
        break;
      }
      
      // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_petitionEndReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EndKickPetitionMessage_PetitionEndReason_IsValid(value)) {
            set_petitionendreason(static_cast< ::EndKickPetitionMessage_PetitionEndReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndKickPetitionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->petitionid(), output);
  }
  
  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numvotesagainstkicking(), output);
  }
  
  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numvotesinfavourofkicking(), output);
  }
  
  // required uint32 resultPlayerKicked = 5;
  if (has_resultplayerkicked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resultplayerkicked(), output);
  }
  
  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
  if (has_petitionendreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->petitionendreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndKickPetitionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // required uint32 petitionId = 2;
  if (has_petitionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->petitionid(), target);
  }
  
  // required uint32 numVotesAgainstKicking = 3;
  if (has_numvotesagainstkicking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numvotesagainstkicking(), target);
  }
  
  // required uint32 numVotesInFavourOfKicking = 4;
  if (has_numvotesinfavourofkicking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numvotesinfavourofkicking(), target);
  }
  
  // required uint32 resultPlayerKicked = 5;
  if (has_resultplayerkicked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resultplayerkicked(), target);
  }
  
  // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
  if (has_petitionendreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->petitionendreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndKickPetitionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // required uint32 petitionId = 2;
    if (has_petitionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->petitionid());
    }
    
    // required uint32 numVotesAgainstKicking = 3;
    if (has_numvotesagainstkicking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesagainstkicking());
    }
    
    // required uint32 numVotesInFavourOfKicking = 4;
    if (has_numvotesinfavourofkicking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numvotesinfavourofkicking());
    }
    
    // required uint32 resultPlayerKicked = 5;
    if (has_resultplayerkicked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultplayerkicked());
    }
    
    // required .EndKickPetitionMessage.PetitionEndReason petitionEndReason = 6;
    if (has_petitionendreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->petitionendreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndKickPetitionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndKickPetitionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndKickPetitionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndKickPetitionMessage::MergeFrom(const EndKickPetitionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_petitionid()) {
      set_petitionid(from.petitionid());
    }
    if (from.has_numvotesagainstkicking()) {
      set_numvotesagainstkicking(from.numvotesagainstkicking());
    }
    if (from.has_numvotesinfavourofkicking()) {
      set_numvotesinfavourofkicking(from.numvotesinfavourofkicking());
    }
    if (from.has_resultplayerkicked()) {
      set_resultplayerkicked(from.resultplayerkicked());
    }
    if (from.has_petitionendreason()) {
      set_petitionendreason(from.petitionendreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndKickPetitionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndKickPetitionMessage::CopyFrom(const EndKickPetitionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndKickPetitionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void EndKickPetitionMessage::Swap(EndKickPetitionMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(petitionid_, other->petitionid_);
    std::swap(numvotesagainstkicking_, other->numvotesagainstkicking_);
    std::swap(numvotesinfavourofkicking_, other->numvotesinfavourofkicking_);
    std::swap(resultplayerkicked_, other->resultplayerkicked_);
    std::swap(petitionendreason_, other->petitionendreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndKickPetitionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndKickPetitionMessage_descriptor_;
  metadata.reflection = EndKickPetitionMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* StatisticsMessage_StatisticsData_StatisticsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticsMessage_StatisticsData_StatisticsType_descriptor_;
}
bool StatisticsMessage_StatisticsData_StatisticsType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::statNumberOfPlayers;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MIN;
const StatisticsMessage_StatisticsData_StatisticsType StatisticsMessage_StatisticsData::StatisticsType_MAX;
const int StatisticsMessage_StatisticsData::StatisticsType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StatisticsMessage_StatisticsData::kStatisticsTypeFieldNumber;
const int StatisticsMessage_StatisticsData::kStatisticsValueFieldNumber;
#endif  // !_MSC_VER

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticsMessage_StatisticsData::InitAsDefaultInstance() {
}

StatisticsMessage_StatisticsData::StatisticsMessage_StatisticsData(const StatisticsMessage_StatisticsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticsMessage_StatisticsData::SharedCtor() {
  _cached_size_ = 0;
  statisticstype_ = 1;
  statisticsvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsMessage_StatisticsData::~StatisticsMessage_StatisticsData() {
  SharedDtor();
}

void StatisticsMessage_StatisticsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticsMessage_StatisticsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticsMessage_StatisticsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticsMessage_StatisticsData_descriptor_;
}

const StatisticsMessage_StatisticsData& StatisticsMessage_StatisticsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

StatisticsMessage_StatisticsData* StatisticsMessage_StatisticsData::default_instance_ = NULL;

StatisticsMessage_StatisticsData* StatisticsMessage_StatisticsData::New() const {
  return new StatisticsMessage_StatisticsData;
}

void StatisticsMessage_StatisticsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statisticstype_ = 1;
    statisticsvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticsMessage_StatisticsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StatisticsMessage_StatisticsData_StatisticsType_IsValid(value)) {
            set_statisticstype(static_cast< ::StatisticsMessage_StatisticsData_StatisticsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statisticsValue;
        break;
      }
      
      // required uint32 statisticsValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticsValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statisticsvalue_)));
          set_has_statisticsvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticsMessage_StatisticsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (has_statisticstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->statisticstype(), output);
  }
  
  // required uint32 statisticsValue = 2;
  if (has_statisticsvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->statisticsvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticsMessage_StatisticsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
  if (has_statisticstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->statisticstype(), target);
  }
  
  // required uint32 statisticsValue = 2;
  if (has_statisticsvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->statisticsvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticsMessage_StatisticsData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .StatisticsMessage.StatisticsData.StatisticsType statisticsType = 1;
    if (has_statisticstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->statisticstype());
    }
    
    // required uint32 statisticsValue = 2;
    if (has_statisticsvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statisticsvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsMessage_StatisticsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticsMessage_StatisticsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticsMessage_StatisticsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticsMessage_StatisticsData::MergeFrom(const StatisticsMessage_StatisticsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statisticstype()) {
      set_statisticstype(from.statisticstype());
    }
    if (from.has_statisticsvalue()) {
      set_statisticsvalue(from.statisticsvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticsMessage_StatisticsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsMessage_StatisticsData::CopyFrom(const StatisticsMessage_StatisticsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage_StatisticsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StatisticsMessage_StatisticsData::Swap(StatisticsMessage_StatisticsData* other) {
  if (other != this) {
    std::swap(statisticstype_, other->statisticstype_);
    std::swap(statisticsvalue_, other->statisticsvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticsMessage_StatisticsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticsMessage_StatisticsData_descriptor_;
  metadata.reflection = StatisticsMessage_StatisticsData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int StatisticsMessage::kStatisticsDataFieldNumber;
#endif  // !_MSC_VER

StatisticsMessage::StatisticsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticsMessage::InitAsDefaultInstance() {
}

StatisticsMessage::StatisticsMessage(const StatisticsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticsMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsMessage::~StatisticsMessage() {
  SharedDtor();
}

void StatisticsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticsMessage_descriptor_;
}

const StatisticsMessage& StatisticsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

StatisticsMessage* StatisticsMessage::default_instance_ = NULL;

StatisticsMessage* StatisticsMessage::New() const {
  return new StatisticsMessage;
}

void StatisticsMessage::Clear() {
  statisticsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statisticsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statisticsdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_statisticsData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (int i = 0; i < this->statisticsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->statisticsdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  for (int i = 0; i < this->statisticsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->statisticsdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticsMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated .StatisticsMessage.StatisticsData statisticsData = 1;
  total_size += 1 * this->statisticsdata_size();
  for (int i = 0; i < this->statisticsdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statisticsdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticsMessage::MergeFrom(const StatisticsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  statisticsdata_.MergeFrom(from.statisticsdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsMessage::CopyFrom(const StatisticsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsMessage::IsInitialized() const {
  
  for (int i = 0; i < statisticsdata_size(); i++) {
    if (!this->statisticsdata(i).IsInitialized()) return false;
  }
  return true;
}

void StatisticsMessage::Swap(StatisticsMessage* other) {
  if (other != this) {
    statisticsdata_.Swap(&other->statisticsdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticsMessage_descriptor_;
  metadata.reflection = StatisticsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRequestMessage::kTargetGameIdFieldNumber;
const int ChatRequestMessage::kTargetPlayerIdFieldNumber;
const int ChatRequestMessage::kChatTextFieldNumber;
#endif  // !_MSC_VER

ChatRequestMessage::ChatRequestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRequestMessage::InitAsDefaultInstance() {
}

ChatRequestMessage::ChatRequestMessage(const ChatRequestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRequestMessage::SharedCtor() {
  _cached_size_ = 0;
  targetgameid_ = 0u;
  targetplayerid_ = 0u;
  chattext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRequestMessage::~ChatRequestMessage() {
  SharedDtor();
}

void ChatRequestMessage::SharedDtor() {
  if (chattext_ != &::google::protobuf::internal::kEmptyString) {
    delete chattext_;
  }
  if (this != default_instance_) {
  }
}

void ChatRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRequestMessage_descriptor_;
}

const ChatRequestMessage& ChatRequestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ChatRequestMessage* ChatRequestMessage::default_instance_ = NULL;

ChatRequestMessage* ChatRequestMessage::New() const {
  return new ChatRequestMessage;
}

void ChatRequestMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetgameid_ = 0u;
    targetplayerid_ = 0u;
    if (has_chattext()) {
      if (chattext_ != &::google::protobuf::internal::kEmptyString) {
        chattext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 targetGameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetgameid_)));
          set_has_targetgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetPlayerId;
        break;
      }
      
      // optional uint32 targetPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chatText;
        break;
      }
      
      // required string chatText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chattext().data(), this->chattext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 targetGameId = 1;
  if (has_targetgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetgameid(), output);
  }
  
  // optional uint32 targetPlayerId = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }
  
  // required string chatText = 3;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chattext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRequestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 targetGameId = 1;
  if (has_targetgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetgameid(), target);
  }
  
  // optional uint32 targetPlayerId = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }
  
  // required string chatText = 3;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chattext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRequestMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 targetGameId = 1;
    if (has_targetgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetgameid());
    }
    
    // optional uint32 targetPlayerId = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }
    
    // required string chatText = 3;
    if (has_chattext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chattext());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRequestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRequestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRequestMessage::MergeFrom(const ChatRequestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetgameid()) {
      set_targetgameid(from.targetgameid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_chattext()) {
      set_chattext(from.chattext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRequestMessage::CopyFrom(const ChatRequestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRequestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void ChatRequestMessage::Swap(ChatRequestMessage* other) {
  if (other != this) {
    std::swap(targetgameid_, other->targetgameid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(chattext_, other->chattext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRequestMessage_descriptor_;
  metadata.reflection = ChatRequestMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatMessage_ChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_ChatType_descriptor_;
}
bool ChatMessage_ChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ChatMessage_ChatType ChatMessage::chatTypeLobby;
const ChatMessage_ChatType ChatMessage::chatTypeGame;
const ChatMessage_ChatType ChatMessage::chatTypeBot;
const ChatMessage_ChatType ChatMessage::chatTypeBroadcast;
const ChatMessage_ChatType ChatMessage::chatTypePrivate;
const ChatMessage_ChatType ChatMessage::ChatType_MIN;
const ChatMessage_ChatType ChatMessage::ChatType_MAX;
const int ChatMessage::ChatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ChatMessage::kGameIdFieldNumber;
const int ChatMessage::kPlayerIdFieldNumber;
const int ChatMessage::kChatTypeFieldNumber;
const int ChatMessage::kChatTextFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0u;
  playerid_ = 0u;
  chattype_ = 0;
  chattext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (chattext_ != &::google::protobuf::internal::kEmptyString) {
    delete chattext_;
  }
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0u;
    playerid_ = 0u;
    chattype_ = 0;
    if (has_chattext()) {
      if (chattext_ != &::google::protobuf::internal::kEmptyString) {
        chattext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerId;
        break;
      }
      
      // optional uint32 playerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chatType;
        break;
      }
      
      // required .ChatMessage.ChatType chatType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chatType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatMessage_ChatType_IsValid(value)) {
            set_chattype(static_cast< ::ChatMessage_ChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatText;
        break;
      }
      
      // required string chatText = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chattext().data(), this->chattext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gameid(), output);
  }
  
  // optional uint32 playerId = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }
  
  // required .ChatMessage.ChatType chatType = 3;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->chattype(), output);
  }
  
  // required string chatText = 4;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chattext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gameid(), target);
  }
  
  // optional uint32 playerId = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }
  
  // required .ChatMessage.ChatType chatType = 3;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->chattype(), target);
  }
  
  // required string chatText = 4;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chattext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }
    
    // optional uint32 playerId = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .ChatMessage.ChatType chatType = 3;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chattype());
    }
    
    // required string chatText = 4;
    if (has_chattext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chattext());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_chattext()) {
      set_chattext(from.chattext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(playerid_, other->playerid_);
    std::swap(chattype_, other->chattype_);
    std::swap(chattext_, other->chattext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRejectMessage::kChatTextFieldNumber;
#endif  // !_MSC_VER

ChatRejectMessage::ChatRejectMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRejectMessage::InitAsDefaultInstance() {
}

ChatRejectMessage::ChatRejectMessage(const ChatRejectMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRejectMessage::SharedCtor() {
  _cached_size_ = 0;
  chattext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRejectMessage::~ChatRejectMessage() {
  SharedDtor();
}

void ChatRejectMessage::SharedDtor() {
  if (chattext_ != &::google::protobuf::internal::kEmptyString) {
    delete chattext_;
  }
  if (this != default_instance_) {
  }
}

void ChatRejectMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRejectMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRejectMessage_descriptor_;
}

const ChatRejectMessage& ChatRejectMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ChatRejectMessage* ChatRejectMessage::default_instance_ = NULL;

ChatRejectMessage* ChatRejectMessage::New() const {
  return new ChatRejectMessage;
}

void ChatRejectMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chattext()) {
      if (chattext_ != &::google::protobuf::internal::kEmptyString) {
        chattext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRejectMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatText = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chattext().data(), this->chattext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRejectMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatText = 1;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chattext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRejectMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatText = 1;
  if (has_chattext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattext().data(), this->chattext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chattext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRejectMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatText = 1;
    if (has_chattext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chattext());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRejectMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRejectMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRejectMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRejectMessage::MergeFrom(const ChatRejectMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chattext()) {
      set_chattext(from.chattext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRejectMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRejectMessage::CopyFrom(const ChatRejectMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRejectMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChatRejectMessage::Swap(ChatRejectMessage* other) {
  if (other != this) {
    std::swap(chattext_, other->chattext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRejectMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRejectMessage_descriptor_;
  metadata.reflection = ChatRejectMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DialogMessage::kNotificationTextFieldNumber;
#endif  // !_MSC_VER

DialogMessage::DialogMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DialogMessage::InitAsDefaultInstance() {
}

DialogMessage::DialogMessage(const DialogMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DialogMessage::SharedCtor() {
  _cached_size_ = 0;
  notificationtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DialogMessage::~DialogMessage() {
  SharedDtor();
}

void DialogMessage::SharedDtor() {
  if (notificationtext_ != &::google::protobuf::internal::kEmptyString) {
    delete notificationtext_;
  }
  if (this != default_instance_) {
  }
}

void DialogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DialogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DialogMessage_descriptor_;
}

const DialogMessage& DialogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

DialogMessage* DialogMessage::default_instance_ = NULL;

DialogMessage* DialogMessage::New() const {
  return new DialogMessage;
}

void DialogMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notificationtext()) {
      if (notificationtext_ != &::google::protobuf::internal::kEmptyString) {
        notificationtext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DialogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notificationText = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notificationtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notificationtext().data(), this->notificationtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DialogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notificationText = 1;
  if (has_notificationtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notificationtext().data(), this->notificationtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notificationtext(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DialogMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notificationText = 1;
  if (has_notificationtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notificationtext().data(), this->notificationtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notificationtext(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DialogMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notificationText = 1;
    if (has_notificationtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notificationtext());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DialogMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DialogMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DialogMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DialogMessage::MergeFrom(const DialogMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notificationtext()) {
      set_notificationtext(from.notificationtext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DialogMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DialogMessage::CopyFrom(const DialogMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DialogMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DialogMessage::Swap(DialogMessage* other) {
  if (other != this) {
    std::swap(notificationtext_, other->notificationtext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DialogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DialogMessage_descriptor_;
  metadata.reflection = DialogMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TimeoutWarningMessage_TimeoutReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeoutWarningMessage_TimeoutReason_descriptor_;
}
bool TimeoutWarningMessage_TimeoutReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutNoDataReceived;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutInactiveGame;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::timeoutKickAfterAutofold;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MIN;
const TimeoutWarningMessage_TimeoutReason TimeoutWarningMessage::TimeoutReason_MAX;
const int TimeoutWarningMessage::TimeoutReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TimeoutWarningMessage::kTimeoutReasonFieldNumber;
const int TimeoutWarningMessage::kRemainingSecondsFieldNumber;
#endif  // !_MSC_VER

TimeoutWarningMessage::TimeoutWarningMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeoutWarningMessage::InitAsDefaultInstance() {
}

TimeoutWarningMessage::TimeoutWarningMessage(const TimeoutWarningMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeoutWarningMessage::SharedCtor() {
  _cached_size_ = 0;
  timeoutreason_ = 0;
  remainingseconds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeoutWarningMessage::~TimeoutWarningMessage() {
  SharedDtor();
}

void TimeoutWarningMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeoutWarningMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeoutWarningMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeoutWarningMessage_descriptor_;
}

const TimeoutWarningMessage& TimeoutWarningMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

TimeoutWarningMessage* TimeoutWarningMessage::default_instance_ = NULL;

TimeoutWarningMessage* TimeoutWarningMessage::New() const {
  return new TimeoutWarningMessage;
}

void TimeoutWarningMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeoutreason_ = 0;
    remainingseconds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeoutWarningMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TimeoutWarningMessage_TimeoutReason_IsValid(value)) {
            set_timeoutreason(static_cast< ::TimeoutWarningMessage_TimeoutReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainingSeconds;
        break;
      }
      
      // required uint32 remainingSeconds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainingSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainingseconds_)));
          set_has_remainingseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeoutWarningMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (has_timeoutreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->timeoutreason(), output);
  }
  
  // required uint32 remainingSeconds = 2;
  if (has_remainingseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remainingseconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeoutWarningMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
  if (has_timeoutreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->timeoutreason(), target);
  }
  
  // required uint32 remainingSeconds = 2;
  if (has_remainingseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remainingseconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeoutWarningMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TimeoutWarningMessage.TimeoutReason timeoutReason = 1;
    if (has_timeoutreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeoutreason());
    }
    
    // required uint32 remainingSeconds = 2;
    if (has_remainingseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainingseconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeoutWarningMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeoutWarningMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeoutWarningMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeoutWarningMessage::MergeFrom(const TimeoutWarningMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeoutreason()) {
      set_timeoutreason(from.timeoutreason());
    }
    if (from.has_remainingseconds()) {
      set_remainingseconds(from.remainingseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeoutWarningMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeoutWarningMessage::CopyFrom(const TimeoutWarningMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutWarningMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TimeoutWarningMessage::Swap(TimeoutWarningMessage* other) {
  if (other != this) {
    std::swap(timeoutreason_, other->timeoutreason_);
    std::swap(remainingseconds_, other->remainingseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeoutWarningMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeoutWarningMessage_descriptor_;
  metadata.reflection = TimeoutWarningMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetTimeoutMessage::ResetTimeoutMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetTimeoutMessage::InitAsDefaultInstance() {
}

ResetTimeoutMessage::ResetTimeoutMessage(const ResetTimeoutMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetTimeoutMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetTimeoutMessage::~ResetTimeoutMessage() {
  SharedDtor();
}

void ResetTimeoutMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetTimeoutMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetTimeoutMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetTimeoutMessage_descriptor_;
}

const ResetTimeoutMessage& ResetTimeoutMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ResetTimeoutMessage* ResetTimeoutMessage::default_instance_ = NULL;

ResetTimeoutMessage* ResetTimeoutMessage::New() const {
  return new ResetTimeoutMessage;
}

void ResetTimeoutMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetTimeoutMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResetTimeoutMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetTimeoutMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetTimeoutMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetTimeoutMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetTimeoutMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetTimeoutMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetTimeoutMessage::MergeFrom(const ResetTimeoutMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetTimeoutMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetTimeoutMessage::CopyFrom(const ResetTimeoutMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTimeoutMessage::IsInitialized() const {
  
  return true;
}

void ResetTimeoutMessage::Swap(ResetTimeoutMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetTimeoutMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetTimeoutMessage_descriptor_;
  metadata.reflection = ResetTimeoutMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportAvatarMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarMessage::kReportedAvatarHashFieldNumber;
#endif  // !_MSC_VER

ReportAvatarMessage::ReportAvatarMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAvatarMessage::InitAsDefaultInstance() {
}

ReportAvatarMessage::ReportAvatarMessage(const ReportAvatarMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAvatarMessage::SharedCtor() {
  _cached_size_ = 0;
  reportedplayerid_ = 0u;
  reportedavatarhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvatarMessage::~ReportAvatarMessage() {
  SharedDtor();
}

void ReportAvatarMessage::SharedDtor() {
  if (reportedavatarhash_ != &::google::protobuf::internal::kEmptyString) {
    delete reportedavatarhash_;
  }
  if (this != default_instance_) {
  }
}

void ReportAvatarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAvatarMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAvatarMessage_descriptor_;
}

const ReportAvatarMessage& ReportAvatarMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ReportAvatarMessage* ReportAvatarMessage::default_instance_ = NULL;

ReportAvatarMessage* ReportAvatarMessage::New() const {
  return new ReportAvatarMessage;
}

void ReportAvatarMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportedplayerid_ = 0u;
    if (has_reportedavatarhash()) {
      if (reportedavatarhash_ != &::google::protobuf::internal::kEmptyString) {
        reportedavatarhash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAvatarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
          set_has_reportedplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reportedAvatarHash;
        break;
      }
      
      // required bytes reportedAvatarHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportedAvatarHash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reportedavatarhash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAvatarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }
  
  // required bytes reportedAvatarHash = 2;
  if (has_reportedavatarhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->reportedavatarhash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAvatarMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reportedplayerid(), target);
  }
  
  // required bytes reportedAvatarHash = 2;
  if (has_reportedavatarhash()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reportedavatarhash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAvatarMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reportedPlayerId = 1;
    if (has_reportedplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportedplayerid());
    }
    
    // required bytes reportedAvatarHash = 2;
    if (has_reportedavatarhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reportedavatarhash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvatarMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAvatarMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAvatarMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAvatarMessage::MergeFrom(const ReportAvatarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedplayerid()) {
      set_reportedplayerid(from.reportedplayerid());
    }
    if (from.has_reportedavatarhash()) {
      set_reportedavatarhash(from.reportedavatarhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAvatarMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAvatarMessage::CopyFrom(const ReportAvatarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReportAvatarMessage::Swap(ReportAvatarMessage* other) {
  if (other != this) {
    std::swap(reportedplayerid_, other->reportedplayerid_);
    std::swap(reportedavatarhash_, other->reportedavatarhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAvatarMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAvatarMessage_descriptor_;
  metadata.reflection = ReportAvatarMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReportAvatarAckMessage_ReportAvatarResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAvatarAckMessage_ReportAvatarResult_descriptor_;
}
bool ReportAvatarAckMessage_ReportAvatarResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportAccepted;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportDuplicate;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::avatarReportInvalid;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MIN;
const ReportAvatarAckMessage_ReportAvatarResult ReportAvatarAckMessage::ReportAvatarResult_MAX;
const int ReportAvatarAckMessage::ReportAvatarResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReportAvatarAckMessage::kReportedPlayerIdFieldNumber;
const int ReportAvatarAckMessage::kReportAvatarResultFieldNumber;
#endif  // !_MSC_VER

ReportAvatarAckMessage::ReportAvatarAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAvatarAckMessage::InitAsDefaultInstance() {
}

ReportAvatarAckMessage::ReportAvatarAckMessage(const ReportAvatarAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAvatarAckMessage::SharedCtor() {
  _cached_size_ = 0;
  reportedplayerid_ = 0u;
  reportavatarresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvatarAckMessage::~ReportAvatarAckMessage() {
  SharedDtor();
}

void ReportAvatarAckMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportAvatarAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAvatarAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAvatarAckMessage_descriptor_;
}

const ReportAvatarAckMessage& ReportAvatarAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ReportAvatarAckMessage* ReportAvatarAckMessage::default_instance_ = NULL;

ReportAvatarAckMessage* ReportAvatarAckMessage::New() const {
  return new ReportAvatarAckMessage;
}

void ReportAvatarAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportedplayerid_ = 0u;
    reportavatarresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAvatarAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedPlayerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedplayerid_)));
          set_has_reportedplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reportAvatarResult;
        break;
      }
      
      // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportAvatarResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportAvatarAckMessage_ReportAvatarResult_IsValid(value)) {
            set_reportavatarresult(static_cast< ::ReportAvatarAckMessage_ReportAvatarResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAvatarAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedplayerid(), output);
  }
  
  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (has_reportavatarresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportavatarresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAvatarAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reportedPlayerId = 1;
  if (has_reportedplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reportedplayerid(), target);
  }
  
  // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
  if (has_reportavatarresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reportavatarresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAvatarAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reportedPlayerId = 1;
    if (has_reportedplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportedplayerid());
    }
    
    // required .ReportAvatarAckMessage.ReportAvatarResult reportAvatarResult = 2;
    if (has_reportavatarresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportavatarresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvatarAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAvatarAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAvatarAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAvatarAckMessage::MergeFrom(const ReportAvatarAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedplayerid()) {
      set_reportedplayerid(from.reportedplayerid());
    }
    if (from.has_reportavatarresult()) {
      set_reportavatarresult(from.reportavatarresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAvatarAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAvatarAckMessage::CopyFrom(const ReportAvatarAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvatarAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReportAvatarAckMessage::Swap(ReportAvatarAckMessage* other) {
  if (other != this) {
    std::swap(reportedplayerid_, other->reportedplayerid_);
    std::swap(reportavatarresult_, other->reportavatarresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAvatarAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAvatarAckMessage_descriptor_;
  metadata.reflection = ReportAvatarAckMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportGameMessage::kReportedGameIdFieldNumber;
#endif  // !_MSC_VER

ReportGameMessage::ReportGameMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportGameMessage::InitAsDefaultInstance() {
}

ReportGameMessage::ReportGameMessage(const ReportGameMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportGameMessage::SharedCtor() {
  _cached_size_ = 0;
  reportedgameid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGameMessage::~ReportGameMessage() {
  SharedDtor();
}

void ReportGameMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportGameMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGameMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGameMessage_descriptor_;
}

const ReportGameMessage& ReportGameMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ReportGameMessage* ReportGameMessage::default_instance_ = NULL;

ReportGameMessage* ReportGameMessage::New() const {
  return new ReportGameMessage;
}

void ReportGameMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportedgameid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
          set_has_reportedgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportGameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportGameMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reportedgameid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportGameMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reportedGameId = 1;
    if (has_reportedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportedgameid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGameMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGameMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGameMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGameMessage::MergeFrom(const ReportGameMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedgameid()) {
      set_reportedgameid(from.reportedgameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGameMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGameMessage::CopyFrom(const ReportGameMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReportGameMessage::Swap(ReportGameMessage* other) {
  if (other != this) {
    std::swap(reportedgameid_, other->reportedgameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGameMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGameMessage_descriptor_;
  metadata.reflection = ReportGameMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReportGameAckMessage_ReportGameResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGameAckMessage_ReportGameResult_descriptor_;
}
bool ReportGameAckMessage_ReportGameResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportAccepted;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportDuplicate;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::gameReportInvalid;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MIN;
const ReportGameAckMessage_ReportGameResult ReportGameAckMessage::ReportGameResult_MAX;
const int ReportGameAckMessage::ReportGameResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReportGameAckMessage::kReportedGameIdFieldNumber;
const int ReportGameAckMessage::kReportGameResultFieldNumber;
#endif  // !_MSC_VER

ReportGameAckMessage::ReportGameAckMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportGameAckMessage::InitAsDefaultInstance() {
}

ReportGameAckMessage::ReportGameAckMessage(const ReportGameAckMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportGameAckMessage::SharedCtor() {
  _cached_size_ = 0;
  reportedgameid_ = 0u;
  reportgameresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportGameAckMessage::~ReportGameAckMessage() {
  SharedDtor();
}

void ReportGameAckMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportGameAckMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportGameAckMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportGameAckMessage_descriptor_;
}

const ReportGameAckMessage& ReportGameAckMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ReportGameAckMessage* ReportGameAckMessage::default_instance_ = NULL;

ReportGameAckMessage* ReportGameAckMessage::New() const {
  return new ReportGameAckMessage;
}

void ReportGameAckMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reportedgameid_ = 0u;
    reportgameresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportGameAckMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reportedGameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportedgameid_)));
          set_has_reportedgameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reportGameResult;
        break;
      }
      
      // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportGameResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReportGameAckMessage_ReportGameResult_IsValid(value)) {
            set_reportgameresult(static_cast< ::ReportGameAckMessage_ReportGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportGameAckMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reportedgameid(), output);
  }
  
  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (has_reportgameresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reportgameresult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportGameAckMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 reportedGameId = 1;
  if (has_reportedgameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reportedgameid(), target);
  }
  
  // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
  if (has_reportgameresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reportgameresult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportGameAckMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reportedGameId = 1;
    if (has_reportedgameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportedgameid());
    }
    
    // required .ReportGameAckMessage.ReportGameResult reportGameResult = 2;
    if (has_reportgameresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reportgameresult());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportGameAckMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportGameAckMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportGameAckMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportGameAckMessage::MergeFrom(const ReportGameAckMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reportedgameid()) {
      set_reportedgameid(from.reportedgameid());
    }
    if (from.has_reportgameresult()) {
      set_reportgameresult(from.reportgameresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportGameAckMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportGameAckMessage::CopyFrom(const ReportGameAckMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportGameAckMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReportGameAckMessage::Swap(ReportGameAckMessage* other) {
  if (other != this) {
    std::swap(reportedgameid_, other->reportedgameid_);
    std::swap(reportgameresult_, other->reportgameresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportGameAckMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportGameAckMessage_descriptor_;
  metadata.reflection = ReportGameAckMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ErrorMessage_ErrorReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMessage_ErrorReason_descriptor_;
}
bool ErrorMessage_ErrorReason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ErrorMessage_ErrorReason ErrorMessage::reserved;
const ErrorMessage_ErrorReason ErrorMessage::initVersionNotSupported;
const ErrorMessage_ErrorReason ErrorMessage::initServerFull;
const ErrorMessage_ErrorReason ErrorMessage::initAuthFailure;
const ErrorMessage_ErrorReason ErrorMessage::initPlayerNameInUse;
const ErrorMessage_ErrorReason ErrorMessage::initInvalidPlayerName;
const ErrorMessage_ErrorReason ErrorMessage::initServerMaintenance;
const ErrorMessage_ErrorReason ErrorMessage::initBlocked;
const ErrorMessage_ErrorReason ErrorMessage::avatarTooLarge;
const ErrorMessage_ErrorReason ErrorMessage::invalidPacket;
const ErrorMessage_ErrorReason ErrorMessage::invalidState;
const ErrorMessage_ErrorReason ErrorMessage::kickedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::bannedFromServer;
const ErrorMessage_ErrorReason ErrorMessage::blockedByServer;
const ErrorMessage_ErrorReason ErrorMessage::sessionTimeout;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MIN;
const ErrorMessage_ErrorReason ErrorMessage::ErrorReason_MAX;
const int ErrorMessage::ErrorReason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ErrorMessage::kErrorReasonFieldNumber;
#endif  // !_MSC_VER

ErrorMessage::ErrorMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorMessage::InitAsDefaultInstance() {
}

ErrorMessage::ErrorMessage(const ErrorMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorMessage::SharedCtor() {
  _cached_size_ = 0;
  errorreason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorMessage::~ErrorMessage() {
  SharedDtor();
}

void ErrorMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMessage_descriptor_;
}

const ErrorMessage& ErrorMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

ErrorMessage* ErrorMessage::default_instance_ = NULL;

ErrorMessage* ErrorMessage::New() const {
  return new ErrorMessage;
}

void ErrorMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorreason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ErrorMessage.ErrorReason errorReason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ErrorMessage_ErrorReason_IsValid(value)) {
            set_errorreason(static_cast< ::ErrorMessage_ErrorReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (has_errorreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorreason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ErrorMessage.ErrorReason errorReason = 1;
  if (has_errorreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorreason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ErrorMessage.ErrorReason errorReason = 1;
    if (has_errorreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorreason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorMessage::MergeFrom(const ErrorMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorreason()) {
      set_errorreason(from.errorreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMessage::CopyFrom(const ErrorMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ErrorMessage::Swap(ErrorMessage* other) {
  if (other != this) {
    std::swap(errorreason_, other->errorreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMessage_descriptor_;
  metadata.reflection = ErrorMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PokerTHMessage_PokerTHMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerTHMessage_PokerTHMessageType_descriptor_;
}
bool PokerTHMessage_PokerTHMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AnnounceMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerChallengeMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthClientResponseMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AuthServerVerificationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InitAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarHeaderMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarDataMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AvatarEndMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_UnknownAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerListMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListNewMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListPlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameListAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerInfoReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_SubscriptionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinNewGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejoinExistingGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_JoinGameFailedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerJoinedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GamePlayerLeftMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameAdminChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RemovedFromGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPlayerRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_LeaveGameRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InvitePlayerToGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_InviteNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectGameInvitationMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_RejectInvNotifyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartEventAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartInitialMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_GameStartRejoinMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_HandStartMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersTurnMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_MyActionRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_YourActionRejectedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayersActionDoneMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealFlopCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealTurnCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DealRiverCardMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AllInShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfHandHideCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ShowMyCardsRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AfterHandShowCardsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndOfGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_PlayerIdChangedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickPlayerMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_AskKickDeniedMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StartKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_VoteKickReplyMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_KickPetitionUpdateMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_EndKickPetitionMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_StatisticsMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRequestMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ChatRejectMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_DialogMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_TimeoutWarningMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ResetTimeoutMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportAvatarAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ReportGameAckMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::Type_ErrorMessage;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MIN;
const PokerTHMessage_PokerTHMessageType PokerTHMessage::PokerTHMessageType_MAX;
const int PokerTHMessage::PokerTHMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PokerTHMessage::kMessageTypeFieldNumber;
const int PokerTHMessage::kAnnounceMessageFieldNumber;
const int PokerTHMessage::kInitMessageFieldNumber;
const int PokerTHMessage::kAuthServerChallengeMessageFieldNumber;
const int PokerTHMessage::kAuthClientResponseMessageFieldNumber;
const int PokerTHMessage::kAuthServerVerificationMessageFieldNumber;
const int PokerTHMessage::kInitAckMessageFieldNumber;
const int PokerTHMessage::kAvatarRequestMessageFieldNumber;
const int PokerTHMessage::kAvatarHeaderMessageFieldNumber;
const int PokerTHMessage::kAvatarDataMessageFieldNumber;
const int PokerTHMessage::kAvatarEndMessageFieldNumber;
const int PokerTHMessage::kUnknownAvatarMessageFieldNumber;
const int PokerTHMessage::kPlayerListMessageFieldNumber;
const int PokerTHMessage::kGameListNewMessageFieldNumber;
const int PokerTHMessage::kGameListUpdateMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGameListPlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameListAdminChangedMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoRequestMessageFieldNumber;
const int PokerTHMessage::kPlayerInfoReplyMessageFieldNumber;
const int PokerTHMessage::kSubscriptionRequestMessageFieldNumber;
const int PokerTHMessage::kJoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinNewGameMessageFieldNumber;
const int PokerTHMessage::kRejoinExistingGameMessageFieldNumber;
const int PokerTHMessage::kJoinGameAckMessageFieldNumber;
const int PokerTHMessage::kJoinGameFailedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerJoinedMessageFieldNumber;
const int PokerTHMessage::kGamePlayerLeftMessageFieldNumber;
const int PokerTHMessage::kGameAdminChangedMessageFieldNumber;
const int PokerTHMessage::kRemovedFromGameMessageFieldNumber;
const int PokerTHMessage::kKickPlayerRequestMessageFieldNumber;
const int PokerTHMessage::kLeaveGameRequestMessageFieldNumber;
const int PokerTHMessage::kInvitePlayerToGameMessageFieldNumber;
const int PokerTHMessage::kInviteNotifyMessageFieldNumber;
const int PokerTHMessage::kRejectGameInvitationMessageFieldNumber;
const int PokerTHMessage::kRejectInvNotifyMessageFieldNumber;
const int PokerTHMessage::kStartEventMessageFieldNumber;
const int PokerTHMessage::kStartEventAckMessageFieldNumber;
const int PokerTHMessage::kGameStartInitialMessageFieldNumber;
const int PokerTHMessage::kGameStartRejoinMessageFieldNumber;
const int PokerTHMessage::kHandStartMessageFieldNumber;
const int PokerTHMessage::kPlayersTurnMessageFieldNumber;
const int PokerTHMessage::kMyActionRequestMessageFieldNumber;
const int PokerTHMessage::kYourActionRejectedMessageFieldNumber;
const int PokerTHMessage::kPlayersActionDoneMessageFieldNumber;
const int PokerTHMessage::kDealFlopCardsMessageFieldNumber;
const int PokerTHMessage::kDealTurnCardMessageFieldNumber;
const int PokerTHMessage::kDealRiverCardMessageFieldNumber;
const int PokerTHMessage::kAllInShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfHandHideCardsMessageFieldNumber;
const int PokerTHMessage::kShowMyCardsRequestMessageFieldNumber;
const int PokerTHMessage::kAfterHandShowCardsMessageFieldNumber;
const int PokerTHMessage::kEndOfGameMessageFieldNumber;
const int PokerTHMessage::kPlayerIdChangedMessageFieldNumber;
const int PokerTHMessage::kAskKickPlayerMessageFieldNumber;
const int PokerTHMessage::kAskKickDeniedMessageFieldNumber;
const int PokerTHMessage::kStartKickPetitionMessageFieldNumber;
const int PokerTHMessage::kVoteKickRequestMessageFieldNumber;
const int PokerTHMessage::kVoteKickReplyMessageFieldNumber;
const int PokerTHMessage::kKickPetitionUpdateMessageFieldNumber;
const int PokerTHMessage::kEndKickPetitionMessageFieldNumber;
const int PokerTHMessage::kStatisticsMessageFieldNumber;
const int PokerTHMessage::kChatRequestMessageFieldNumber;
const int PokerTHMessage::kChatMessageFieldNumber;
const int PokerTHMessage::kChatRejectMessageFieldNumber;
const int PokerTHMessage::kDialogMessageFieldNumber;
const int PokerTHMessage::kTimeoutWarningMessageFieldNumber;
const int PokerTHMessage::kResetTimeoutMessageFieldNumber;
const int PokerTHMessage::kReportAvatarMessageFieldNumber;
const int PokerTHMessage::kReportAvatarAckMessageFieldNumber;
const int PokerTHMessage::kReportGameMessageFieldNumber;
const int PokerTHMessage::kReportGameAckMessageFieldNumber;
const int PokerTHMessage::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

PokerTHMessage::PokerTHMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PokerTHMessage::InitAsDefaultInstance() {
  announcemessage_ = const_cast< ::AnnounceMessage*>(&::AnnounceMessage::default_instance());
  initmessage_ = const_cast< ::InitMessage*>(&::InitMessage::default_instance());
  authserverchallengemessage_ = const_cast< ::AuthServerChallengeMessage*>(&::AuthServerChallengeMessage::default_instance());
  authclientresponsemessage_ = const_cast< ::AuthClientResponseMessage*>(&::AuthClientResponseMessage::default_instance());
  authserververificationmessage_ = const_cast< ::AuthServerVerificationMessage*>(&::AuthServerVerificationMessage::default_instance());
  initackmessage_ = const_cast< ::InitAckMessage*>(&::InitAckMessage::default_instance());
  avatarrequestmessage_ = const_cast< ::AvatarRequestMessage*>(&::AvatarRequestMessage::default_instance());
  avatarheadermessage_ = const_cast< ::AvatarHeaderMessage*>(&::AvatarHeaderMessage::default_instance());
  avatardatamessage_ = const_cast< ::AvatarDataMessage*>(&::AvatarDataMessage::default_instance());
  avatarendmessage_ = const_cast< ::AvatarEndMessage*>(&::AvatarEndMessage::default_instance());
  unknownavatarmessage_ = const_cast< ::UnknownAvatarMessage*>(&::UnknownAvatarMessage::default_instance());
  playerlistmessage_ = const_cast< ::PlayerListMessage*>(&::PlayerListMessage::default_instance());
  gamelistnewmessage_ = const_cast< ::GameListNewMessage*>(&::GameListNewMessage::default_instance());
  gamelistupdatemessage_ = const_cast< ::GameListUpdateMessage*>(&::GameListUpdateMessage::default_instance());
  gamelistplayerjoinedmessage_ = const_cast< ::GameListPlayerJoinedMessage*>(&::GameListPlayerJoinedMessage::default_instance());
  gamelistplayerleftmessage_ = const_cast< ::GameListPlayerLeftMessage*>(&::GameListPlayerLeftMessage::default_instance());
  gamelistadminchangedmessage_ = const_cast< ::GameListAdminChangedMessage*>(&::GameListAdminChangedMessage::default_instance());
  playerinforequestmessage_ = const_cast< ::PlayerInfoRequestMessage*>(&::PlayerInfoRequestMessage::default_instance());
  playerinforeplymessage_ = const_cast< ::PlayerInfoReplyMessage*>(&::PlayerInfoReplyMessage::default_instance());
  subscriptionrequestmessage_ = const_cast< ::SubscriptionRequestMessage*>(&::SubscriptionRequestMessage::default_instance());
  joinexistinggamemessage_ = const_cast< ::JoinExistingGameMessage*>(&::JoinExistingGameMessage::default_instance());
  joinnewgamemessage_ = const_cast< ::JoinNewGameMessage*>(&::JoinNewGameMessage::default_instance());
  rejoinexistinggamemessage_ = const_cast< ::RejoinExistingGameMessage*>(&::RejoinExistingGameMessage::default_instance());
  joingameackmessage_ = const_cast< ::JoinGameAckMessage*>(&::JoinGameAckMessage::default_instance());
  joingamefailedmessage_ = const_cast< ::JoinGameFailedMessage*>(&::JoinGameFailedMessage::default_instance());
  gameplayerjoinedmessage_ = const_cast< ::GamePlayerJoinedMessage*>(&::GamePlayerJoinedMessage::default_instance());
  gameplayerleftmessage_ = const_cast< ::GamePlayerLeftMessage*>(&::GamePlayerLeftMessage::default_instance());
  gameadminchangedmessage_ = const_cast< ::GameAdminChangedMessage*>(&::GameAdminChangedMessage::default_instance());
  removedfromgamemessage_ = const_cast< ::RemovedFromGameMessage*>(&::RemovedFromGameMessage::default_instance());
  kickplayerrequestmessage_ = const_cast< ::KickPlayerRequestMessage*>(&::KickPlayerRequestMessage::default_instance());
  leavegamerequestmessage_ = const_cast< ::LeaveGameRequestMessage*>(&::LeaveGameRequestMessage::default_instance());
  inviteplayertogamemessage_ = const_cast< ::InvitePlayerToGameMessage*>(&::InvitePlayerToGameMessage::default_instance());
  invitenotifymessage_ = const_cast< ::InviteNotifyMessage*>(&::InviteNotifyMessage::default_instance());
  rejectgameinvitationmessage_ = const_cast< ::RejectGameInvitationMessage*>(&::RejectGameInvitationMessage::default_instance());
  rejectinvnotifymessage_ = const_cast< ::RejectInvNotifyMessage*>(&::RejectInvNotifyMessage::default_instance());
  starteventmessage_ = const_cast< ::StartEventMessage*>(&::StartEventMessage::default_instance());
  starteventackmessage_ = const_cast< ::StartEventAckMessage*>(&::StartEventAckMessage::default_instance());
  gamestartinitialmessage_ = const_cast< ::GameStartInitialMessage*>(&::GameStartInitialMessage::default_instance());
  gamestartrejoinmessage_ = const_cast< ::GameStartRejoinMessage*>(&::GameStartRejoinMessage::default_instance());
  handstartmessage_ = const_cast< ::HandStartMessage*>(&::HandStartMessage::default_instance());
  playersturnmessage_ = const_cast< ::PlayersTurnMessage*>(&::PlayersTurnMessage::default_instance());
  myactionrequestmessage_ = const_cast< ::MyActionRequestMessage*>(&::MyActionRequestMessage::default_instance());
  youractionrejectedmessage_ = const_cast< ::YourActionRejectedMessage*>(&::YourActionRejectedMessage::default_instance());
  playersactiondonemessage_ = const_cast< ::PlayersActionDoneMessage*>(&::PlayersActionDoneMessage::default_instance());
  dealflopcardsmessage_ = const_cast< ::DealFlopCardsMessage*>(&::DealFlopCardsMessage::default_instance());
  dealturncardmessage_ = const_cast< ::DealTurnCardMessage*>(&::DealTurnCardMessage::default_instance());
  dealrivercardmessage_ = const_cast< ::DealRiverCardMessage*>(&::DealRiverCardMessage::default_instance());
  allinshowcardsmessage_ = const_cast< ::AllInShowCardsMessage*>(&::AllInShowCardsMessage::default_instance());
  endofhandshowcardsmessage_ = const_cast< ::EndOfHandShowCardsMessage*>(&::EndOfHandShowCardsMessage::default_instance());
  endofhandhidecardsmessage_ = const_cast< ::EndOfHandHideCardsMessage*>(&::EndOfHandHideCardsMessage::default_instance());
  showmycardsrequestmessage_ = const_cast< ::ShowMyCardsRequestMessage*>(&::ShowMyCardsRequestMessage::default_instance());
  afterhandshowcardsmessage_ = const_cast< ::AfterHandShowCardsMessage*>(&::AfterHandShowCardsMessage::default_instance());
  endofgamemessage_ = const_cast< ::EndOfGameMessage*>(&::EndOfGameMessage::default_instance());
  playeridchangedmessage_ = const_cast< ::PlayerIdChangedMessage*>(&::PlayerIdChangedMessage::default_instance());
  askkickplayermessage_ = const_cast< ::AskKickPlayerMessage*>(&::AskKickPlayerMessage::default_instance());
  askkickdeniedmessage_ = const_cast< ::AskKickDeniedMessage*>(&::AskKickDeniedMessage::default_instance());
  startkickpetitionmessage_ = const_cast< ::StartKickPetitionMessage*>(&::StartKickPetitionMessage::default_instance());
  votekickrequestmessage_ = const_cast< ::VoteKickRequestMessage*>(&::VoteKickRequestMessage::default_instance());
  votekickreplymessage_ = const_cast< ::VoteKickReplyMessage*>(&::VoteKickReplyMessage::default_instance());
  kickpetitionupdatemessage_ = const_cast< ::KickPetitionUpdateMessage*>(&::KickPetitionUpdateMessage::default_instance());
  endkickpetitionmessage_ = const_cast< ::EndKickPetitionMessage*>(&::EndKickPetitionMessage::default_instance());
  statisticsmessage_ = const_cast< ::StatisticsMessage*>(&::StatisticsMessage::default_instance());
  chatrequestmessage_ = const_cast< ::ChatRequestMessage*>(&::ChatRequestMessage::default_instance());
  chatmessage_ = const_cast< ::ChatMessage*>(&::ChatMessage::default_instance());
  chatrejectmessage_ = const_cast< ::ChatRejectMessage*>(&::ChatRejectMessage::default_instance());
  dialogmessage_ = const_cast< ::DialogMessage*>(&::DialogMessage::default_instance());
  timeoutwarningmessage_ = const_cast< ::TimeoutWarningMessage*>(&::TimeoutWarningMessage::default_instance());
  resettimeoutmessage_ = const_cast< ::ResetTimeoutMessage*>(&::ResetTimeoutMessage::default_instance());
  reportavatarmessage_ = const_cast< ::ReportAvatarMessage*>(&::ReportAvatarMessage::default_instance());
  reportavatarackmessage_ = const_cast< ::ReportAvatarAckMessage*>(&::ReportAvatarAckMessage::default_instance());
  reportgamemessage_ = const_cast< ::ReportGameMessage*>(&::ReportGameMessage::default_instance());
  reportgameackmessage_ = const_cast< ::ReportGameAckMessage*>(&::ReportGameAckMessage::default_instance());
  errormessage_ = const_cast< ::ErrorMessage*>(&::ErrorMessage::default_instance());
}

PokerTHMessage::PokerTHMessage(const PokerTHMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PokerTHMessage::SharedCtor() {
  _cached_size_ = 0;
  messagetype_ = 1;
  announcemessage_ = NULL;
  initmessage_ = NULL;
  authserverchallengemessage_ = NULL;
  authclientresponsemessage_ = NULL;
  authserververificationmessage_ = NULL;
  initackmessage_ = NULL;
  avatarrequestmessage_ = NULL;
  avatarheadermessage_ = NULL;
  avatardatamessage_ = NULL;
  avatarendmessage_ = NULL;
  unknownavatarmessage_ = NULL;
  playerlistmessage_ = NULL;
  gamelistnewmessage_ = NULL;
  gamelistupdatemessage_ = NULL;
  gamelistplayerjoinedmessage_ = NULL;
  gamelistplayerleftmessage_ = NULL;
  gamelistadminchangedmessage_ = NULL;
  playerinforequestmessage_ = NULL;
  playerinforeplymessage_ = NULL;
  subscriptionrequestmessage_ = NULL;
  joinexistinggamemessage_ = NULL;
  joinnewgamemessage_ = NULL;
  rejoinexistinggamemessage_ = NULL;
  joingameackmessage_ = NULL;
  joingamefailedmessage_ = NULL;
  gameplayerjoinedmessage_ = NULL;
  gameplayerleftmessage_ = NULL;
  gameadminchangedmessage_ = NULL;
  removedfromgamemessage_ = NULL;
  kickplayerrequestmessage_ = NULL;
  leavegamerequestmessage_ = NULL;
  inviteplayertogamemessage_ = NULL;
  invitenotifymessage_ = NULL;
  rejectgameinvitationmessage_ = NULL;
  rejectinvnotifymessage_ = NULL;
  starteventmessage_ = NULL;
  starteventackmessage_ = NULL;
  gamestartinitialmessage_ = NULL;
  gamestartrejoinmessage_ = NULL;
  handstartmessage_ = NULL;
  playersturnmessage_ = NULL;
  myactionrequestmessage_ = NULL;
  youractionrejectedmessage_ = NULL;
  playersactiondonemessage_ = NULL;
  dealflopcardsmessage_ = NULL;
  dealturncardmessage_ = NULL;
  dealrivercardmessage_ = NULL;
  allinshowcardsmessage_ = NULL;
  endofhandshowcardsmessage_ = NULL;
  endofhandhidecardsmessage_ = NULL;
  showmycardsrequestmessage_ = NULL;
  afterhandshowcardsmessage_ = NULL;
  endofgamemessage_ = NULL;
  playeridchangedmessage_ = NULL;
  askkickplayermessage_ = NULL;
  askkickdeniedmessage_ = NULL;
  startkickpetitionmessage_ = NULL;
  votekickrequestmessage_ = NULL;
  votekickreplymessage_ = NULL;
  kickpetitionupdatemessage_ = NULL;
  endkickpetitionmessage_ = NULL;
  statisticsmessage_ = NULL;
  chatrequestmessage_ = NULL;
  chatmessage_ = NULL;
  chatrejectmessage_ = NULL;
  dialogmessage_ = NULL;
  timeoutwarningmessage_ = NULL;
  resettimeoutmessage_ = NULL;
  reportavatarmessage_ = NULL;
  reportavatarackmessage_ = NULL;
  reportgamemessage_ = NULL;
  reportgameackmessage_ = NULL;
  errormessage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PokerTHMessage::~PokerTHMessage() {
  SharedDtor();
}

void PokerTHMessage::SharedDtor() {
  if (this != default_instance_) {
    delete announcemessage_;
    delete initmessage_;
    delete authserverchallengemessage_;
    delete authclientresponsemessage_;
    delete authserververificationmessage_;
    delete initackmessage_;
    delete avatarrequestmessage_;
    delete avatarheadermessage_;
    delete avatardatamessage_;
    delete avatarendmessage_;
    delete unknownavatarmessage_;
    delete playerlistmessage_;
    delete gamelistnewmessage_;
    delete gamelistupdatemessage_;
    delete gamelistplayerjoinedmessage_;
    delete gamelistplayerleftmessage_;
    delete gamelistadminchangedmessage_;
    delete playerinforequestmessage_;
    delete playerinforeplymessage_;
    delete subscriptionrequestmessage_;
    delete joinexistinggamemessage_;
    delete joinnewgamemessage_;
    delete rejoinexistinggamemessage_;
    delete joingameackmessage_;
    delete joingamefailedmessage_;
    delete gameplayerjoinedmessage_;
    delete gameplayerleftmessage_;
    delete gameadminchangedmessage_;
    delete removedfromgamemessage_;
    delete kickplayerrequestmessage_;
    delete leavegamerequestmessage_;
    delete inviteplayertogamemessage_;
    delete invitenotifymessage_;
    delete rejectgameinvitationmessage_;
    delete rejectinvnotifymessage_;
    delete starteventmessage_;
    delete starteventackmessage_;
    delete gamestartinitialmessage_;
    delete gamestartrejoinmessage_;
    delete handstartmessage_;
    delete playersturnmessage_;
    delete myactionrequestmessage_;
    delete youractionrejectedmessage_;
    delete playersactiondonemessage_;
    delete dealflopcardsmessage_;
    delete dealturncardmessage_;
    delete dealrivercardmessage_;
    delete allinshowcardsmessage_;
    delete endofhandshowcardsmessage_;
    delete endofhandhidecardsmessage_;
    delete showmycardsrequestmessage_;
    delete afterhandshowcardsmessage_;
    delete endofgamemessage_;
    delete playeridchangedmessage_;
    delete askkickplayermessage_;
    delete askkickdeniedmessage_;
    delete startkickpetitionmessage_;
    delete votekickrequestmessage_;
    delete votekickreplymessage_;
    delete kickpetitionupdatemessage_;
    delete endkickpetitionmessage_;
    delete statisticsmessage_;
    delete chatrequestmessage_;
    delete chatmessage_;
    delete chatrejectmessage_;
    delete dialogmessage_;
    delete timeoutwarningmessage_;
    delete resettimeoutmessage_;
    delete reportavatarmessage_;
    delete reportavatarackmessage_;
    delete reportgamemessage_;
    delete reportgameackmessage_;
    delete errormessage_;
  }
}

void PokerTHMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PokerTHMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PokerTHMessage_descriptor_;
}

const PokerTHMessage& PokerTHMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pokerth_2eproto();  return *default_instance_;
}

PokerTHMessage* PokerTHMessage::default_instance_ = NULL;

PokerTHMessage* PokerTHMessage::New() const {
  return new PokerTHMessage;
}

void PokerTHMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    messagetype_ = 1;
    if (has_announcemessage()) {
      if (announcemessage_ != NULL) announcemessage_->::AnnounceMessage::Clear();
    }
    if (has_initmessage()) {
      if (initmessage_ != NULL) initmessage_->::InitMessage::Clear();
    }
    if (has_authserverchallengemessage()) {
      if (authserverchallengemessage_ != NULL) authserverchallengemessage_->::AuthServerChallengeMessage::Clear();
    }
    if (has_authclientresponsemessage()) {
      if (authclientresponsemessage_ != NULL) authclientresponsemessage_->::AuthClientResponseMessage::Clear();
    }
    if (has_authserververificationmessage()) {
      if (authserververificationmessage_ != NULL) authserververificationmessage_->::AuthServerVerificationMessage::Clear();
    }
    if (has_initackmessage()) {
      if (initackmessage_ != NULL) initackmessage_->::InitAckMessage::Clear();
    }
    if (has_avatarrequestmessage()) {
      if (avatarrequestmessage_ != NULL) avatarrequestmessage_->::AvatarRequestMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_avatarheadermessage()) {
      if (avatarheadermessage_ != NULL) avatarheadermessage_->::AvatarHeaderMessage::Clear();
    }
    if (has_avatardatamessage()) {
      if (avatardatamessage_ != NULL) avatardatamessage_->::AvatarDataMessage::Clear();
    }
    if (has_avatarendmessage()) {
      if (avatarendmessage_ != NULL) avatarendmessage_->::AvatarEndMessage::Clear();
    }
    if (has_unknownavatarmessage()) {
      if (unknownavatarmessage_ != NULL) unknownavatarmessage_->::UnknownAvatarMessage::Clear();
    }
    if (has_playerlistmessage()) {
      if (playerlistmessage_ != NULL) playerlistmessage_->::PlayerListMessage::Clear();
    }
    if (has_gamelistnewmessage()) {
      if (gamelistnewmessage_ != NULL) gamelistnewmessage_->::GameListNewMessage::Clear();
    }
    if (has_gamelistupdatemessage()) {
      if (gamelistupdatemessage_ != NULL) gamelistupdatemessage_->::GameListUpdateMessage::Clear();
    }
    if (has_gamelistplayerjoinedmessage()) {
      if (gamelistplayerjoinedmessage_ != NULL) gamelistplayerjoinedmessage_->::GameListPlayerJoinedMessage::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_gamelistplayerleftmessage()) {
      if (gamelistplayerleftmessage_ != NULL) gamelistplayerleftmessage_->::GameListPlayerLeftMessage::Clear();
    }
    if (has_gamelistadminchangedmessage()) {
      if (gamelistadminchangedmessage_ != NULL) gamelistadminchangedmessage_->::GameListAdminChangedMessage::Clear();
    }
    if (has_playerinforequestmessage()) {
      if (playerinforequestmessage_ != NULL) playerinforequestmessage_->::PlayerInfoRequestMessage::Clear();
    }
    if (has_playerinforeplymessage()) {
      if (playerinforeplymessage_ != NULL) playerinforeplymessage_->::PlayerInfoReplyMessage::Clear();
    }
    if (has_subscriptionrequestmessage()) {
      if (subscriptionrequestmessage_ != NULL) subscriptionrequestmessage_->::SubscriptionRequestMessage::Clear();
    }
    if (has_joinexistinggamemessage()) {
      if (joinexistinggamemessage_ != NULL) joinexistinggamemessage_->::JoinExistingGameMessage::Clear();
    }
    if (has_joinnewgamemessage()) {
      if (joinnewgamemessage_ != NULL) joinnewgamemessage_->::JoinNewGameMessage::Clear();
    }
    if (has_rejoinexistinggamemessage()) {
      if (rejoinexistinggamemessage_ != NULL) rejoinexistinggamemessage_->::RejoinExistingGameMessage::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_joingameackmessage()) {
      if (joingameackmessage_ != NULL) joingameackmessage_->::JoinGameAckMessage::Clear();
    }
    if (has_joingamefailedmessage()) {
      if (joingamefailedmessage_ != NULL) joingamefailedmessage_->::JoinGameFailedMessage::Clear();
    }
    if (has_gameplayerjoinedmessage()) {
      if (gameplayerjoinedmessage_ != NULL) gameplayerjoinedmessage_->::GamePlayerJoinedMessage::Clear();
    }
    if (has_gameplayerleftmessage()) {
      if (gameplayerleftmessage_ != NULL) gameplayerleftmessage_->::GamePlayerLeftMessage::Clear();
    }
    if (has_gameadminchangedmessage()) {
      if (gameadminchangedmessage_ != NULL) gameadminchangedmessage_->::GameAdminChangedMessage::Clear();
    }
    if (has_removedfromgamemessage()) {
      if (removedfromgamemessage_ != NULL) removedfromgamemessage_->::RemovedFromGameMessage::Clear();
    }
    if (has_kickplayerrequestmessage()) {
      if (kickplayerrequestmessage_ != NULL) kickplayerrequestmessage_->::KickPlayerRequestMessage::Clear();
    }
    if (has_leavegamerequestmessage()) {
      if (leavegamerequestmessage_ != NULL) leavegamerequestmessage_->::LeaveGameRequestMessage::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_inviteplayertogamemessage()) {
      if (inviteplayertogamemessage_ != NULL) inviteplayertogamemessage_->::InvitePlayerToGameMessage::Clear();
    }
    if (has_invitenotifymessage()) {
      if (invitenotifymessage_ != NULL) invitenotifymessage_->::InviteNotifyMessage::Clear();
    }
    if (has_rejectgameinvitationmessage()) {
      if (rejectgameinvitationmessage_ != NULL) rejectgameinvitationmessage_->::RejectGameInvitationMessage::Clear();
    }
    if (has_rejectinvnotifymessage()) {
      if (rejectinvnotifymessage_ != NULL) rejectinvnotifymessage_->::RejectInvNotifyMessage::Clear();
    }
    if (has_starteventmessage()) {
      if (starteventmessage_ != NULL) starteventmessage_->::StartEventMessage::Clear();
    }
    if (has_starteventackmessage()) {
      if (starteventackmessage_ != NULL) starteventackmessage_->::StartEventAckMessage::Clear();
    }
    if (has_gamestartinitialmessage()) {
      if (gamestartinitialmessage_ != NULL) gamestartinitialmessage_->::GameStartInitialMessage::Clear();
    }
    if (has_gamestartrejoinmessage()) {
      if (gamestartrejoinmessage_ != NULL) gamestartrejoinmessage_->::GameStartRejoinMessage::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_handstartmessage()) {
      if (handstartmessage_ != NULL) handstartmessage_->::HandStartMessage::Clear();
    }
    if (has_playersturnmessage()) {
      if (playersturnmessage_ != NULL) playersturnmessage_->::PlayersTurnMessage::Clear();
    }
    if (has_myactionrequestmessage()) {
      if (myactionrequestmessage_ != NULL) myactionrequestmessage_->::MyActionRequestMessage::Clear();
    }
    if (has_youractionrejectedmessage()) {
      if (youractionrejectedmessage_ != NULL) youractionrejectedmessage_->::YourActionRejectedMessage::Clear();
    }
    if (has_playersactiondonemessage()) {
      if (playersactiondonemessage_ != NULL) playersactiondonemessage_->::PlayersActionDoneMessage::Clear();
    }
    if (has_dealflopcardsmessage()) {
      if (dealflopcardsmessage_ != NULL) dealflopcardsmessage_->::DealFlopCardsMessage::Clear();
    }
    if (has_dealturncardmessage()) {
      if (dealturncardmessage_ != NULL) dealturncardmessage_->::DealTurnCardMessage::Clear();
    }
    if (has_dealrivercardmessage()) {
      if (dealrivercardmessage_ != NULL) dealrivercardmessage_->::DealRiverCardMessage::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_allinshowcardsmessage()) {
      if (allinshowcardsmessage_ != NULL) allinshowcardsmessage_->::AllInShowCardsMessage::Clear();
    }
    if (has_endofhandshowcardsmessage()) {
      if (endofhandshowcardsmessage_ != NULL) endofhandshowcardsmessage_->::EndOfHandShowCardsMessage::Clear();
    }
    if (has_endofhandhidecardsmessage()) {
      if (endofhandhidecardsmessage_ != NULL) endofhandhidecardsmessage_->::EndOfHandHideCardsMessage::Clear();
    }
    if (has_showmycardsrequestmessage()) {
      if (showmycardsrequestmessage_ != NULL) showmycardsrequestmessage_->::ShowMyCardsRequestMessage::Clear();
    }
    if (has_afterhandshowcardsmessage()) {
      if (afterhandshowcardsmessage_ != NULL) afterhandshowcardsmessage_->::AfterHandShowCardsMessage::Clear();
    }
    if (has_endofgamemessage()) {
      if (endofgamemessage_ != NULL) endofgamemessage_->::EndOfGameMessage::Clear();
    }
    if (has_playeridchangedmessage()) {
      if (playeridchangedmessage_ != NULL) playeridchangedmessage_->::PlayerIdChangedMessage::Clear();
    }
    if (has_askkickplayermessage()) {
      if (askkickplayermessage_ != NULL) askkickplayermessage_->::AskKickPlayerMessage::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_askkickdeniedmessage()) {
      if (askkickdeniedmessage_ != NULL) askkickdeniedmessage_->::AskKickDeniedMessage::Clear();
    }
    if (has_startkickpetitionmessage()) {
      if (startkickpetitionmessage_ != NULL) startkickpetitionmessage_->::StartKickPetitionMessage::Clear();
    }
    if (has_votekickrequestmessage()) {
      if (votekickrequestmessage_ != NULL) votekickrequestmessage_->::VoteKickRequestMessage::Clear();
    }
    if (has_votekickreplymessage()) {
      if (votekickreplymessage_ != NULL) votekickreplymessage_->::VoteKickReplyMessage::Clear();
    }
    if (has_kickpetitionupdatemessage()) {
      if (kickpetitionupdatemessage_ != NULL) kickpetitionupdatemessage_->::KickPetitionUpdateMessage::Clear();
    }
    if (has_endkickpetitionmessage()) {
      if (endkickpetitionmessage_ != NULL) endkickpetitionmessage_->::EndKickPetitionMessage::Clear();
    }
    if (has_statisticsmessage()) {
      if (statisticsmessage_ != NULL) statisticsmessage_->::StatisticsMessage::Clear();
    }
    if (has_chatrequestmessage()) {
      if (chatrequestmessage_ != NULL) chatrequestmessage_->::ChatRequestMessage::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_chatmessage()) {
      if (chatmessage_ != NULL) chatmessage_->::ChatMessage::Clear();
    }
    if (has_chatrejectmessage()) {
      if (chatrejectmessage_ != NULL) chatrejectmessage_->::ChatRejectMessage::Clear();
    }
    if (has_dialogmessage()) {
      if (dialogmessage_ != NULL) dialogmessage_->::DialogMessage::Clear();
    }
    if (has_timeoutwarningmessage()) {
      if (timeoutwarningmessage_ != NULL) timeoutwarningmessage_->::TimeoutWarningMessage::Clear();
    }
    if (has_resettimeoutmessage()) {
      if (resettimeoutmessage_ != NULL) resettimeoutmessage_->::ResetTimeoutMessage::Clear();
    }
    if (has_reportavatarmessage()) {
      if (reportavatarmessage_ != NULL) reportavatarmessage_->::ReportAvatarMessage::Clear();
    }
    if (has_reportavatarackmessage()) {
      if (reportavatarackmessage_ != NULL) reportavatarackmessage_->::ReportAvatarAckMessage::Clear();
    }
    if (has_reportgamemessage()) {
      if (reportgamemessage_ != NULL) reportgamemessage_->::ReportGameMessage::Clear();
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has_reportgameackmessage()) {
      if (reportgameackmessage_ != NULL) reportgameackmessage_->::ReportGameAckMessage::Clear();
    }
    if (has_errormessage()) {
      if (errormessage_ != NULL) errormessage_->::ErrorMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PokerTHMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PokerTHMessage.PokerTHMessageType messageType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PokerTHMessage_PokerTHMessageType_IsValid(value)) {
            set_messagetype(static_cast< ::PokerTHMessage_PokerTHMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_announceMessage;
        break;
      }
      
      // optional .AnnounceMessage announceMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announceMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_announcemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_initMessage;
        break;
      }
      
      // optional .InitMessage initMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_authServerChallengeMessage;
        break;
      }
      
      // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authServerChallengeMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authserverchallengemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_authClientResponseMessage;
        break;
      }
      
      // optional .AuthClientResponseMessage authClientResponseMessage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authClientResponseMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authclientresponsemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_authServerVerificationMessage;
        break;
      }
      
      // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authServerVerificationMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authserververificationmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_initAckMessage;
        break;
      }
      
      // optional .InitAckMessage initAckMessage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initackmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_avatarRequestMessage;
        break;
      }
      
      // optional .AvatarRequestMessage avatarRequestMessage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_avatarHeaderMessage;
        break;
      }
      
      // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarHeaderMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarheadermessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_avatarDataMessage;
        break;
      }
      
      // optional .AvatarDataMessage avatarDataMessage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarDataMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatardatamessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_avatarEndMessage;
        break;
      }
      
      // optional .AvatarEndMessage avatarEndMessage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatarEndMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatarendmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_unknownAvatarMessage;
        break;
      }
      
      // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unknownAvatarMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknownavatarmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_playerListMessage;
        break;
      }
      
      // optional .PlayerListMessage playerListMessage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerListMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlistmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_gameListNewMessage;
        break;
      }
      
      // optional .GameListNewMessage gameListNewMessage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameListNewMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistnewmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_gameListUpdateMessage;
        break;
      }
      
      // optional .GameListUpdateMessage gameListUpdateMessage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameListUpdateMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistupdatemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_gameListPlayerJoinedMessage;
        break;
      }
      
      // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameListPlayerJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistplayerjoinedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_gameListPlayerLeftMessage;
        break;
      }
      
      // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameListPlayerLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistplayerleftmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gameListAdminChangedMessage;
        break;
      }
      
      // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameListAdminChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamelistadminchangedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_playerInfoRequestMessage;
        break;
      }
      
      // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfoRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinforequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerInfoReplyMessage;
        break;
      }
      
      // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfoReplyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinforeplymessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_subscriptionRequestMessage;
        break;
      }
      
      // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptionRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriptionrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_joinExistingGameMessage;
        break;
      }
      
      // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joinExistingGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinexistinggamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_joinNewGameMessage;
        break;
      }
      
      // optional .JoinNewGameMessage joinNewGameMessage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joinNewGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joinnewgamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_rejoinExistingGameMessage;
        break;
      }
      
      // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rejoinExistingGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejoinexistinggamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_joinGameAckMessage;
        break;
      }
      
      // optional .JoinGameAckMessage joinGameAckMessage = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joinGameAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joingameackmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_joinGameFailedMessage;
        break;
      }
      
      // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joinGameFailedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joingamefailedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_gamePlayerJoinedMessage;
        break;
      }
      
      // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamePlayerJoinedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameplayerjoinedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_gamePlayerLeftMessage;
        break;
      }
      
      // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamePlayerLeftMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameplayerleftmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_gameAdminChangedMessage;
        break;
      }
      
      // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameAdminChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameadminchangedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_removedFromGameMessage;
        break;
      }
      
      // optional .RemovedFromGameMessage removedFromGameMessage = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_removedFromGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_removedfromgamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_kickPlayerRequestMessage;
        break;
      }
      
      // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kickPlayerRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickplayerrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_leaveGameRequestMessage;
        break;
      }
      
      // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaveGameRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leavegamerequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_invitePlayerToGameMessage;
        break;
      }
      
      // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invitePlayerToGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviteplayertogamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_inviteNotifyMessage;
        break;
      }
      
      // optional .InviteNotifyMessage inviteNotifyMessage = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviteNotifyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitenotifymessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_rejectGameInvitationMessage;
        break;
      }
      
      // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rejectGameInvitationMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejectgameinvitationmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_rejectInvNotifyMessage;
        break;
      }
      
      // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rejectInvNotifyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rejectinvnotifymessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_startEventMessage;
        break;
      }
      
      // optional .StartEventMessage startEventMessage = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startEventMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starteventmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_startEventAckMessage;
        break;
      }
      
      // optional .StartEventAckMessage startEventAckMessage = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startEventAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starteventackmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_gameStartInitialMessage;
        break;
      }
      
      // optional .GameStartInitialMessage gameStartInitialMessage = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameStartInitialMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartinitialmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_gameStartRejoinMessage;
        break;
      }
      
      // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameStartRejoinMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamestartrejoinmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_handStartMessage;
        break;
      }
      
      // optional .HandStartMessage handStartMessage = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handStartMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handstartmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_playersTurnMessage;
        break;
      }
      
      // optional .PlayersTurnMessage playersTurnMessage = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playersTurnMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersturnmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_myActionRequestMessage;
        break;
      }
      
      // optional .MyActionRequestMessage myActionRequestMessage = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myActionRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myactionrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_yourActionRejectedMessage;
        break;
      }
      
      // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yourActionRejectedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_youractionrejectedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_playersActionDoneMessage;
        break;
      }
      
      // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playersActionDoneMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersactiondonemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_dealFlopCardsMessage;
        break;
      }
      
      // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealFlopCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealflopcardsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_dealTurnCardMessage;
        break;
      }
      
      // optional .DealTurnCardMessage dealTurnCardMessage = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealTurnCardMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealturncardmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_dealRiverCardMessage;
        break;
      }
      
      // optional .DealRiverCardMessage dealRiverCardMessage = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dealRiverCardMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealrivercardmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_allInShowCardsMessage;
        break;
      }
      
      // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allInShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allinshowcardsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_endOfHandShowCardsMessage;
        break;
      }
      
      // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endOfHandShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofhandshowcardsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_endOfHandHideCardsMessage;
        break;
      }
      
      // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endOfHandHideCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofhandhidecardsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_showMyCardsRequestMessage;
        break;
      }
      
      // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showMyCardsRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_showmycardsrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_afterHandShowCardsMessage;
        break;
      }
      
      // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afterHandShowCardsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afterhandshowcardsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_endOfGameMessage;
        break;
      }
      
      // optional .EndOfGameMessage endOfGameMessage = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endOfGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endofgamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_playerIdChangedMessage;
        break;
      }
      
      // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerIdChangedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playeridchangedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_askKickPlayerMessage;
        break;
      }
      
      // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askKickPlayerMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askkickplayermessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_askKickDeniedMessage;
        break;
      }
      
      // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askKickDeniedMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askkickdeniedmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_startKickPetitionMessage;
        break;
      }
      
      // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startKickPetitionMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startkickpetitionmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_voteKickRequestMessage;
        break;
      }
      
      // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voteKickRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_votekickrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_voteKickReplyMessage;
        break;
      }
      
      // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voteKickReplyMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_votekickreplymessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_kickPetitionUpdateMessage;
        break;
      }
      
      // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kickPetitionUpdateMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kickpetitionupdatemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_endKickPetitionMessage;
        break;
      }
      
      // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endKickPetitionMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endkickpetitionmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_statisticsMessage;
        break;
      }
      
      // optional .StatisticsMessage statisticsMessage = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statisticsMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statisticsmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_chatRequestMessage;
        break;
      }
      
      // optional .ChatRequestMessage chatRequestMessage = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatRequestMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrequestmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_chatMessage;
        break;
      }
      
      // optional .ChatMessage chatMessage = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_chatRejectMessage;
        break;
      }
      
      // optional .ChatRejectMessage chatRejectMessage = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatRejectMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrejectmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_dialogMessage;
        break;
      }
      
      // optional .DialogMessage dialogMessage = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dialogMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dialogmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_timeoutWarningMessage;
        break;
      }
      
      // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeoutWarningMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeoutwarningmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_resetTimeoutMessage;
        break;
      }
      
      // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resetTimeoutMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resettimeoutmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_reportAvatarMessage;
        break;
      }
      
      // optional .ReportAvatarMessage reportAvatarMessage = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportAvatarMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportavatarmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_reportAvatarAckMessage;
        break;
      }
      
      // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportAvatarAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportavatarackmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_reportGameMessage;
        break;
      }
      
      // optional .ReportGameMessage reportGameMessage = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportGameMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportgamemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_reportGameAckMessage;
        break;
      }
      
      // optional .ReportGameAckMessage reportGameAckMessage = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportGameAckMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reportgameackmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_errorMessage;
        break;
      }
      
      // optional .ErrorMessage errorMessage = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errormessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PokerTHMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->messagetype(), output);
  }
  
  // optional .AnnounceMessage announceMessage = 2;
  if (has_announcemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->announcemessage(), output);
  }
  
  // optional .InitMessage initMessage = 3;
  if (has_initmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->initmessage(), output);
  }
  
  // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
  if (has_authserverchallengemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->authserverchallengemessage(), output);
  }
  
  // optional .AuthClientResponseMessage authClientResponseMessage = 5;
  if (has_authclientresponsemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->authclientresponsemessage(), output);
  }
  
  // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
  if (has_authserververificationmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->authserververificationmessage(), output);
  }
  
  // optional .InitAckMessage initAckMessage = 7;
  if (has_initackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->initackmessage(), output);
  }
  
  // optional .AvatarRequestMessage avatarRequestMessage = 8;
  if (has_avatarrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->avatarrequestmessage(), output);
  }
  
  // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
  if (has_avatarheadermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->avatarheadermessage(), output);
  }
  
  // optional .AvatarDataMessage avatarDataMessage = 10;
  if (has_avatardatamessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->avatardatamessage(), output);
  }
  
  // optional .AvatarEndMessage avatarEndMessage = 11;
  if (has_avatarendmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->avatarendmessage(), output);
  }
  
  // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
  if (has_unknownavatarmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->unknownavatarmessage(), output);
  }
  
  // optional .PlayerListMessage playerListMessage = 13;
  if (has_playerlistmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->playerlistmessage(), output);
  }
  
  // optional .GameListNewMessage gameListNewMessage = 14;
  if (has_gamelistnewmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gamelistnewmessage(), output);
  }
  
  // optional .GameListUpdateMessage gameListUpdateMessage = 15;
  if (has_gamelistupdatemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->gamelistupdatemessage(), output);
  }
  
  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
  if (has_gamelistplayerjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->gamelistplayerjoinedmessage(), output);
  }
  
  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
  if (has_gamelistplayerleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->gamelistplayerleftmessage(), output);
  }
  
  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
  if (has_gamelistadminchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->gamelistadminchangedmessage(), output);
  }
  
  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
  if (has_playerinforequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->playerinforequestmessage(), output);
  }
  
  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
  if (has_playerinforeplymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->playerinforeplymessage(), output);
  }
  
  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
  if (has_subscriptionrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->subscriptionrequestmessage(), output);
  }
  
  // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
  if (has_joinexistinggamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->joinexistinggamemessage(), output);
  }
  
  // optional .JoinNewGameMessage joinNewGameMessage = 23;
  if (has_joinnewgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->joinnewgamemessage(), output);
  }
  
  // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
  if (has_rejoinexistinggamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->rejoinexistinggamemessage(), output);
  }
  
  // optional .JoinGameAckMessage joinGameAckMessage = 25;
  if (has_joingameackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->joingameackmessage(), output);
  }
  
  // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
  if (has_joingamefailedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->joingamefailedmessage(), output);
  }
  
  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
  if (has_gameplayerjoinedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->gameplayerjoinedmessage(), output);
  }
  
  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
  if (has_gameplayerleftmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->gameplayerleftmessage(), output);
  }
  
  // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
  if (has_gameadminchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->gameadminchangedmessage(), output);
  }
  
  // optional .RemovedFromGameMessage removedFromGameMessage = 30;
  if (has_removedfromgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->removedfromgamemessage(), output);
  }
  
  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
  if (has_kickplayerrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->kickplayerrequestmessage(), output);
  }
  
  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
  if (has_leavegamerequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->leavegamerequestmessage(), output);
  }
  
  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
  if (has_inviteplayertogamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->inviteplayertogamemessage(), output);
  }
  
  // optional .InviteNotifyMessage inviteNotifyMessage = 34;
  if (has_invitenotifymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->invitenotifymessage(), output);
  }
  
  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
  if (has_rejectgameinvitationmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->rejectgameinvitationmessage(), output);
  }
  
  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
  if (has_rejectinvnotifymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->rejectinvnotifymessage(), output);
  }
  
  // optional .StartEventMessage startEventMessage = 37;
  if (has_starteventmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->starteventmessage(), output);
  }
  
  // optional .StartEventAckMessage startEventAckMessage = 38;
  if (has_starteventackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->starteventackmessage(), output);
  }
  
  // optional .GameStartInitialMessage gameStartInitialMessage = 39;
  if (has_gamestartinitialmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->gamestartinitialmessage(), output);
  }
  
  // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
  if (has_gamestartrejoinmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->gamestartrejoinmessage(), output);
  }
  
  // optional .HandStartMessage handStartMessage = 41;
  if (has_handstartmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->handstartmessage(), output);
  }
  
  // optional .PlayersTurnMessage playersTurnMessage = 42;
  if (has_playersturnmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->playersturnmessage(), output);
  }
  
  // optional .MyActionRequestMessage myActionRequestMessage = 43;
  if (has_myactionrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->myactionrequestmessage(), output);
  }
  
  // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
  if (has_youractionrejectedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->youractionrejectedmessage(), output);
  }
  
  // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
  if (has_playersactiondonemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->playersactiondonemessage(), output);
  }
  
  // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
  if (has_dealflopcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->dealflopcardsmessage(), output);
  }
  
  // optional .DealTurnCardMessage dealTurnCardMessage = 47;
  if (has_dealturncardmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->dealturncardmessage(), output);
  }
  
  // optional .DealRiverCardMessage dealRiverCardMessage = 48;
  if (has_dealrivercardmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->dealrivercardmessage(), output);
  }
  
  // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
  if (has_allinshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->allinshowcardsmessage(), output);
  }
  
  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
  if (has_endofhandshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->endofhandshowcardsmessage(), output);
  }
  
  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
  if (has_endofhandhidecardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->endofhandhidecardsmessage(), output);
  }
  
  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
  if (has_showmycardsrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->showmycardsrequestmessage(), output);
  }
  
  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
  if (has_afterhandshowcardsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->afterhandshowcardsmessage(), output);
  }
  
  // optional .EndOfGameMessage endOfGameMessage = 54;
  if (has_endofgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->endofgamemessage(), output);
  }
  
  // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
  if (has_playeridchangedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->playeridchangedmessage(), output);
  }
  
  // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
  if (has_askkickplayermessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->askkickplayermessage(), output);
  }
  
  // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
  if (has_askkickdeniedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->askkickdeniedmessage(), output);
  }
  
  // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
  if (has_startkickpetitionmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->startkickpetitionmessage(), output);
  }
  
  // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
  if (has_votekickrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->votekickrequestmessage(), output);
  }
  
  // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
  if (has_votekickreplymessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->votekickreplymessage(), output);
  }
  
  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
  if (has_kickpetitionupdatemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->kickpetitionupdatemessage(), output);
  }
  
  // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
  if (has_endkickpetitionmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->endkickpetitionmessage(), output);
  }
  
  // optional .StatisticsMessage statisticsMessage = 63;
  if (has_statisticsmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->statisticsmessage(), output);
  }
  
  // optional .ChatRequestMessage chatRequestMessage = 64;
  if (has_chatrequestmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->chatrequestmessage(), output);
  }
  
  // optional .ChatMessage chatMessage = 65;
  if (has_chatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->chatmessage(), output);
  }
  
  // optional .ChatRejectMessage chatRejectMessage = 66;
  if (has_chatrejectmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->chatrejectmessage(), output);
  }
  
  // optional .DialogMessage dialogMessage = 67;
  if (has_dialogmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->dialogmessage(), output);
  }
  
  // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
  if (has_timeoutwarningmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->timeoutwarningmessage(), output);
  }
  
  // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
  if (has_resettimeoutmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->resettimeoutmessage(), output);
  }
  
  // optional .ReportAvatarMessage reportAvatarMessage = 70;
  if (has_reportavatarmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->reportavatarmessage(), output);
  }
  
  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
  if (has_reportavatarackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->reportavatarackmessage(), output);
  }
  
  // optional .ReportGameMessage reportGameMessage = 72;
  if (has_reportgamemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->reportgamemessage(), output);
  }
  
  // optional .ReportGameAckMessage reportGameAckMessage = 73;
  if (has_reportgameackmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->reportgameackmessage(), output);
  }
  
  // optional .ErrorMessage errorMessage = 74;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PokerTHMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PokerTHMessage.PokerTHMessageType messageType = 1;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->messagetype(), target);
  }
  
  // optional .AnnounceMessage announceMessage = 2;
  if (has_announcemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->announcemessage(), target);
  }
  
  // optional .InitMessage initMessage = 3;
  if (has_initmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->initmessage(), target);
  }
  
  // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
  if (has_authserverchallengemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->authserverchallengemessage(), target);
  }
  
  // optional .AuthClientResponseMessage authClientResponseMessage = 5;
  if (has_authclientresponsemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->authclientresponsemessage(), target);
  }
  
  // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
  if (has_authserververificationmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->authserververificationmessage(), target);
  }
  
  // optional .InitAckMessage initAckMessage = 7;
  if (has_initackmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->initackmessage(), target);
  }
  
  // optional .AvatarRequestMessage avatarRequestMessage = 8;
  if (has_avatarrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->avatarrequestmessage(), target);
  }
  
  // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
  if (has_avatarheadermessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->avatarheadermessage(), target);
  }
  
  // optional .AvatarDataMessage avatarDataMessage = 10;
  if (has_avatardatamessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->avatardatamessage(), target);
  }
  
  // optional .AvatarEndMessage avatarEndMessage = 11;
  if (has_avatarendmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->avatarendmessage(), target);
  }
  
  // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
  if (has_unknownavatarmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->unknownavatarmessage(), target);
  }
  
  // optional .PlayerListMessage playerListMessage = 13;
  if (has_playerlistmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->playerlistmessage(), target);
  }
  
  // optional .GameListNewMessage gameListNewMessage = 14;
  if (has_gamelistnewmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gamelistnewmessage(), target);
  }
  
  // optional .GameListUpdateMessage gameListUpdateMessage = 15;
  if (has_gamelistupdatemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->gamelistupdatemessage(), target);
  }
  
  // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
  if (has_gamelistplayerjoinedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->gamelistplayerjoinedmessage(), target);
  }
  
  // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
  if (has_gamelistplayerleftmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->gamelistplayerleftmessage(), target);
  }
  
  // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
  if (has_gamelistadminchangedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->gamelistadminchangedmessage(), target);
  }
  
  // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
  if (has_playerinforequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->playerinforequestmessage(), target);
  }
  
  // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
  if (has_playerinforeplymessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->playerinforeplymessage(), target);
  }
  
  // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
  if (has_subscriptionrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->subscriptionrequestmessage(), target);
  }
  
  // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
  if (has_joinexistinggamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->joinexistinggamemessage(), target);
  }
  
  // optional .JoinNewGameMessage joinNewGameMessage = 23;
  if (has_joinnewgamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->joinnewgamemessage(), target);
  }
  
  // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
  if (has_rejoinexistinggamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->rejoinexistinggamemessage(), target);
  }
  
  // optional .JoinGameAckMessage joinGameAckMessage = 25;
  if (has_joingameackmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->joingameackmessage(), target);
  }
  
  // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
  if (has_joingamefailedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->joingamefailedmessage(), target);
  }
  
  // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
  if (has_gameplayerjoinedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->gameplayerjoinedmessage(), target);
  }
  
  // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
  if (has_gameplayerleftmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->gameplayerleftmessage(), target);
  }
  
  // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
  if (has_gameadminchangedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->gameadminchangedmessage(), target);
  }
  
  // optional .RemovedFromGameMessage removedFromGameMessage = 30;
  if (has_removedfromgamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->removedfromgamemessage(), target);
  }
  
  // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
  if (has_kickplayerrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->kickplayerrequestmessage(), target);
  }
  
  // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
  if (has_leavegamerequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->leavegamerequestmessage(), target);
  }
  
  // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
  if (has_inviteplayertogamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->inviteplayertogamemessage(), target);
  }
  
  // optional .InviteNotifyMessage inviteNotifyMessage = 34;
  if (has_invitenotifymessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->invitenotifymessage(), target);
  }
  
  // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
  if (has_rejectgameinvitationmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->rejectgameinvitationmessage(), target);
  }
  
  // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
  if (has_rejectinvnotifymessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->rejectinvnotifymessage(), target);
  }
  
  // optional .StartEventMessage startEventMessage = 37;
  if (has_starteventmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->starteventmessage(), target);
  }
  
  // optional .StartEventAckMessage startEventAckMessage = 38;
  if (has_starteventackmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->starteventackmessage(), target);
  }
  
  // optional .GameStartInitialMessage gameStartInitialMessage = 39;
  if (has_gamestartinitialmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->gamestartinitialmessage(), target);
  }
  
  // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
  if (has_gamestartrejoinmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->gamestartrejoinmessage(), target);
  }
  
  // optional .HandStartMessage handStartMessage = 41;
  if (has_handstartmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->handstartmessage(), target);
  }
  
  // optional .PlayersTurnMessage playersTurnMessage = 42;
  if (has_playersturnmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->playersturnmessage(), target);
  }
  
  // optional .MyActionRequestMessage myActionRequestMessage = 43;
  if (has_myactionrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->myactionrequestmessage(), target);
  }
  
  // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
  if (has_youractionrejectedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->youractionrejectedmessage(), target);
  }
  
  // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
  if (has_playersactiondonemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->playersactiondonemessage(), target);
  }
  
  // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
  if (has_dealflopcardsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->dealflopcardsmessage(), target);
  }
  
  // optional .DealTurnCardMessage dealTurnCardMessage = 47;
  if (has_dealturncardmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->dealturncardmessage(), target);
  }
  
  // optional .DealRiverCardMessage dealRiverCardMessage = 48;
  if (has_dealrivercardmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->dealrivercardmessage(), target);
  }
  
  // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
  if (has_allinshowcardsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->allinshowcardsmessage(), target);
  }
  
  // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
  if (has_endofhandshowcardsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->endofhandshowcardsmessage(), target);
  }
  
  // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
  if (has_endofhandhidecardsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->endofhandhidecardsmessage(), target);
  }
  
  // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
  if (has_showmycardsrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->showmycardsrequestmessage(), target);
  }
  
  // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
  if (has_afterhandshowcardsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->afterhandshowcardsmessage(), target);
  }
  
  // optional .EndOfGameMessage endOfGameMessage = 54;
  if (has_endofgamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->endofgamemessage(), target);
  }
  
  // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
  if (has_playeridchangedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->playeridchangedmessage(), target);
  }
  
  // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
  if (has_askkickplayermessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->askkickplayermessage(), target);
  }
  
  // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
  if (has_askkickdeniedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->askkickdeniedmessage(), target);
  }
  
  // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
  if (has_startkickpetitionmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->startkickpetitionmessage(), target);
  }
  
  // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
  if (has_votekickrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->votekickrequestmessage(), target);
  }
  
  // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
  if (has_votekickreplymessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->votekickreplymessage(), target);
  }
  
  // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
  if (has_kickpetitionupdatemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->kickpetitionupdatemessage(), target);
  }
  
  // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
  if (has_endkickpetitionmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->endkickpetitionmessage(), target);
  }
  
  // optional .StatisticsMessage statisticsMessage = 63;
  if (has_statisticsmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->statisticsmessage(), target);
  }
  
  // optional .ChatRequestMessage chatRequestMessage = 64;
  if (has_chatrequestmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->chatrequestmessage(), target);
  }
  
  // optional .ChatMessage chatMessage = 65;
  if (has_chatmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->chatmessage(), target);
  }
  
  // optional .ChatRejectMessage chatRejectMessage = 66;
  if (has_chatrejectmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->chatrejectmessage(), target);
  }
  
  // optional .DialogMessage dialogMessage = 67;
  if (has_dialogmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->dialogmessage(), target);
  }
  
  // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
  if (has_timeoutwarningmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->timeoutwarningmessage(), target);
  }
  
  // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
  if (has_resettimeoutmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->resettimeoutmessage(), target);
  }
  
  // optional .ReportAvatarMessage reportAvatarMessage = 70;
  if (has_reportavatarmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->reportavatarmessage(), target);
  }
  
  // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
  if (has_reportavatarackmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->reportavatarackmessage(), target);
  }
  
  // optional .ReportGameMessage reportGameMessage = 72;
  if (has_reportgamemessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->reportgamemessage(), target);
  }
  
  // optional .ReportGameAckMessage reportGameAckMessage = 73;
  if (has_reportgameackmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->reportgameackmessage(), target);
  }
  
  // optional .ErrorMessage errorMessage = 74;
  if (has_errormessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PokerTHMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PokerTHMessage.PokerTHMessageType messageType = 1;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }
    
    // optional .AnnounceMessage announceMessage = 2;
    if (has_announcemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->announcemessage());
    }
    
    // optional .InitMessage initMessage = 3;
    if (has_initmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initmessage());
    }
    
    // optional .AuthServerChallengeMessage authServerChallengeMessage = 4;
    if (has_authserverchallengemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authserverchallengemessage());
    }
    
    // optional .AuthClientResponseMessage authClientResponseMessage = 5;
    if (has_authclientresponsemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authclientresponsemessage());
    }
    
    // optional .AuthServerVerificationMessage authServerVerificationMessage = 6;
    if (has_authserververificationmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authserververificationmessage());
    }
    
    // optional .InitAckMessage initAckMessage = 7;
    if (has_initackmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initackmessage());
    }
    
    // optional .AvatarRequestMessage avatarRequestMessage = 8;
    if (has_avatarrequestmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatarrequestmessage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .AvatarHeaderMessage avatarHeaderMessage = 9;
    if (has_avatarheadermessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatarheadermessage());
    }
    
    // optional .AvatarDataMessage avatarDataMessage = 10;
    if (has_avatardatamessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatardatamessage());
    }
    
    // optional .AvatarEndMessage avatarEndMessage = 11;
    if (has_avatarendmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatarendmessage());
    }
    
    // optional .UnknownAvatarMessage unknownAvatarMessage = 12;
    if (has_unknownavatarmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknownavatarmessage());
    }
    
    // optional .PlayerListMessage playerListMessage = 13;
    if (has_playerlistmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerlistmessage());
    }
    
    // optional .GameListNewMessage gameListNewMessage = 14;
    if (has_gamelistnewmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelistnewmessage());
    }
    
    // optional .GameListUpdateMessage gameListUpdateMessage = 15;
    if (has_gamelistupdatemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelistupdatemessage());
    }
    
    // optional .GameListPlayerJoinedMessage gameListPlayerJoinedMessage = 16;
    if (has_gamelistplayerjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelistplayerjoinedmessage());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .GameListPlayerLeftMessage gameListPlayerLeftMessage = 17;
    if (has_gamelistplayerleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelistplayerleftmessage());
    }
    
    // optional .GameListAdminChangedMessage gameListAdminChangedMessage = 18;
    if (has_gamelistadminchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamelistadminchangedmessage());
    }
    
    // optional .PlayerInfoRequestMessage playerInfoRequestMessage = 19;
    if (has_playerinforequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinforequestmessage());
    }
    
    // optional .PlayerInfoReplyMessage playerInfoReplyMessage = 20;
    if (has_playerinforeplymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinforeplymessage());
    }
    
    // optional .SubscriptionRequestMessage subscriptionRequestMessage = 21;
    if (has_subscriptionrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscriptionrequestmessage());
    }
    
    // optional .JoinExistingGameMessage joinExistingGameMessage = 22;
    if (has_joinexistinggamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joinexistinggamemessage());
    }
    
    // optional .JoinNewGameMessage joinNewGameMessage = 23;
    if (has_joinnewgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joinnewgamemessage());
    }
    
    // optional .RejoinExistingGameMessage rejoinExistingGameMessage = 24;
    if (has_rejoinexistinggamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rejoinexistinggamemessage());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .JoinGameAckMessage joinGameAckMessage = 25;
    if (has_joingameackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joingameackmessage());
    }
    
    // optional .JoinGameFailedMessage joinGameFailedMessage = 26;
    if (has_joingamefailedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joingamefailedmessage());
    }
    
    // optional .GamePlayerJoinedMessage gamePlayerJoinedMessage = 27;
    if (has_gameplayerjoinedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameplayerjoinedmessage());
    }
    
    // optional .GamePlayerLeftMessage gamePlayerLeftMessage = 28;
    if (has_gameplayerleftmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameplayerleftmessage());
    }
    
    // optional .GameAdminChangedMessage gameAdminChangedMessage = 29;
    if (has_gameadminchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameadminchangedmessage());
    }
    
    // optional .RemovedFromGameMessage removedFromGameMessage = 30;
    if (has_removedfromgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->removedfromgamemessage());
    }
    
    // optional .KickPlayerRequestMessage kickPlayerRequestMessage = 31;
    if (has_kickplayerrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickplayerrequestmessage());
    }
    
    // optional .LeaveGameRequestMessage leaveGameRequestMessage = 32;
    if (has_leavegamerequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leavegamerequestmessage());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .InvitePlayerToGameMessage invitePlayerToGameMessage = 33;
    if (has_inviteplayertogamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviteplayertogamemessage());
    }
    
    // optional .InviteNotifyMessage inviteNotifyMessage = 34;
    if (has_invitenotifymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitenotifymessage());
    }
    
    // optional .RejectGameInvitationMessage rejectGameInvitationMessage = 35;
    if (has_rejectgameinvitationmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rejectgameinvitationmessage());
    }
    
    // optional .RejectInvNotifyMessage rejectInvNotifyMessage = 36;
    if (has_rejectinvnotifymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rejectinvnotifymessage());
    }
    
    // optional .StartEventMessage startEventMessage = 37;
    if (has_starteventmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starteventmessage());
    }
    
    // optional .StartEventAckMessage startEventAckMessage = 38;
    if (has_starteventackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starteventackmessage());
    }
    
    // optional .GameStartInitialMessage gameStartInitialMessage = 39;
    if (has_gamestartinitialmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestartinitialmessage());
    }
    
    // optional .GameStartRejoinMessage gameStartRejoinMessage = 40;
    if (has_gamestartrejoinmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamestartrejoinmessage());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .HandStartMessage handStartMessage = 41;
    if (has_handstartmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->handstartmessage());
    }
    
    // optional .PlayersTurnMessage playersTurnMessage = 42;
    if (has_playersturnmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersturnmessage());
    }
    
    // optional .MyActionRequestMessage myActionRequestMessage = 43;
    if (has_myactionrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myactionrequestmessage());
    }
    
    // optional .YourActionRejectedMessage yourActionRejectedMessage = 44;
    if (has_youractionrejectedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->youractionrejectedmessage());
    }
    
    // optional .PlayersActionDoneMessage playersActionDoneMessage = 45;
    if (has_playersactiondonemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersactiondonemessage());
    }
    
    // optional .DealFlopCardsMessage dealFlopCardsMessage = 46;
    if (has_dealflopcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealflopcardsmessage());
    }
    
    // optional .DealTurnCardMessage dealTurnCardMessage = 47;
    if (has_dealturncardmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealturncardmessage());
    }
    
    // optional .DealRiverCardMessage dealRiverCardMessage = 48;
    if (has_dealrivercardmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealrivercardmessage());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .AllInShowCardsMessage allInShowCardsMessage = 49;
    if (has_allinshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allinshowcardsmessage());
    }
    
    // optional .EndOfHandShowCardsMessage endOfHandShowCardsMessage = 50;
    if (has_endofhandshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endofhandshowcardsmessage());
    }
    
    // optional .EndOfHandHideCardsMessage endOfHandHideCardsMessage = 51;
    if (has_endofhandhidecardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endofhandhidecardsmessage());
    }
    
    // optional .ShowMyCardsRequestMessage showMyCardsRequestMessage = 52;
    if (has_showmycardsrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->showmycardsrequestmessage());
    }
    
    // optional .AfterHandShowCardsMessage afterHandShowCardsMessage = 53;
    if (has_afterhandshowcardsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->afterhandshowcardsmessage());
    }
    
    // optional .EndOfGameMessage endOfGameMessage = 54;
    if (has_endofgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endofgamemessage());
    }
    
    // optional .PlayerIdChangedMessage playerIdChangedMessage = 55;
    if (has_playeridchangedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playeridchangedmessage());
    }
    
    // optional .AskKickPlayerMessage askKickPlayerMessage = 56;
    if (has_askkickplayermessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askkickplayermessage());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .AskKickDeniedMessage askKickDeniedMessage = 57;
    if (has_askkickdeniedmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askkickdeniedmessage());
    }
    
    // optional .StartKickPetitionMessage startKickPetitionMessage = 58;
    if (has_startkickpetitionmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startkickpetitionmessage());
    }
    
    // optional .VoteKickRequestMessage voteKickRequestMessage = 59;
    if (has_votekickrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->votekickrequestmessage());
    }
    
    // optional .VoteKickReplyMessage voteKickReplyMessage = 60;
    if (has_votekickreplymessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->votekickreplymessage());
    }
    
    // optional .KickPetitionUpdateMessage kickPetitionUpdateMessage = 61;
    if (has_kickpetitionupdatemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kickpetitionupdatemessage());
    }
    
    // optional .EndKickPetitionMessage endKickPetitionMessage = 62;
    if (has_endkickpetitionmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endkickpetitionmessage());
    }
    
    // optional .StatisticsMessage statisticsMessage = 63;
    if (has_statisticsmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statisticsmessage());
    }
    
    // optional .ChatRequestMessage chatRequestMessage = 64;
    if (has_chatrequestmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatrequestmessage());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .ChatMessage chatMessage = 65;
    if (has_chatmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmessage());
    }
    
    // optional .ChatRejectMessage chatRejectMessage = 66;
    if (has_chatrejectmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatrejectmessage());
    }
    
    // optional .DialogMessage dialogMessage = 67;
    if (has_dialogmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dialogmessage());
    }
    
    // optional .TimeoutWarningMessage timeoutWarningMessage = 68;
    if (has_timeoutwarningmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeoutwarningmessage());
    }
    
    // optional .ResetTimeoutMessage resetTimeoutMessage = 69;
    if (has_resettimeoutmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resettimeoutmessage());
    }
    
    // optional .ReportAvatarMessage reportAvatarMessage = 70;
    if (has_reportavatarmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportavatarmessage());
    }
    
    // optional .ReportAvatarAckMessage reportAvatarAckMessage = 71;
    if (has_reportavatarackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportavatarackmessage());
    }
    
    // optional .ReportGameMessage reportGameMessage = 72;
    if (has_reportgamemessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportgamemessage());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .ReportGameAckMessage reportGameAckMessage = 73;
    if (has_reportgameackmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reportgameackmessage());
    }
    
    // optional .ErrorMessage errorMessage = 74;
    if (has_errormessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PokerTHMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PokerTHMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PokerTHMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PokerTHMessage::MergeFrom(const PokerTHMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_announcemessage()) {
      mutable_announcemessage()->::AnnounceMessage::MergeFrom(from.announcemessage());
    }
    if (from.has_initmessage()) {
      mutable_initmessage()->::InitMessage::MergeFrom(from.initmessage());
    }
    if (from.has_authserverchallengemessage()) {
      mutable_authserverchallengemessage()->::AuthServerChallengeMessage::MergeFrom(from.authserverchallengemessage());
    }
    if (from.has_authclientresponsemessage()) {
      mutable_authclientresponsemessage()->::AuthClientResponseMessage::MergeFrom(from.authclientresponsemessage());
    }
    if (from.has_authserververificationmessage()) {
      mutable_authserververificationmessage()->::AuthServerVerificationMessage::MergeFrom(from.authserververificationmessage());
    }
    if (from.has_initackmessage()) {
      mutable_initackmessage()->::InitAckMessage::MergeFrom(from.initackmessage());
    }
    if (from.has_avatarrequestmessage()) {
      mutable_avatarrequestmessage()->::AvatarRequestMessage::MergeFrom(from.avatarrequestmessage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_avatarheadermessage()) {
      mutable_avatarheadermessage()->::AvatarHeaderMessage::MergeFrom(from.avatarheadermessage());
    }
    if (from.has_avatardatamessage()) {
      mutable_avatardatamessage()->::AvatarDataMessage::MergeFrom(from.avatardatamessage());
    }
    if (from.has_avatarendmessage()) {
      mutable_avatarendmessage()->::AvatarEndMessage::MergeFrom(from.avatarendmessage());
    }
    if (from.has_unknownavatarmessage()) {
      mutable_unknownavatarmessage()->::UnknownAvatarMessage::MergeFrom(from.unknownavatarmessage());
    }
    if (from.has_playerlistmessage()) {
      mutable_playerlistmessage()->::PlayerListMessage::MergeFrom(from.playerlistmessage());
    }
    if (from.has_gamelistnewmessage()) {
      mutable_gamelistnewmessage()->::GameListNewMessage::MergeFrom(from.gamelistnewmessage());
    }
    if (from.has_gamelistupdatemessage()) {
      mutable_gamelistupdatemessage()->::GameListUpdateMessage::MergeFrom(from.gamelistupdatemessage());
    }
    if (from.has_gamelistplayerjoinedmessage()) {
      mutable_gamelistplayerjoinedmessage()->::GameListPlayerJoinedMessage::MergeFrom(from.gamelistplayerjoinedmessage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gamelistplayerleftmessage()) {
      mutable_gamelistplayerleftmessage()->::GameListPlayerLeftMessage::MergeFrom(from.gamelistplayerleftmessage());
    }
    if (from.has_gamelistadminchangedmessage()) {
      mutable_gamelistadminchangedmessage()->::GameListAdminChangedMessage::MergeFrom(from.gamelistadminchangedmessage());
    }
    if (from.has_playerinforequestmessage()) {
      mutable_playerinforequestmessage()->::PlayerInfoRequestMessage::MergeFrom(from.playerinforequestmessage());
    }
    if (from.has_playerinforeplymessage()) {
      mutable_playerinforeplymessage()->::PlayerInfoReplyMessage::MergeFrom(from.playerinforeplymessage());
    }
    if (from.has_subscriptionrequestmessage()) {
      mutable_subscriptionrequestmessage()->::SubscriptionRequestMessage::MergeFrom(from.subscriptionrequestmessage());
    }
    if (from.has_joinexistinggamemessage()) {
      mutable_joinexistinggamemessage()->::JoinExistingGameMessage::MergeFrom(from.joinexistinggamemessage());
    }
    if (from.has_joinnewgamemessage()) {
      mutable_joinnewgamemessage()->::JoinNewGameMessage::MergeFrom(from.joinnewgamemessage());
    }
    if (from.has_rejoinexistinggamemessage()) {
      mutable_rejoinexistinggamemessage()->::RejoinExistingGameMessage::MergeFrom(from.rejoinexistinggamemessage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_joingameackmessage()) {
      mutable_joingameackmessage()->::JoinGameAckMessage::MergeFrom(from.joingameackmessage());
    }
    if (from.has_joingamefailedmessage()) {
      mutable_joingamefailedmessage()->::JoinGameFailedMessage::MergeFrom(from.joingamefailedmessage());
    }
    if (from.has_gameplayerjoinedmessage()) {
      mutable_gameplayerjoinedmessage()->::GamePlayerJoinedMessage::MergeFrom(from.gameplayerjoinedmessage());
    }
    if (from.has_gameplayerleftmessage()) {
      mutable_gameplayerleftmessage()->::GamePlayerLeftMessage::MergeFrom(from.gameplayerleftmessage());
    }
    if (from.has_gameadminchangedmessage()) {
      mutable_gameadminchangedmessage()->::GameAdminChangedMessage::MergeFrom(from.gameadminchangedmessage());
    }
    if (from.has_removedfromgamemessage()) {
      mutable_removedfromgamemessage()->::RemovedFromGameMessage::MergeFrom(from.removedfromgamemessage());
    }
    if (from.has_kickplayerrequestmessage()) {
      mutable_kickplayerrequestmessage()->::KickPlayerRequestMessage::MergeFrom(from.kickplayerrequestmessage());
    }
    if (from.has_leavegamerequestmessage()) {
      mutable_leavegamerequestmessage()->::LeaveGameRequestMessage::MergeFrom(from.leavegamerequestmessage());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_inviteplayertogamemessage()) {
      mutable_inviteplayertogamemessage()->::InvitePlayerToGameMessage::MergeFrom(from.inviteplayertogamemessage());
    }
    if (from.has_invitenotifymessage()) {
      mutable_invitenotifymessage()->::InviteNotifyMessage::MergeFrom(from.invitenotifymessage());
    }
    if (from.has_rejectgameinvitationmessage()) {
      mutable_rejectgameinvitationmessage()->::RejectGameInvitationMessage::MergeFrom(from.rejectgameinvitationmessage());
    }
    if (from.has_rejectinvnotifymessage()) {
      mutable_rejectinvnotifymessage()->::RejectInvNotifyMessage::MergeFrom(from.rejectinvnotifymessage());
    }
    if (from.has_starteventmessage()) {
      mutable_starteventmessage()->::StartEventMessage::MergeFrom(from.starteventmessage());
    }
    if (from.has_starteventackmessage()) {
      mutable_starteventackmessage()->::StartEventAckMessage::MergeFrom(from.starteventackmessage());
    }
    if (from.has_gamestartinitialmessage()) {
      mutable_gamestartinitialmessage()->::GameStartInitialMessage::MergeFrom(from.gamestartinitialmessage());
    }
    if (from.has_gamestartrejoinmessage()) {
      mutable_gamestartrejoinmessage()->::GameStartRejoinMessage::MergeFrom(from.gamestartrejoinmessage());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_handstartmessage()) {
      mutable_handstartmessage()->::HandStartMessage::MergeFrom(from.handstartmessage());
    }
    if (from.has_playersturnmessage()) {
      mutable_playersturnmessage()->::PlayersTurnMessage::MergeFrom(from.playersturnmessage());
    }
    if (from.has_myactionrequestmessage()) {
      mutable_myactionrequestmessage()->::MyActionRequestMessage::MergeFrom(from.myactionrequestmessage());
    }
    if (from.has_youractionrejectedmessage()) {
      mutable_youractionrejectedmessage()->::YourActionRejectedMessage::MergeFrom(from.youractionrejectedmessage());
    }
    if (from.has_playersactiondonemessage()) {
      mutable_playersactiondonemessage()->::PlayersActionDoneMessage::MergeFrom(from.playersactiondonemessage());
    }
    if (from.has_dealflopcardsmessage()) {
      mutable_dealflopcardsmessage()->::DealFlopCardsMessage::MergeFrom(from.dealflopcardsmessage());
    }
    if (from.has_dealturncardmessage()) {
      mutable_dealturncardmessage()->::DealTurnCardMessage::MergeFrom(from.dealturncardmessage());
    }
    if (from.has_dealrivercardmessage()) {
      mutable_dealrivercardmessage()->::DealRiverCardMessage::MergeFrom(from.dealrivercardmessage());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_allinshowcardsmessage()) {
      mutable_allinshowcardsmessage()->::AllInShowCardsMessage::MergeFrom(from.allinshowcardsmessage());
    }
    if (from.has_endofhandshowcardsmessage()) {
      mutable_endofhandshowcardsmessage()->::EndOfHandShowCardsMessage::MergeFrom(from.endofhandshowcardsmessage());
    }
    if (from.has_endofhandhidecardsmessage()) {
      mutable_endofhandhidecardsmessage()->::EndOfHandHideCardsMessage::MergeFrom(from.endofhandhidecardsmessage());
    }
    if (from.has_showmycardsrequestmessage()) {
      mutable_showmycardsrequestmessage()->::ShowMyCardsRequestMessage::MergeFrom(from.showmycardsrequestmessage());
    }
    if (from.has_afterhandshowcardsmessage()) {
      mutable_afterhandshowcardsmessage()->::AfterHandShowCardsMessage::MergeFrom(from.afterhandshowcardsmessage());
    }
    if (from.has_endofgamemessage()) {
      mutable_endofgamemessage()->::EndOfGameMessage::MergeFrom(from.endofgamemessage());
    }
    if (from.has_playeridchangedmessage()) {
      mutable_playeridchangedmessage()->::PlayerIdChangedMessage::MergeFrom(from.playeridchangedmessage());
    }
    if (from.has_askkickplayermessage()) {
      mutable_askkickplayermessage()->::AskKickPlayerMessage::MergeFrom(from.askkickplayermessage());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_askkickdeniedmessage()) {
      mutable_askkickdeniedmessage()->::AskKickDeniedMessage::MergeFrom(from.askkickdeniedmessage());
    }
    if (from.has_startkickpetitionmessage()) {
      mutable_startkickpetitionmessage()->::StartKickPetitionMessage::MergeFrom(from.startkickpetitionmessage());
    }
    if (from.has_votekickrequestmessage()) {
      mutable_votekickrequestmessage()->::VoteKickRequestMessage::MergeFrom(from.votekickrequestmessage());
    }
    if (from.has_votekickreplymessage()) {
      mutable_votekickreplymessage()->::VoteKickReplyMessage::MergeFrom(from.votekickreplymessage());
    }
    if (from.has_kickpetitionupdatemessage()) {
      mutable_kickpetitionupdatemessage()->::KickPetitionUpdateMessage::MergeFrom(from.kickpetitionupdatemessage());
    }
    if (from.has_endkickpetitionmessage()) {
      mutable_endkickpetitionmessage()->::EndKickPetitionMessage::MergeFrom(from.endkickpetitionmessage());
    }
    if (from.has_statisticsmessage()) {
      mutable_statisticsmessage()->::StatisticsMessage::MergeFrom(from.statisticsmessage());
    }
    if (from.has_chatrequestmessage()) {
      mutable_chatrequestmessage()->::ChatRequestMessage::MergeFrom(from.chatrequestmessage());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_chatmessage()) {
      mutable_chatmessage()->::ChatMessage::MergeFrom(from.chatmessage());
    }
    if (from.has_chatrejectmessage()) {
      mutable_chatrejectmessage()->::ChatRejectMessage::MergeFrom(from.chatrejectmessage());
    }
    if (from.has_dialogmessage()) {
      mutable_dialogmessage()->::DialogMessage::MergeFrom(from.dialogmessage());
    }
    if (from.has_timeoutwarningmessage()) {
      mutable_timeoutwarningmessage()->::TimeoutWarningMessage::MergeFrom(from.timeoutwarningmessage());
    }
    if (from.has_resettimeoutmessage()) {
      mutable_resettimeoutmessage()->::ResetTimeoutMessage::MergeFrom(from.resettimeoutmessage());
    }
    if (from.has_reportavatarmessage()) {
      mutable_reportavatarmessage()->::ReportAvatarMessage::MergeFrom(from.reportavatarmessage());
    }
    if (from.has_reportavatarackmessage()) {
      mutable_reportavatarackmessage()->::ReportAvatarAckMessage::MergeFrom(from.reportavatarackmessage());
    }
    if (from.has_reportgamemessage()) {
      mutable_reportgamemessage()->::ReportGameMessage::MergeFrom(from.reportgamemessage());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_reportgameackmessage()) {
      mutable_reportgameackmessage()->::ReportGameAckMessage::MergeFrom(from.reportgameackmessage());
    }
    if (from.has_errormessage()) {
      mutable_errormessage()->::ErrorMessage::MergeFrom(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PokerTHMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PokerTHMessage::CopyFrom(const PokerTHMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PokerTHMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_announcemessage()) {
    if (!this->announcemessage().IsInitialized()) return false;
  }
  if (has_initmessage()) {
    if (!this->initmessage().IsInitialized()) return false;
  }
  if (has_authserverchallengemessage()) {
    if (!this->authserverchallengemessage().IsInitialized()) return false;
  }
  if (has_authclientresponsemessage()) {
    if (!this->authclientresponsemessage().IsInitialized()) return false;
  }
  if (has_authserververificationmessage()) {
    if (!this->authserververificationmessage().IsInitialized()) return false;
  }
  if (has_initackmessage()) {
    if (!this->initackmessage().IsInitialized()) return false;
  }
  if (has_avatarrequestmessage()) {
    if (!this->avatarrequestmessage().IsInitialized()) return false;
  }
  if (has_avatarheadermessage()) {
    if (!this->avatarheadermessage().IsInitialized()) return false;
  }
  if (has_avatardatamessage()) {
    if (!this->avatardatamessage().IsInitialized()) return false;
  }
  if (has_avatarendmessage()) {
    if (!this->avatarendmessage().IsInitialized()) return false;
  }
  if (has_unknownavatarmessage()) {
    if (!this->unknownavatarmessage().IsInitialized()) return false;
  }
  if (has_playerlistmessage()) {
    if (!this->playerlistmessage().IsInitialized()) return false;
  }
  if (has_gamelistnewmessage()) {
    if (!this->gamelistnewmessage().IsInitialized()) return false;
  }
  if (has_gamelistupdatemessage()) {
    if (!this->gamelistupdatemessage().IsInitialized()) return false;
  }
  if (has_gamelistplayerjoinedmessage()) {
    if (!this->gamelistplayerjoinedmessage().IsInitialized()) return false;
  }
  if (has_gamelistplayerleftmessage()) {
    if (!this->gamelistplayerleftmessage().IsInitialized()) return false;
  }
  if (has_gamelistadminchangedmessage()) {
    if (!this->gamelistadminchangedmessage().IsInitialized()) return false;
  }
  if (has_playerinforequestmessage()) {
    if (!this->playerinforequestmessage().IsInitialized()) return false;
  }
  if (has_playerinforeplymessage()) {
    if (!this->playerinforeplymessage().IsInitialized()) return false;
  }
  if (has_subscriptionrequestmessage()) {
    if (!this->subscriptionrequestmessage().IsInitialized()) return false;
  }
  if (has_joinexistinggamemessage()) {
    if (!this->joinexistinggamemessage().IsInitialized()) return false;
  }
  if (has_joinnewgamemessage()) {
    if (!this->joinnewgamemessage().IsInitialized()) return false;
  }
  if (has_rejoinexistinggamemessage()) {
    if (!this->rejoinexistinggamemessage().IsInitialized()) return false;
  }
  if (has_joingameackmessage()) {
    if (!this->joingameackmessage().IsInitialized()) return false;
  }
  if (has_joingamefailedmessage()) {
    if (!this->joingamefailedmessage().IsInitialized()) return false;
  }
  if (has_gameplayerjoinedmessage()) {
    if (!this->gameplayerjoinedmessage().IsInitialized()) return false;
  }
  if (has_gameplayerleftmessage()) {
    if (!this->gameplayerleftmessage().IsInitialized()) return false;
  }
  if (has_gameadminchangedmessage()) {
    if (!this->gameadminchangedmessage().IsInitialized()) return false;
  }
  if (has_removedfromgamemessage()) {
    if (!this->removedfromgamemessage().IsInitialized()) return false;
  }
  if (has_kickplayerrequestmessage()) {
    if (!this->kickplayerrequestmessage().IsInitialized()) return false;
  }
  if (has_leavegamerequestmessage()) {
    if (!this->leavegamerequestmessage().IsInitialized()) return false;
  }
  if (has_inviteplayertogamemessage()) {
    if (!this->inviteplayertogamemessage().IsInitialized()) return false;
  }
  if (has_invitenotifymessage()) {
    if (!this->invitenotifymessage().IsInitialized()) return false;
  }
  if (has_rejectgameinvitationmessage()) {
    if (!this->rejectgameinvitationmessage().IsInitialized()) return false;
  }
  if (has_rejectinvnotifymessage()) {
    if (!this->rejectinvnotifymessage().IsInitialized()) return false;
  }
  if (has_starteventmessage()) {
    if (!this->starteventmessage().IsInitialized()) return false;
  }
  if (has_starteventackmessage()) {
    if (!this->starteventackmessage().IsInitialized()) return false;
  }
  if (has_gamestartinitialmessage()) {
    if (!this->gamestartinitialmessage().IsInitialized()) return false;
  }
  if (has_gamestartrejoinmessage()) {
    if (!this->gamestartrejoinmessage().IsInitialized()) return false;
  }
  if (has_handstartmessage()) {
    if (!this->handstartmessage().IsInitialized()) return false;
  }
  if (has_playersturnmessage()) {
    if (!this->playersturnmessage().IsInitialized()) return false;
  }
  if (has_myactionrequestmessage()) {
    if (!this->myactionrequestmessage().IsInitialized()) return false;
  }
  if (has_youractionrejectedmessage()) {
    if (!this->youractionrejectedmessage().IsInitialized()) return false;
  }
  if (has_playersactiondonemessage()) {
    if (!this->playersactiondonemessage().IsInitialized()) return false;
  }
  if (has_dealflopcardsmessage()) {
    if (!this->dealflopcardsmessage().IsInitialized()) return false;
  }
  if (has_dealturncardmessage()) {
    if (!this->dealturncardmessage().IsInitialized()) return false;
  }
  if (has_dealrivercardmessage()) {
    if (!this->dealrivercardmessage().IsInitialized()) return false;
  }
  if (has_allinshowcardsmessage()) {
    if (!this->allinshowcardsmessage().IsInitialized()) return false;
  }
  if (has_endofhandshowcardsmessage()) {
    if (!this->endofhandshowcardsmessage().IsInitialized()) return false;
  }
  if (has_endofhandhidecardsmessage()) {
    if (!this->endofhandhidecardsmessage().IsInitialized()) return false;
  }
  if (has_afterhandshowcardsmessage()) {
    if (!this->afterhandshowcardsmessage().IsInitialized()) return false;
  }
  if (has_endofgamemessage()) {
    if (!this->endofgamemessage().IsInitialized()) return false;
  }
  if (has_playeridchangedmessage()) {
    if (!this->playeridchangedmessage().IsInitialized()) return false;
  }
  if (has_askkickplayermessage()) {
    if (!this->askkickplayermessage().IsInitialized()) return false;
  }
  if (has_askkickdeniedmessage()) {
    if (!this->askkickdeniedmessage().IsInitialized()) return false;
  }
  if (has_startkickpetitionmessage()) {
    if (!this->startkickpetitionmessage().IsInitialized()) return false;
  }
  if (has_votekickrequestmessage()) {
    if (!this->votekickrequestmessage().IsInitialized()) return false;
  }
  if (has_votekickreplymessage()) {
    if (!this->votekickreplymessage().IsInitialized()) return false;
  }
  if (has_kickpetitionupdatemessage()) {
    if (!this->kickpetitionupdatemessage().IsInitialized()) return false;
  }
  if (has_endkickpetitionmessage()) {
    if (!this->endkickpetitionmessage().IsInitialized()) return false;
  }
  if (has_statisticsmessage()) {
    if (!this->statisticsmessage().IsInitialized()) return false;
  }
  if (has_chatrequestmessage()) {
    if (!this->chatrequestmessage().IsInitialized()) return false;
  }
  if (has_chatmessage()) {
    if (!this->chatmessage().IsInitialized()) return false;
  }
  if (has_chatrejectmessage()) {
    if (!this->chatrejectmessage().IsInitialized()) return false;
  }
  if (has_dialogmessage()) {
    if (!this->dialogmessage().IsInitialized()) return false;
  }
  if (has_timeoutwarningmessage()) {
    if (!this->timeoutwarningmessage().IsInitialized()) return false;
  }
  if (has_reportavatarmessage()) {
    if (!this->reportavatarmessage().IsInitialized()) return false;
  }
  if (has_reportavatarackmessage()) {
    if (!this->reportavatarackmessage().IsInitialized()) return false;
  }
  if (has_reportgamemessage()) {
    if (!this->reportgamemessage().IsInitialized()) return false;
  }
  if (has_reportgameackmessage()) {
    if (!this->reportgameackmessage().IsInitialized()) return false;
  }
  if (has_errormessage()) {
    if (!this->errormessage().IsInitialized()) return false;
  }
  return true;
}

void PokerTHMessage::Swap(PokerTHMessage* other) {
  if (other != this) {
    std::swap(messagetype_, other->messagetype_);
    std::swap(announcemessage_, other->announcemessage_);
    std::swap(initmessage_, other->initmessage_);
    std::swap(authserverchallengemessage_, other->authserverchallengemessage_);
    std::swap(authclientresponsemessage_, other->authclientresponsemessage_);
    std::swap(authserververificationmessage_, other->authserververificationmessage_);
    std::swap(initackmessage_, other->initackmessage_);
    std::swap(avatarrequestmessage_, other->avatarrequestmessage_);
    std::swap(avatarheadermessage_, other->avatarheadermessage_);
    std::swap(avatardatamessage_, other->avatardatamessage_);
    std::swap(avatarendmessage_, other->avatarendmessage_);
    std::swap(unknownavatarmessage_, other->unknownavatarmessage_);
    std::swap(playerlistmessage_, other->playerlistmessage_);
    std::swap(gamelistnewmessage_, other->gamelistnewmessage_);
    std::swap(gamelistupdatemessage_, other->gamelistupdatemessage_);
    std::swap(gamelistplayerjoinedmessage_, other->gamelistplayerjoinedmessage_);
    std::swap(gamelistplayerleftmessage_, other->gamelistplayerleftmessage_);
    std::swap(gamelistadminchangedmessage_, other->gamelistadminchangedmessage_);
    std::swap(playerinforequestmessage_, other->playerinforequestmessage_);
    std::swap(playerinforeplymessage_, other->playerinforeplymessage_);
    std::swap(subscriptionrequestmessage_, other->subscriptionrequestmessage_);
    std::swap(joinexistinggamemessage_, other->joinexistinggamemessage_);
    std::swap(joinnewgamemessage_, other->joinnewgamemessage_);
    std::swap(rejoinexistinggamemessage_, other->rejoinexistinggamemessage_);
    std::swap(joingameackmessage_, other->joingameackmessage_);
    std::swap(joingamefailedmessage_, other->joingamefailedmessage_);
    std::swap(gameplayerjoinedmessage_, other->gameplayerjoinedmessage_);
    std::swap(gameplayerleftmessage_, other->gameplayerleftmessage_);
    std::swap(gameadminchangedmessage_, other->gameadminchangedmessage_);
    std::swap(removedfromgamemessage_, other->removedfromgamemessage_);
    std::swap(kickplayerrequestmessage_, other->kickplayerrequestmessage_);
    std::swap(leavegamerequestmessage_, other->leavegamerequestmessage_);
    std::swap(inviteplayertogamemessage_, other->inviteplayertogamemessage_);
    std::swap(invitenotifymessage_, other->invitenotifymessage_);
    std::swap(rejectgameinvitationmessage_, other->rejectgameinvitationmessage_);
    std::swap(rejectinvnotifymessage_, other->rejectinvnotifymessage_);
    std::swap(starteventmessage_, other->starteventmessage_);
    std::swap(starteventackmessage_, other->starteventackmessage_);
    std::swap(gamestartinitialmessage_, other->gamestartinitialmessage_);
    std::swap(gamestartrejoinmessage_, other->gamestartrejoinmessage_);
    std::swap(handstartmessage_, other->handstartmessage_);
    std::swap(playersturnmessage_, other->playersturnmessage_);
    std::swap(myactionrequestmessage_, other->myactionrequestmessage_);
    std::swap(youractionrejectedmessage_, other->youractionrejectedmessage_);
    std::swap(playersactiondonemessage_, other->playersactiondonemessage_);
    std::swap(dealflopcardsmessage_, other->dealflopcardsmessage_);
    std::swap(dealturncardmessage_, other->dealturncardmessage_);
    std::swap(dealrivercardmessage_, other->dealrivercardmessage_);
    std::swap(allinshowcardsmessage_, other->allinshowcardsmessage_);
    std::swap(endofhandshowcardsmessage_, other->endofhandshowcardsmessage_);
    std::swap(endofhandhidecardsmessage_, other->endofhandhidecardsmessage_);
    std::swap(showmycardsrequestmessage_, other->showmycardsrequestmessage_);
    std::swap(afterhandshowcardsmessage_, other->afterhandshowcardsmessage_);
    std::swap(endofgamemessage_, other->endofgamemessage_);
    std::swap(playeridchangedmessage_, other->playeridchangedmessage_);
    std::swap(askkickplayermessage_, other->askkickplayermessage_);
    std::swap(askkickdeniedmessage_, other->askkickdeniedmessage_);
    std::swap(startkickpetitionmessage_, other->startkickpetitionmessage_);
    std::swap(votekickrequestmessage_, other->votekickrequestmessage_);
    std::swap(votekickreplymessage_, other->votekickreplymessage_);
    std::swap(kickpetitionupdatemessage_, other->kickpetitionupdatemessage_);
    std::swap(endkickpetitionmessage_, other->endkickpetitionmessage_);
    std::swap(statisticsmessage_, other->statisticsmessage_);
    std::swap(chatrequestmessage_, other->chatrequestmessage_);
    std::swap(chatmessage_, other->chatmessage_);
    std::swap(chatrejectmessage_, other->chatrejectmessage_);
    std::swap(dialogmessage_, other->dialogmessage_);
    std::swap(timeoutwarningmessage_, other->timeoutwarningmessage_);
    std::swap(resettimeoutmessage_, other->resettimeoutmessage_);
    std::swap(reportavatarmessage_, other->reportavatarmessage_);
    std::swap(reportavatarackmessage_, other->reportavatarackmessage_);
    std::swap(reportgamemessage_, other->reportgamemessage_);
    std::swap(reportgameackmessage_, other->reportgameackmessage_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PokerTHMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PokerTHMessage_descriptor_;
  metadata.reflection = PokerTHMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
