/*
 * Generated by asn1c-0.9.23 (http://lionet.info/asn1c)
 * From ASN.1 module "POKERTH-PROTOCOL"
 * 	found in "../../../docs/pokerth.asn1"
 * 	`asn1c -fskeletons-copy`
 */

#ifndef	_NetGameInfo_H_
#define	_NetGameInfo_H_


#include <asn_application.h>

/* Including external dependencies */
#include <UTF8String.h>
#include <NativeEnumerated.h>
#include <NativeInteger.h>
#include <constr_CHOICE.h>
#include <asn_SEQUENCE_OF.h>
#include <constr_SEQUENCE_OF.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

	/* Dependencies */
	typedef enum netGameType {
		netGameType_normalGame	= 1,
		 netGameType_registeredOnlyGame	= 2,
		  netGameType_inviteOnlyGame	= 3,
		   netGameType_rankingGame	= 4
	}
	                             e_netGameType;
	typedef enum raiseIntervalMode_PR {
		raiseIntervalMode_PR_NOTHING,	/* No components present */
		raiseIntervalMode_PR_raiseEveryHands,
		raiseIntervalMode_PR_raiseEveryMinutes,
		/* Extensions may appear below */

	} raiseIntervalMode_PR;
	typedef enum endRaiseMode {
		endRaiseMode_doubleBlinds	= 1,
		endRaiseMode_raiseByEndValue	= 2,
		endRaiseMode_keepLastBlind	= 3
	} e_endRaiseMode;

	/* NetGameInfo */
	typedef struct NetGameInfo {
		UTF8String_t	 gameName;
		long	 netGameType;
		long	 maxNumPlayers;
		struct raiseIntervalMode {
			raiseIntervalMode_PR present;
			union NetGameInfo__raiseIntervalMode_u {
				long	 raiseEveryHands;
				long	 raiseEveryMinutes;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
			} choice;

			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} raiseIntervalMode;
		long	 endRaiseMode;
		long	 proposedGuiSpeed;
		long	 delayBetweenHands;
		long	 playerActionTimeout;
		long	 firstSmallBlind;
		long	 endRaiseSmallBlindValue;
		long	 startMoney;
		struct manualBlinds {
			A_SEQUENCE_OF(long) list;

			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} manualBlinds;
		/*
		 * This type is extensible,
		 * possible extensions are below.
		 */

		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} NetGameInfo_t;

	/* Implementation */
	/* extern asn_TYPE_descriptor_t asn_DEF_netGameType_3;	// (Use -fall-defs-global to expose) */
	/* extern asn_TYPE_descriptor_t asn_DEF_endRaiseMode_13;	// (Use -fall-defs-global to expose) */
	extern asn_TYPE_descriptor_t asn_DEF_NetGameInfo;

#ifdef __cplusplus
}
#endif

#endif	/* _NetGameInfo_H_ */
#include <asn_internal.h>
