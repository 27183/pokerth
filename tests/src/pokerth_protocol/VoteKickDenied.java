
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "VoteKickDenied", isSet = false )
    public class VoteKickDenied implements IASN1PreparedElement {
            

    @ASN1PreparedElement
    @ASN1Enum (
        name = "VoteKickDeniedReasonEnumType"
    )
    public static class VoteKickDeniedReasonEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "voteKickDeniedInvalid", hasTag = true , tag = 0 )
            voteKickDeniedInvalid , 
            @ASN1EnumItem ( name = "voteKickDeniedAlreadyVoted", hasTag = true , tag = 1 )
            voteKickDeniedAlreadyVoted , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(VoteKickDeniedReasonEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "voteKickDeniedReason", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private VoteKickDeniedReasonEnumType voteKickDeniedReason = null;
                
  
        
        public VoteKickDeniedReasonEnumType getVoteKickDeniedReason () {
            return this.voteKickDeniedReason;
        }

        

        public void setVoteKickDeniedReason (VoteKickDeniedReasonEnumType value) {
            this.voteKickDeniedReason = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(VoteKickDenied.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            