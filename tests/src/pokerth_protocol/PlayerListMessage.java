
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "PlayerListMessage" )
    public class PlayerListMessage implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "PlayerListMessage" , isSet = false )
       public static class PlayerListMessageSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "playerId", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonZeroId playerId = null;
                
  

    @ASN1PreparedElement
    @ASN1Enum (
        name = "PlayerListNotificationEnumType"
    )
    public static class PlayerListNotificationEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "playerListNew", hasTag = true , tag = 0 )
            playerListNew , 
            @ASN1EnumItem ( name = "playerListLeft", hasTag = true , tag = 1 )
            playerListLeft , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PlayerListNotificationEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "playerListNotification", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private PlayerListNotificationEnumType playerListNotification = null;
                
  
        
        public NonZeroId getPlayerId () {
            return this.playerId;
        }

        

        public void setPlayerId (NonZeroId value) {
            this.playerId = value;
        }
        
  
        
        public PlayerListNotificationEnumType getPlayerListNotification () {
            return this.playerListNotification;
        }

        

        public void setPlayerListNotification (PlayerListNotificationEnumType value) {
            this.playerListNotification = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_PlayerListMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_PlayerListMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(PlayerListMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "PlayerListMessage", isOptional =  false , hasTag =  true, tag = 6, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private PlayerListMessageSequenceType  value;        

        
        
        public PlayerListMessage () {
        }
        
        
        
        public void setValue(PlayerListMessageSequenceType value) {
            this.value = value;
        }
        
        
        
        public PlayerListMessageSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PlayerListMessage.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            