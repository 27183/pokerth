
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "SubscriptionRequestMessage" )
    public class SubscriptionRequestMessage implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "SubscriptionRequestMessage" , isSet = false )
       public static class SubscriptionRequestMessageSequenceType implements IASN1PreparedElement {
                

    @ASN1PreparedElement
    @ASN1Enum (
        name = "SubscriptionActionEnumType"
    )
    public static class SubscriptionActionEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "unsubscribeGameList", hasTag = true , tag = 1 )
            unsubscribeGameList , 
            @ASN1EnumItem ( name = "resubscribeGameList", hasTag = true , tag = 2 )
            resubscribeGameList , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(SubscriptionActionEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "subscriptionAction", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SubscriptionActionEnumType subscriptionAction = null;
                
  
        
        public SubscriptionActionEnumType getSubscriptionAction () {
            return this.subscriptionAction;
        }

        

        public void setSubscriptionAction (SubscriptionActionEnumType value) {
            this.subscriptionAction = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SubscriptionRequestMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_SubscriptionRequestMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(SubscriptionRequestMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "SubscriptionRequestMessage", isOptional =  false , hasTag =  true, tag = 10, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private SubscriptionRequestMessageSequenceType  value;        

        
        
        public SubscriptionRequestMessage () {
        }
        
        
        
        public void setValue(SubscriptionRequestMessageSequenceType value) {
            this.value = value;
        }
        
        
        
        public SubscriptionRequestMessageSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(SubscriptionRequestMessage.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            