
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "AskKickDeniedMessage" )
    public class AskKickDeniedMessage implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "AskKickDeniedMessage" , isSet = false )
       public static class AskKickDeniedMessageSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "gameId", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonZeroId gameId = null;
                
  
        @ASN1Element ( name = "playerId", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonZeroId playerId = null;
                
  

    @ASN1PreparedElement
    @ASN1Enum (
        name = "KickDeniedReasonEnumType"
    )
    public static class KickDeniedReasonEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "kickDeniedInvalidGameState", hasTag = true , tag = 0 )
            kickDeniedInvalidGameState , 
            @ASN1EnumItem ( name = "kickDeniedNotPossible", hasTag = true , tag = 1 )
            kickDeniedNotPossible , 
            @ASN1EnumItem ( name = "kickDeniedTryAgainLater", hasTag = true , tag = 2 )
            kickDeniedTryAgainLater , 
            @ASN1EnumItem ( name = "kickDeniedAlreadyInProgress", hasTag = true , tag = 3 )
            kickDeniedAlreadyInProgress , 
            @ASN1EnumItem ( name = "kickDeniedInvalidPlayerId", hasTag = true , tag = 4 )
            kickDeniedInvalidPlayerId , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(KickDeniedReasonEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "kickDeniedReason", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private KickDeniedReasonEnumType kickDeniedReason = null;
                
  
        
        public NonZeroId getGameId () {
            return this.gameId;
        }

        

        public void setGameId (NonZeroId value) {
            this.gameId = value;
        }
        
  
        
        public NonZeroId getPlayerId () {
            return this.playerId;
        }

        

        public void setPlayerId (NonZeroId value) {
            this.playerId = value;
        }
        
  
        
        public KickDeniedReasonEnumType getKickDeniedReason () {
            return this.kickDeniedReason;
        }

        

        public void setKickDeniedReason (KickDeniedReasonEnumType value) {
            this.kickDeniedReason = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_AskKickDeniedMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_AskKickDeniedMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(AskKickDeniedMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "AskKickDeniedMessage", isOptional =  false , hasTag =  true, tag = 65, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private AskKickDeniedMessageSequenceType  value;        

        
        
        public AskKickDeniedMessage () {
        }
        
        
        
        public void setValue(AskKickDeniedMessageSequenceType value) {
            this.value = value;
        }
        
        
        
        public AskKickDeniedMessageSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AskKickDeniedMessage.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            