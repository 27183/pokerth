
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "ChatRejectMessage" )
    public class ChatRejectMessage implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ChatRejectMessage" , isSet = false )
       public static class ChatRejectMessageSequenceType implements IASN1PreparedElement {
                
    @ASN1String( name = "", 
        stringType = UniversalTag.UTF8String , isUCS = false )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 128L 
		
	   )
	   
        @ASN1Element ( name = "chatText", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private String chatText = null;
                
  
        
        public String getChatText () {
            return this.chatText;
        }

        

        public void setChatText (String value) {
            this.chatText = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ChatRejectMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_ChatRejectMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(ChatRejectMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ChatRejectMessage", isOptional =  false , hasTag =  true, tag = 131, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private ChatRejectMessageSequenceType  value;        

        
        
        public ChatRejectMessage () {
        }
        
        
        
        public void setValue(ChatRejectMessageSequenceType value) {
            this.value = value;
        }
        
        
        
        public ChatRejectMessageSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ChatRejectMessage.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            