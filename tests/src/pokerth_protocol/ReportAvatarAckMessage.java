
package pokerth_protocol;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "ReportAvatarAckMessage" )
    public class ReportAvatarAckMessage implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ReportAvatarAckMessage" , isSet = false )
       public static class ReportAvatarAckMessageSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "reportedPlayerId", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NonZeroId reportedPlayerId = null;
                
  

    @ASN1PreparedElement
    @ASN1Enum (
        name = "ReportResultEnumType"
    )
    public static class ReportResultEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "avatarReportAccepted", hasTag = true , tag = 0 )
            avatarReportAccepted , 
            @ASN1EnumItem ( name = "avatarReportDuplicate", hasTag = true , tag = 1 )
            avatarReportDuplicate , 
            @ASN1EnumItem ( name = "avatarReportInvalid", hasTag = true , tag = 2 )
            avatarReportInvalid , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ReportResultEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "reportResult", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ReportResultEnumType reportResult = null;
                
  
        
        public NonZeroId getReportedPlayerId () {
            return this.reportedPlayerId;
        }

        

        public void setReportedPlayerId (NonZeroId value) {
            this.reportedPlayerId = value;
        }
        
  
        
        public ReportResultEnumType getReportResult () {
            return this.reportResult;
        }

        

        public void setReportResult (ReportResultEnumType value) {
            this.reportResult = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ReportAvatarAckMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_ReportAvatarAckMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(ReportAvatarAckMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ReportAvatarAckMessage", isOptional =  false , hasTag =  true, tag = 137, 
        tagClass =  TagClass.Application  , hasDefaultValue =  false  )
    
        private ReportAvatarAckMessageSequenceType  value;        

        
        
        public ReportAvatarAckMessage () {
        }
        
        
        
        public void setValue(ReportAvatarAckMessageSequenceType value) {
            this.value = value;
        }
        
        
        
        public ReportAvatarAckMessageSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ReportAvatarAckMessage.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            